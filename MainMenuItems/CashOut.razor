@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Repo

@if (!Mobile)
{
    <div class="modal show" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true" style="background-color:rgba(0,0,0,.8);">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="width:50vw;position: absolute;left: 50%; top: 50%;
                            transform: translate(-50%, 0%);background-color:@Constants.ColorScheme["ComponentBackground"]">
                <div class="modal-header">
                    <h5 class="modal-title" style="font-size:large;font-family:'CBB Default';color:white;">
                        Cash Out
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-dismiss="modal" aria-label="Close" @onclick="@ModalCancel">
                    </button>
                </div>
                <div class="modal-body" style="width:100%;color:white;">
                    <div class="flex-c" style="justify-content:space-between">
                        @if (Envelopes != null && Envelopes.Count > 0)
                        {
                            <div>
                                <FancySelect @bind-Value=@SelectedEnvID>
                                    <option selected disabled="disabled">@($"(Select Goal Envelope)")</option>
                                    @foreach (var env in Envelopes)
                                    {
                                        <option value=@env.Id>@env.Name</option>
                                    }
                                </FancySelect>
                            </div>
                            @if (SelectedEnv != null)
                            {
                                <br />
                                <div class="flex-r" style="justify-content:space-between;width:100%;">
                                    <div style="align-content:flex-start">
                                        <Stashvelope Name=@SelectedEnv.Name Scale=20 Font_Size=2 Adding=false
                                                     Cashing=Cashing Goal=@SelectedEnv.Goal Saved=@SelectedEnv.TotalAmount />
                                    </div>
                                    <div class="flex-c">
                                        <img alt="Cash Arrow" src="/images/CashArrow.webp" style="height:3vw;cursor:pointer" @onclick=@(() => HandleCash()) />
                                    </div>

                                    <div class="flex-c" style="justify-content:space-evenly">
                                        @if (SelectedEnv.Person1Account != "NONE")
                                        {
                                            <div class="flex-r" style="justify-content:space-between">
                                                <label>@Constants.Person1:</label>
                                                <div>
                                                    <input class="custom-input" type="number" placeholder="Amount" @bind="Person1Amount" />
                                                    <br />
                                                    <span class="flex-r-100" style="font-style:italic;color:cyan">Available Saved: @Constants.Pretty(SelectedEnv.Person1Amount)</span>
                                                </div>
                                            </div>
                                        }
                                        @if (SelectedEnv.Person2Account != "NONE")
                                        {
                                            <div class="flex-r" style="justify-content:space-between">
                                                <label>@Constants.Person2:</label>
                                                <div>
                                                    <input class="custom-input" type="number" placeholder="Amount" @bind="Person2Amount" />
                                                    <br />
                                                    <span class="flex-r-100" style="font-style:italic;color:cyan">Available Saved: @Constants.Pretty(SelectedEnv.Person2Amount)</span>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(ErrorMsg))
                            {
                                <p style="color:@ErrorColor">@ErrorMsg</p>
                            }

                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="modal show" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true" style="background-color:rgba(0,0,0,.8);">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="width:fit-content;margin:0 auto;background-color:@Constants.ColorScheme["ComponentBackground"]">
                <div class="modal-header">
                    <h5 class="modal-title" style="font-size:large;font-family:'CBB Default';color:white;">
                        Cash Out
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-dismiss="modal" aria-label="Close" @onclick="@ModalCancel">
                    </button>
                </div>
                <div class="modal-body" style="width:100%;color:white;@(SelectedEnv != null ? "overflow-y:auto;height:90vh;" : "")">
                    <div class="flex-c" style="justify-content:space-between">
                        @if (Envelopes != null && Envelopes.Count > 0)
                        {
                            <div>
                                <FancySelect @bind-Value=@SelectedEnvID>
                                    <option selected disabled="disabled">@($"(Select Goal Envelope)")</option>
                                    @foreach (var env in Envelopes)
                                    {
                                        <option value=@env.Id>@env.Name</option>
                                    }
                                </FancySelect>
                            </div>
                            @if (SelectedEnv != null)
                            {
                                <br />
                                <div class="flex-c" style="justify-content:space-between;width:100%;">
                                    <table class="borderless-table">
                                        @if (SelectedEnv.Person1Account != "NONE")
                                        {
                                            <tr>
                                                <td style="padding:1em 0;vertical-align:top">
                                                    <label>@Constants.Person1:</label>
                                                </td>
                                                <td style="padding:1em 0">
                                                    <div>
                                                        <input class="custom-input" type="number" placeholder="Amount" @bind="Person1Amount" />
                                                        <br />
                                                        <span class="flex-r-100" style="font-style:italic;color:cyan;text-align:center">Available Balance: @Constants.Pretty(SelectedEnv.Person1Amount)</span>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                        @if (SelectedEnv.Person2Account != "NONE")
                                        {
                                            <tr>
                                                <td style="padding:1em 0;vertical-align:top">
                                                    <label>@Constants.Person2:</label>
                                                </td>
                                                <td style="padding:1em 0">
                                                    <div>
                                                        <input class="custom-input" type="number" placeholder="Amount" @bind="Person2Amount" />
                                                        <br />
                                                        <span class="flex-r-100" style="font-style:italic;color:cyan;text-align:center">Available Balance: @Constants.Pretty(SelectedEnv.Person2Amount)</span>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </table>
                                    <div class="flex-c" style="height:auto">
                                        <img alt="Cash Arrow for Mobile" src="/images/CashArrowMobile.webp" style="height:30vw;cursor:pointer" @onclick=@(() => HandleCash()) />
                                    </div>
                                    <div style="align-content:flex-end">
                                        <Stashvelope Name=@SelectedEnv.Name Scale=80 Font_Size=8 Adding=false
                                                     Cashing=Cashing Goal=@SelectedEnv.Goal Saved=@SelectedEnv.TotalAmount />
                                    </div>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(ErrorMsg))
                            {
                                <p style="color:@ErrorColor">@ErrorMsg</p>
                            }

                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    public double Person1Amount { get; set; }
    public double Person2Amount { get; set; }
    public bool Cashing { get; set; }

    public string ErrorMsg { get; set; }
    public string ErrorColor { get; set; }

    private List<Data.Envelope> Envelopes { get; set; }

    public bool Mobile => Constants.Mobile;


    private string selectedEnvID { get; set; }
    private string SelectedEnvID
    {
        get { return selectedEnvID; }
        set
        {
            SelectedEnv = Envelopes.FirstOrDefault(e => e.Id == value);
            selectedEnvID = value;
            StateHasChanged();
        }
    }
    private Data.Envelope SelectedEnv { get; set; }


    protected override Task OnInitializedAsync()
    {
        Envelopes = Constants.Envelopes.OrderBy(e => e.Name).ToList();
        Envelopes = Envelopes.Where(en => en.TotalAmount > 0).ToList();
        return base.OnInitializedAsync();
    }

    private async Task HandleCash()
    {
        ErrorMsg = string.Empty;
        ErrorColor = "red";

        if (SelectedEnv.Person1Account != "NONE" && SelectedEnv.Person2Account != "NONE")
        {
            if (Person1Amount <= 0 && Person2Amount <= 0)
                ErrorMsg += "At least one person must contribute. ";
        }
        else if (SelectedEnv.Person1Account != "NONE")
        {
            if (Person1Amount <= 0)
                ErrorMsg += $"{Constants.Person1} must contribute. ";
        }
        else if (SelectedEnv.Person2Account != "NONE")
        {
            if (Person2Amount <= 0)
                ErrorMsg += $"{Constants.Person2} must contribute. ";
        }

        if (Math.Round(SelectedEnv.Person1Amount, 2) - Person1Amount < 0)
            ErrorMsg += $"Envelope value for {Constants.Person1} cannot be less than zero. {Constants.Person1} has {Constants.Pretty(SelectedEnv.Person1Amount)} saved. ";
        if (Math.Round(SelectedEnv.Person2Amount - Person2Amount, 2) < 0)
            ErrorMsg += $"Envelope value for {Constants.Person2} cannot be less than zero. {Constants.Person2} has {Constants.Pretty(SelectedEnv.Person2Amount)} saved. ";


        if (string.IsNullOrEmpty(ErrorMsg))
        {
            Data.Envelope UpdateEnv = new Data.Envelope(SelectedEnv);
            UpdateEnv.Person1Amount -= Person1Amount;
            UpdateEnv.Person2Amount -= Person2Amount;
            SelectedEnv.Person1Amount -= Person1Amount;
            SelectedEnv.Person2Amount -= Person2Amount;

            Cashing = true;
            StateHasChanged();
            Task runner = EnvelopeRepo.AddOrUpdateAsync(UpdateEnv);
            await Task.Delay(2000);

            await runner;

            StateHasChanged();
            Cashing = false;
        }
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private async Task ModalDecline()
    {
        await OnClose.InvokeAsync(false);
    }
}