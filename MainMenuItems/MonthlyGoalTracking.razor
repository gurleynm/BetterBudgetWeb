@using BetterBudgetWeb.Data
@using BetterBudgetWeb.MainMenuItems.Chart.ChartHorizontal
@using BetterBudgetWeb.Repo;
@using static BetterBudgetWeb.MainMenuItems.DonutChart
<div class="chart-back-hor" style="width:100%;">
    <table class="chart-hor" style="margin-bottom:1em">
        <ChartBarHorizontal Value=@ActualIncomeAmount
                            Label="Income Goal"
                            Negative=false
                            MaxValue=@ProjectedIncomeAmount
                            BottomBorder=false />
    </table>
    <div style="display:flex;flex-direction:row;width:100%;justify-content:space-evenly">
        <table style="background-color:transparent;border:none;margin-bottom:1em">
            <tr>
                <th style="border:none"></th>
                <th style="border:none">INCOME</th>
                <th style="border:none">EXPENSES</th>
                <th style="border:none">NET</th>
            </tr>
            <tr style="background-color:transparent">
                <td style="border:none">Projected:</td>
                <td style="border:none">
                    <input type="number" placeholder="Income" style="width:5em;padding:0;margin:0;margin-bottom:1vh"
                           @bind=ProjectedIncomeAmountStr />
                </td>
                <td style="border:none"><span style="color:@Constants.GoodOrBad(-(ProjectedDynamicAmount + ProjectedStaticAmount))">@Constants.Pretty(ProjectedDynamicAmount + ProjectedStaticAmount)</span></td>
                <td style="border:none"><span style="color:@Constants.GoodOrBad(ProjectedNetAmount)">@Constants.Pretty(ProjectedNetAmount)</span></td>
            </tr>
            <tr style="background-color:transparent">
                <td style="border:none">Actual:</td>
                <td style="border:none;color:@Constants.GoodOrBad(ActualIncomeAmount)"><span>@Constants.Pretty(ActualIncomeAmount)</span></td>
                <td style="border:none"><span style="color:@Constants.GoodOrBad(-(ActualDynamicAmount + ActualStaticAmount))">@Constants.Pretty(ActualDynamicAmount + ActualStaticAmount)</span></td>
                <td style="border:none"><span style="color:@Constants.GoodOrBad(ActualNetAmount)">@Constants.Pretty(ActualNetAmount)</span></td>
            </tr>
        </table>
    </div>
    @if (Expenses != null && Expenses.Count > 0)
    {
        <div class="chart-hor">
            <DonutChart ChartId="donut1" Expenses=@Expenses />
        </div>
    }
</div>

@code {
    [Parameter]
    public double ActualIncomeAmount { get; set; }

    [Parameter]
    public double ActualDynamicAmount { get; set; }

    [Parameter]
    public double ActualStaticAmount { get; set; }

    [Parameter]
    public double EnvelopeAmount { get; set; }

    [Parameter]
    public List<Transaction> Transactions { get; set; }

    public string projectedIncomeAmountStrOG { get; set; }
    public string projectedIncomeAmountStr { get; set; }
    public string ProjectedIncomeAmountStr
    {
        get { return projectedIncomeAmountStr; }
        set
        {
            if (double.TryParse(value, out double tosser))
            {
                ProjectedIncomeAmount = tosser;
                projectedIncomeAmountStr = value;
                if (projectedIncomeAmountStrOG != value)
                    MonthlyRepo.AddOrUpdateAsync("SAVINGS", tosser / 2, tosser / 2, "SAVINGS", "All 1");
            }
            else
            {
                ProjectedIncomeAmount = 0;
                projectedIncomeAmountStr = "";
            }
        }
    }
    public double ProjectedIncomeAmount { get; set; }
    public double ProjectedDynamicAmount { get; set; }
    public double ProjectedStaticAmount { get; set; }

    public double ActualNetAmount => ActualIncomeAmount - ActualDynamicAmount - ActualStaticAmount - EnvelopeAmount;
    public double ProjectedNetAmount => ProjectedIncomeAmount - ProjectedDynamicAmount - ProjectedStaticAmount;

    private List<SavingsGoal> ThisMonthSavingsGoals { get; set; } = new List<SavingsGoal>();
    private List<ExpenseAmount> Expenses { get; set; } = new List<ExpenseAmount>();

    protected override Task OnInitializedAsync()
    {
        SavingsGoal Default1 = Constants.SavingsGoals.FirstOrDefault(sg => sg.Person.Contains(Constants.Person1) && sg.Month == "All");
        SavingsGoal Default2 = Constants.SavingsGoals.FirstOrDefault(sg => sg.Person.Contains(Constants.Person2) && sg.Month == "All");

        var dcis = Constants.DynamicCostItems;
        var dciNames = Constants.DynamicCostItems.Select(d => d.Name);
        var smcs = Constants.StaticMonthlyCosts;

        ProjectedDynamicAmount = dcis.Sum(dci => dci.Amount);
        ProjectedStaticAmount = smcs.Sum(smc => smc.TotalAmount);

        if (Default1 == null || Default2 == null)
            return base.OnInitializedAsync();

        ThisMonthSavingsGoals.Add(Default1);
        ThisMonthSavingsGoals.Add(Default2);

        projectedIncomeAmountStrOG = ThisMonthSavingsGoals.Sum(tmsg => tmsg.Goal).ToString();
        ProjectedIncomeAmountStr = projectedIncomeAmountStrOG;

        foreach (var dcin in dciNames)
        {
            double sum = Transactions.Where(t => t.ExpenseType == dcin).Sum(to => to.TotalAmount);
            if (sum > 0)
                Expenses.Add(new ExpenseAmount(dcin, sum));
        }

        var statics = Transactions.Where(tr => tr.ExpenseType == "Static Cost");
        foreach (var stat in statics)
            Expenses.Add(new ExpenseAmount(stat.Name, stat.TotalAmount));

        return base.OnInitializedAsync();
    }
}
