@using BetterBudgetWeb.Data
@using BetterBudgetWeb.MainMenuItems.Chart
@using BetterBudgetWeb.MainMenuItems.Chart.ChartHorizontal
@using BetterBudgetWeb.Repo;
@implements IDisposable

<div class="chart-back-hor" style="width:100%;">
    <div class="flex-r" style="width:100%;justify-content:space-evenly;border:solid black 1px;border-radius:10px;margin-bottom:1em;padding:1em">
        <table style="background-color:transparent;border-radius:0;border:none;margin-bottom:1em">
            <tr>
                <td colspan="3" style="border:none;text-align:start"><strong>Projected:</strong></td>
            </tr>
            <tr>
                <td style="border:none">INCOME</td>
                <td style="border:none">EXPENSES</td>
                <td style="border:none">NET</td>
            </tr>
            <tr style="background-color:transparent">
                <td style="border:none;padding-left:1em">
                    <input type="number" placeholder="Income"
                    style="width:5em;padding:0;margin:0;margin-bottom:1vh;background-color:transparent;color:white;
                                    border:solid white 1px;text-align:center;"
                    @bind=ProjectedIncomeAmountStr />
                </td>
                <td style="border:none"><span style="color:@Constants.GoodOrBad(-(ProjectedDynamicAmount + ProjectedStaticAmount))">@Constants.Pretty(ProjectedDynamicAmount + ProjectedStaticAmount)</span></td>
                <td style="border:none"><span style="color:@Constants.GoodOrBad(ProjectedNetAmount)">@Constants.Pretty(ProjectedNetAmount)</span></td>
            </tr>
            <tr>
                <td colspan="3" style="border:none;text-align:start"><strong>Actual:</strong></td>
            </tr>
            <tr>
                <td style="border:none">INCOME</td>
                <td style="border:none">EXPENSES</td>
                <td style="border:none">NET</td>
            </tr>
            <tr style="background-color:transparent">
                <td style="border:none;color:@Constants.GoodOrBad(ActualIncomeAmount)"><span>@Constants.Pretty(ActualIncomeAmount)</span></td>
                <td style="border:none"><span style="color:@Constants.GoodOrBad(-(ActualDynamicAmount + ActualStaticAmount + EnvelopeAmount))">@Constants.Pretty(ActualDynamicAmount + ActualStaticAmount + EnvelopeAmount)</span></td>
                <td style="border:none"><span style="color:@Constants.GoodOrBad(ActualNetAmount)">@Constants.Pretty(ActualNetAmount)</span></td>
            </tr>
        </table>
    </div>
    <div class="chart-hor" style="margin-bottom:1em">
        <ChartBarHorizontal Value=@ActualIncomeAmount
        Reverse=true
        Label="Income Goal"
        MaxValue=@ProjectedIncomeAmount
        FillColor="green"
        BackgroundColor="#c3b4f3"
        SearchTerm="Income"
        BottomBorder=false/>
    </div>
    @if (Expenses != null && Expenses.Count > 0)
    {
        <div class="chart-hor">
            <MyDoughnutChart @ref=Donut Expenses="Expenses" />
        </div>
    }
</div>

@code {
    [Parameter]
    public double ActualIncomeAmount { get; set; }

    [Parameter]
    public double ActualDynamicAmount { get; set; }

    [Parameter]
    public double ActualStaticAmount { get; set; }

    [Parameter]
    public double EnvelopeAmount { get; set; }

    public MyDoughnutChart Donut { get; set; }

    public List<Transaction> Transactions { get; set; }

    public string projectedIncomeAmountStrOG { get; set; }
    public string projectedIncomeAmountStr { get; set; }
    public string ProjectedIncomeAmountStr
    {
        get { return projectedIncomeAmountStr; }
        set
        {
            if (double.TryParse(value, out double tosser))
            {
                ProjectedIncomeAmount = tosser;
                projectedIncomeAmountStr = value;
                if (projectedIncomeAmountStrOG != value)
                    MonthlyRepo.AddOrUpdateAsync("SAVINGS", tosser / 2, tosser / 2, "SAVINGS", "All 1");
            }
            else
            {
                ProjectedIncomeAmount = 0;
                projectedIncomeAmountStr = "";
            }
        }
    }
    public double ProjectedIncomeAmount { get; set; }
    public double ProjectedDynamicAmount { get; set; }
    public double ProjectedStaticAmount { get; set; }

    public double ActualNetAmount => ActualIncomeAmount - ActualDynamicAmount - ActualStaticAmount - EnvelopeAmount;
    public double ProjectedNetAmount => ProjectedIncomeAmount - ProjectedDynamicAmount - ProjectedStaticAmount;

    private List<SavingsGoal> ThisMonthSavingsGoals { get; set; } = new List<SavingsGoal>();
    private List<ExpenseAmount> Expenses { get; set; } = new List<ExpenseAmount>();

    protected override Task OnInitializedAsync()
    {
        Constants.TransactionsChanged += TransactionsUpdated;

        Refresh();

        return base.OnInitializedAsync();
    }

    private void Refresh()
    {
        Expenses.Clear();
        ThisMonthSavingsGoals.Clear();
        SavingsGoal Default1 = Constants.SavingsGoals.FirstOrDefault(sg => sg.Person.Contains(Constants.Person1) && sg.Month == "All");
        SavingsGoal Default2 = Constants.SavingsGoals.FirstOrDefault(sg => sg.Person.Contains(Constants.Person2) && sg.Month == "All");

        var dcis = Constants.DynamicCostItems;
        var dciNames = Constants.DynamicCostItems.Select(d => d.Name);
        var envNames = Constants.Envelopes.Select(e => e.Name);
        var smcs = Constants.StaticMonthlyCosts;

        ProjectedDynamicAmount = dcis.Sum(dci => dci.Amount);
        ProjectedStaticAmount = smcs.Sum(smc => smc.TotalAmount);

        if (Default1 == null || Default2 == null)
            return;

        ThisMonthSavingsGoals.Add(Default1);
        ThisMonthSavingsGoals.Add(Default2);

        projectedIncomeAmountStrOG = ThisMonthSavingsGoals.Sum(tmsg => tmsg.Goal).ToString();
        ProjectedIncomeAmountStr = projectedIncomeAmountStrOG;
        Transactions = Constants.Transactions.Where(t => t.MonthYear() == Constants.MonthYear()).OrderByDescending(t => t.DateOfTransaction).ToList();

        foreach (var dcin in dciNames)
        {
            double sum = Transactions.Where(t => t.ExpenseType == dcin).Sum(to => to.TotalAmount);
            if (sum > 0)
                Expenses.Add(new ExpenseAmount(dcin, sum));
        }

        var statics = Transactions.Where(tr => tr.ExpenseType == "Static Cost");
        foreach (var stat in statics)
            Expenses.Add(new ExpenseAmount(stat.Name, stat.TotalAmount));

        var envs = Transactions.Where(tr => envNames.Contains(tr.ExpenseType)).ToList();
        var UsedEnvs = envs.Select(en => en.ExpenseType).Distinct();
        
        foreach(var env in UsedEnvs)
            Expenses.Add(new ExpenseAmount(env, envs.Where(en => en.ExpenseType == env).Sum(e => e.TotalAmount)));

        StateHasChanged();
    }

    private async void TransactionsUpdated(object sender, List<Transaction> e)
    {
        if (e != null && e.Count > 0)
        {
            Refresh();
            await Donut?.Redrive();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        Constants.TransactionsChanged -= TransactionsUpdated;
    }
}
