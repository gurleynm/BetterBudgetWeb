@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Runner;

<div style="position:relative">
    @if (Added)
    {
        <div class="floaty-rev" style="position:absolute;height:100%;width:100%;background-color:green;border-radius:@BorderRadius;"></div>
        <div class="floaty-rev flex-c" style="position:absolute;height:100%;width:100%;border-radius:@BorderRadius;align-items:center;">
            <span class="oi oi-circle-check" style="font-size:x-large"></span>
        </div>
    }
    <div class="outer_add">
        <h2 style="text-align:center">Add An Expense</h2>
        <h4 style="text-align:center;color:@ErrorMsgColor">@ErrorMsg</h4>
        <hr style="color:black" />
        <EditForm Model="@NewTrans">
            <table class="add_expense">
                @if (!Mobile)
                {
                    <tr>
                        <td colspan="1">
                            <input type="date" class="custom-input" style="width:80%;color-scheme: dark;" @bind-value="@NewTrans.DateOfTransaction" @oninput="@(async (ui) => { NewTrans.DateOfTransaction = DateTime.TryParse((string)ui.Value, out DateTime toss) ? toss : DateTime.Now; })" />
                        </td>
                        <td colspan="2">
                            <input type="text" class="custom-input" placeholder="Enter Name" @bind-value="@NewTrans.Name" @oninput="@(async (ui) => { NewTrans.Name = (string)ui.Value; })" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <input class="custom-input" type="number" style="width:80%;" placeholder="$ Amount" @bind-value="@TopAmount" @oninput="@(async (ui) => { TopAmount = (string)ui.Value; })" />
                        </td>
                        <td>
                            <PaymentInput @bind-PaidWith="@NewTrans.TopPaidWith" />
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(NewTrans.TopPaidWith) && !string.IsNullOrEmpty(NewTrans.TopWhoPaid))
                            {
                                <div style="color:white">@("➡️ " + NewTrans.TopWhoPaid)</div>
                            }
                        </td>
                    </tr>
                    @if (!string.IsNullOrEmpty(NewTrans.TopPaidWith) && string.IsNullOrEmpty(NewTrans.TopWhoPaid))
                    {
                        <tr>
                            <td colspan="3">
                                <FancySelect @bind-Value="NewTrans.TopWhoPaid">
                                    <option value="@string.Empty" disabled selected>--Pick Person--</option>
                                    <option>@Constants.Person1</option>
                                    <option>@Constants.Person2</option>
                                </FancySelect>
                            </td>
                        </tr>
                    }
                    @if (ShowSecond)
                    {
                        <tr>
                            <td>
                                <input type="number" class="custom-input" placeholder="$ Amount" @bind-value="@BottomAmount" @oninput="@(async (ui) => { BottomAmount = (string)ui.Value; })" />
                            </td>
                            <td>
                                <PaymentInput @bind-PaidWith="@NewTrans.BottomPaidWith" />
                            </td>
                            <td>
                                @if (!string.IsNullOrEmpty(NewTrans.BottomPaidWith) && !string.IsNullOrEmpty(NewTrans.BottomWhoPaid))
                                {
                                    <div style="color:white">@("➡️ " + NewTrans.BottomWhoPaid)</div>
                                }
                            </td>
                        </tr>
                    }
                    @if (!string.IsNullOrEmpty(NewTrans.BottomPaidWith) && string.IsNullOrEmpty(NewTrans.BottomWhoPaid))
                    {
                        <tr>
                            <td colspan="3">
                                <FancySelect @bind-Value="NewTrans.BottomWhoPaid">
                                    <option value="@string.Empty" disabled selected>--Pick Person--</option>
                                    <option>@Constants.Person1</option>
                                    <option>@Constants.Person2</option>
                                </FancySelect>
                            </td>
                        </tr>
                    }
                    <tr>
                        <td colspan="3">
                            <ExpenseTypeInput @bind-NewExpense=@NewTrans.ExpenseType />
                        </td>
                    </tr>
                    <tr>
                        <td colspan="3" style="padding:1vw">
                            @if (ShowSecond)
                            {
                                <button class="btn btn-danger" @onclick=@(() => ShowSecond = !ShowSecond)>Hide Second Person</button>
                            }
                            else
                            {
                                <button class="btn btn-primary" @onclick=@(() => ShowSecond = !ShowSecond)>Show Second Person</button>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td colspan="3" style="color:cyan;padding:1vw">@("Total: " + Constants.Pretty(NewTrans.TotalAmount))</td>
                    </tr>
                    <tr>
                        <td colspan="3">
                            @if (Disabled)
                            {
                                <LoadingDots />
                            }
                            else
                            {
                                <div class="flex-r-100" style="margin-bottom:.75em">
                                    <button class="btn btn-grad" disabled=@Disabled @onclick="@(() => Add())" style="box-shadow: none;">
                                        Add
                                    </button>
                                </div>
                            }
                        </td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td class="flex-r" style="padding:1vw;justify-content:space-evenly">
                            <input type="date" class="custom-input" style="color-scheme: dark;" @bind-value="@NewTrans.DateOfTransaction" @oninput="@(async (ui) => { NewTrans.DateOfTransaction = DateTime.TryParse((string)ui.Value, out DateTime toss) ? toss : DateTime.Now; })" />

                            <input type="text" class="custom-input" placeholder="Enter Name" @bind-value="@NewTrans.Name" @oninput="@(async (ui) => { NewTrans.Name = (string)ui.Value; })" />
                        </td>
                    </tr>
                    <tr>
                        <td class="flex-r" style="padding:1vw;justify-content:space-around;align-items:center;">
                            <input type="number" class="custom-input" placeholder="$ Amount" @bind-value="@TopAmount" @oninput="@(async (ui) => { TopAmount = (string)ui.Value; })" />

                            <PaymentInput @bind-PaidWith="@NewTrans.TopPaidWith" />

                            @if (!string.IsNullOrEmpty(NewTrans.TopPaidWith) && !string.IsNullOrEmpty(NewTrans.TopWhoPaid))
                            {
                                <div style="color:white">@("➡️ " + NewTrans.TopWhoPaid)</div>
                            }
                        </td>
                    </tr>
                    @if (!string.IsNullOrEmpty(NewTrans.TopPaidWith) && string.IsNullOrEmpty(NewTrans.TopWhoPaid))
                    {
                        <tr>
                            <td colspan="3">
                                <FancySelect @bind-Value="NewTrans.TopWhoPaid">
                                    <option value="@string.Empty" disabled selected>--Pick Person--</option>
                                    <option>@Constants.Person1</option>
                                    <option>@Constants.Person2</option>
                                </FancySelect>
                            </td>
                        </tr>
                    }
                    @if (ShowSecond)
                    {
                        <tr>
                            <td class="flex-r" style="padding:1vw;justify-content:space-around;align-items:center;">
                                <input type="number" class="custom-input" placeholder="$ Amount" @bind-value="@BottomAmount" @oninput="@(async (ui) => { BottomAmount = (string)ui.Value; })" />

                                <PaymentInput @bind-PaidWith="@NewTrans.BottomPaidWith" />

                                @if (!string.IsNullOrEmpty(NewTrans.BottomPaidWith) && !string.IsNullOrEmpty(NewTrans.BottomWhoPaid))
                                {
                                    <div style="color:white">@("➡️ " + NewTrans.BottomWhoPaid)</div>
                                }
                            </td>
                        </tr>
                    }
                    @if (!string.IsNullOrEmpty(NewTrans.BottomPaidWith) && string.IsNullOrEmpty(NewTrans.BottomWhoPaid))
                    {
                        <tr>
                            <td colspan="3">
                                <FancySelect @bind-Value="NewTrans.BottomWhoPaid">
                                    <option value="@string.Empty" disabled selected>--Pick Person--</option>
                                    <option>@Constants.Person1</option>
                                    <option>@Constants.Person2</option>
                                </FancySelect>
                            </td>
                        </tr>
                    }
                    <tr>
                        <td colspan="3" style="padding:1vw;">
                            <ExpenseTypeInput @bind-NewExpense=@NewTrans.ExpenseType />
                        </td>
                    </tr>
                    <tr>
                        <td colspan="3" style="padding:1vw">
                            @if (ShowSecond)
                            {
                                <button class="btn btn-danger" @onclick=@(() => ShowSecond = !ShowSecond)>Hide Second Person</button>
                            }
                            else
                            {
                                <button class="btn btn-primary" @onclick=@(() => ShowSecond = !ShowSecond)>Show Second Person</button>
                            }
                        </td>
                    </tr>
                    <tr>
                        <td colspan="3" style="color:cyan;padding:1vw">@("Total: " + Constants.Pretty(NewTrans.TotalAmount))</td>
                    </tr>
                    <tr>
                        <td colspan="3" class="flex-r-100">
                            @if (Disabled)
                            {
                                <LoadingDots />
                            }
                            else
                            {
                                <div class="flex-r-100" style="margin-bottom:.75em">
                                    <button class="btn btn-grad" disabled=@Disabled @onclick="@(() => Add())" style="box-shadow: none;">Add</button>
                                </div>
                            }
                        </td>
                    </tr>
                }
            </table>
        </EditForm>
    </div>
</div>

@code {
    private bool Mobile => Constants.Mobile;
    private string TextColor => @Constants.ColorScheme["Text"];

    private string topAmount = "";
    public string TopAmount
    {
        get { return topAmount; }
        set
        {
            if (topAmount == value)
                return;

            topAmount = value;
            NewTrans.TopAmount = double.TryParse(TopAmount, out double toss1) ? toss1 : 0;
        }
    }
    private string bottomAmount = "";
    public string BottomAmount
    {
        get { return bottomAmount; }
        set
        {
            if (bottomAmount == value)
                return;

            bottomAmount = value;
            NewTrans.BottomAmount = double.TryParse(BottomAmount, out double toss2) ? toss2 : 0;
        }
    }

    [Parameter]
    public bool Added { get; set; }

    private bool disabled;
    [Parameter]
    public bool Disabled
    {
        get { return disabled; }
        set
        {
            if (disabled == value) return;
            disabled = value;

            if (!disabled && string.IsNullOrEmpty(ErrorMsg))
                NewTrans = new NewTransaction();
            DisabledChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> DisabledChanged { get; set; }

    private NewTransaction newTrans { get; set; }
    [Parameter]
    public NewTransaction NewTrans
    {
        get { return newTrans; }
        set
        {
            if (newTrans == value) return;
            newTrans = value;

            NewTransChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<NewTransaction> NewTransChanged { get; set; }

    [Parameter]
    public EventCallback<NewTransaction> OnAddConfirm { get; set; }

    private string BorderRadius = "12px";
    private bool showSecond;
    private bool ShowSecond
    {
        get { return showSecond; }
        set
        {
            showSecond = value;
            if (!value)
            {
                NewTrans.BottomAmount = 0;
                NewTrans.BottomPaidWith = "";
                NewTrans.BottomWhoPaid = "";
            }
        }
    }
    private string ErrorMsg;
    private string ErrorMsgColor = "red";

    protected override Task OnInitializedAsync()
    {
        NewTrans = new NewTransaction();
        return base.OnInitializedAsync();
    }

    private async Task Add()
    {
        Disabled = true;
        await Task.Delay(100);
        StateHasChanged();

        ErrorMsg = "";
        ErrorMsgColor = "red";

        if (string.IsNullOrEmpty(NewTrans.Name)) ErrorMsg += "You must enter a Name. ";
        if (string.IsNullOrEmpty(NewTrans.ExpenseType)) ErrorMsg += "You must enter an Expense Type. ";
        if (NewTrans.TopAmount == 0) ErrorMsg += "You must enter an Amount. ";
        if (string.IsNullOrEmpty(NewTrans.TopPaidWith)) ErrorMsg += "You must enter how you paid. ";
        if (string.IsNullOrEmpty(NewTrans.TopWhoPaid)) ErrorMsg += "You must enter who paid. ";

        if (!string.IsNullOrEmpty(NewTrans.TopWhoPaid) && NewTrans.TopWhoPaid == NewTrans.BottomWhoPaid) ErrorMsg += "Multiple payments for 1 person not yet supported. ";

        if (NewTrans.BottomAmount == 0 && !string.IsNullOrEmpty(NewTrans.BottomPaidWith)
                && !string.IsNullOrEmpty(NewTrans.BottomWhoPaid))
            ErrorMsg += $"Must enter bottom option's payment amount. ";

        if (NewTrans.BottomAmount != 0 && string.IsNullOrEmpty(NewTrans.BottomPaidWith))
            ErrorMsg += $"Must enter bottom option's payment method. ";

        if (NewTrans.BottomAmount != 0 && string.IsNullOrEmpty(NewTrans.BottomWhoPaid))
            ErrorMsg += $"Must enter who paid for the bottom option. ";


        if (string.IsNullOrEmpty(ErrorMsg))
        {
            if (NewTrans.TopWhoPaid == Constants.Person2)
            {
                if (NewTrans.BottomWhoPaid == Constants.Person1)
                {
                    var tempAmount = NewTrans.TopAmount;
                    NewTrans.TopAmount = NewTrans.BottomAmount;
                    NewTrans.BottomAmount = tempAmount;

                    var tempWith = "" + NewTrans.TopPaidWith;
                    NewTrans.TopPaidWith = NewTrans.BottomPaidWith;
                    NewTrans.BottomPaidWith = tempWith;
                }
                else
                {
                    NewTrans.BottomWhoPaid = Constants.Person2;
                    NewTrans.BottomPaidWith = NewTrans.TopPaidWith;
                    NewTrans.BottomAmount = NewTrans.TopAmount;

                    NewTrans.TopWhoPaid = "";
                    NewTrans.TopPaidWith = "";
                }
            }
            else if (NewTrans.BottomPaidWith == Constants.Person1)
            {
                NewTrans.TopWhoPaid = Constants.Person1;
                NewTrans.TopPaidWith = NewTrans.BottomPaidWith;
                NewTrans.TopAmount = NewTrans.BottomAmount;

                NewTrans.BottomPaidWith = "";
                NewTrans.BottomWhoPaid = "";
            }

            if (Math.Abs(DateTime.Now.Subtract(NewTrans.DateOfTransaction).TotalMinutes) < 3)
            {
                var hourOffset = DateTimeOffset.Now.Offset.TotalHours;
                NewTrans.DateOfTransaction = NewTrans.DateOfTransaction.AddHours(hourOffset);
            }

            await OnAddConfirm.InvokeAsync(NewTrans);
            TopAmount = "";
            BottomAmount = "";
            ShowSecond = false;
        }
        else
            Disabled = false;
    }
}
