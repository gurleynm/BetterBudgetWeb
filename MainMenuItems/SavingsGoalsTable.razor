@using BetterBudgetWeb.Data
@if (Mobile)
{
    <div style="width:100%; margin-right:2vw;">
        <table>
            <tr>
                <th colspan="2" style="font-size:3vw;background-color:dodgerblue;color:white"><i>Savings Goals</i></th>
            </tr>
            @foreach (var sg in ThisMonthSavingsGoals)
            {
                <tr>
                    <td style="font-size:3vw;padding:.5vw 0;">@sg.Person</td>
                    <td style="font-size:3vw;">@Constants.Pretty(sg.Goal)</td>
                </tr>
            }
            <tr>
                <td style="font-size:3vw;" colspan="2">=</td>
            </tr>
            <tr>
                <td style="font-size:3vw;"><strong>Total</strong></td>
                <td style="font-size:3vw;">@Constants.Pretty(Constants.SavingsGoals.Sum(s => s.Goal))</td>
            </tr>
        </table>
    </div>
}
else
{
    <div style="width:100%; margin-right:2vw; margin-top:2vh;">
        <table>
            <tr>
                <th colspan="2" style="background-color:dodgerblue;color:white"><i>Savings Goals</i></th>
            </tr>
            @foreach (var sg in ThisMonthSavingsGoals)
            {
                <tr>
                    <td style="padding:.5vw 0;">@sg.Person</td>
                    <td>@Constants.Pretty(sg.Goal)</td>
                </tr>
            }
            <tr>
                <td colspan="2">=</td>
            </tr>
            <tr>
                <td><strong>Total</strong></td>
                <td>@Constants.Pretty(Constants.SavingsGoals.Sum(s => s.Goal))</td>
            </tr>
        </table>
    </div>
}

@code {
    [Parameter]
    public bool Mobile { get; set; }

    private List<SavingsGoal> ThisMonthSavingsGoals { get; set; } = new List<SavingsGoal>();

    protected override Task OnInitializedAsync()
    {
        SavingsGoal Default1 = Constants.SavingsGoals.FirstOrDefault(sg => sg.Person.Contains(Constants.Person1) && sg.Month == "All");
        SavingsGoal Default2 = Constants.SavingsGoals.FirstOrDefault(sg => sg.Person.Contains(Constants.Person2) && sg.Month == "All");

        SavingsGoal ThisMonthPerson1 = Constants.SavingsGoals.FirstOrDefault(sg => sg.Person == Constants.Person1 && sg.MonthYear() == Constants.MonthYear());
        SavingsGoal ThisMonthPerson2 = Constants.SavingsGoals.FirstOrDefault(sg => sg.Person == Constants.Person2 && sg.MonthYear() == Constants.MonthYear());

        if (ThisMonthPerson1 == null)
            ThisMonthSavingsGoals.Add(Default1);
        else
            ThisMonthSavingsGoals.Add(ThisMonthPerson1);

        if (ThisMonthPerson2 == null)
            ThisMonthSavingsGoals.Add(Default2);
        else
            ThisMonthSavingsGoals.Add(ThisMonthPerson2);


        return base.OnInitializedAsync();
    }
}
