@using BetterBudgetWeb.Data;
@using BetterBudgetWeb.Repo;
@using BetterBudgetWeb.Runner;
@using BetterBudgetWeb.Shared.Balances
@inject IJSRuntime JSRuntime
@implements IDisposable

<table style="width:100%;margin-bottom:1vh">
    <tr style="height:3vw">
        <th style="background-color: @Constants.ColorScheme["TableOdd"];padding:0 1vw;font-size: @(Constants.Mobile ? "3vw;" : "1vw");" colspan="100%">
            <span>@Title</span>
            @if (!string.IsNullOrEmpty(TheBalance))
            {
                <span>@(" for " + TheBalance)</span>
            }
        </th>
    </tr>
    @if (FilteredTransactions != null)
    {
        string PrevMonth = "";
        @foreach (var transaction in FilteredTransactions)
        {
            @if (PrevMonth != @transaction.DateOfTransaction.ToString("dd MMM"))
            {
                PrevMonth = transaction.DateOfTransaction.ToString("dd MMM");
                <tr style="border:1px black solid;background-color: @Constants.ColorScheme["TableEven"];">
                    <td colspan="100%">
                        <div style="padding-left:1em;text-align:left">@PrevMonth</div>
                    </td>
                </tr>
            }
            <tr style="border:1px black solid;background-color: @Constants.ColorScheme["TableOdd"];">
                <td class="flex-r" style="justify-content:start;font-size: @(Constants.Mobile ? "3vw;" : "1vw");border:none">
                    <div class="flex-c" style="justify-content:space-between;align-items:start;padding:1em">
                        <div style="color:white;text-align:start">
                            @transaction.Name
                        </div>
                        <div style="text-align:start;color:@Constants.ColorScheme["Text"]">
                            @transaction.ExpenseType
                        </div>
                    </div>
                </td>
                @if (transaction.Person1Amount == transaction.TotalAmount)
                {
                    <td style="height:100%;font-size: @(Constants.Mobile ? "3vw;" : "1vw");border:none">
                        <div class="@(TranColor(transaction.ExpenseType, transaction.Person1Amount))">@Pretty(transaction.Person1Amount)</div>
                    </td>
                    @if (ShowPerson)
                    {
                        <td style="height:100%;font-size: @(Constants.Mobile ? "3vw;" : "1vw");border:none">
                            <div>@(Constants.Person1 + " (" + transaction.PaidWithPerson1 + ")")</div>
                        </td>
                    }
                }
                else if (transaction.Person2Amount == transaction.TotalAmount)
                {
                    <td style="height:100%;font-size: @(Constants.Mobile ? "3vw;" : "1vw");border:none">
                        <div class="@(TranColor(transaction.ExpenseType, transaction.Person2Amount))">@Pretty(transaction.Person2Amount)</div>
                    </td>
                    @if (ShowPerson)
                    {
                        <td style="height:100%;font-size: @(Constants.Mobile ? "3vw;" : "1vw");border:none">
                            <div>@(Constants.Person2 + " (" + transaction.PaidWithPerson2 + ")")</div>
                        </td>
                    }
                }
                else
                {
                    <td style="height:100%;font-size: @(Constants.Mobile ? "3vw;" : "1vw");border:none">
                        <div class="@(TranColor(transaction.ExpenseType, transaction.Person1Amount))">@Pretty(transaction.Person1Amount)</div>
                        <br />
                        <div class="@(TranColor(transaction.ExpenseType, transaction.Person2Amount))">@Pretty(transaction.Person2Amount)</div>
                    </td>
                    @if (ShowPerson)
                    {
                        <td style="height:100%;font-size: @(Constants.Mobile ? "3vw;" : "1vw");border:none">
                            <div>@(Constants.Person1 + " (" + transaction.PaidWithPerson1 + ")")</div>
                            <br />
                            <div>@(Constants.Person2 + " (" + transaction.PaidWithPerson2 + ")")</div>
                        </td>
                    }
                }
                <td style="height:100%;font-size: @(Constants.Mobile ? "3vw;" : "1vw");border:none">
                    <div class="flex-r" style="font-size: @(Constants.Mobile ? "3vw;" : "1vw");">
                        @if (!(transaction.ExpenseType == "Debt" || transaction.ExpenseType == "Transfer"))
                        {
                            <button class="btn btn-secondary" disabled=@Disabled style="background-color:transparent;margin:.5vh;height:5vh;" @onclick="(() => OpenModal(transaction))"><span class="oi oi-pencil"></span></button>
                        }
                        <button class="btn" disabled=@Disabled style="background-color:transparent;color:red;border:none;margin:.5vh;height:5vh;" @onclick="(() => ShowDeleteBtn(transaction))"><span class="bi bi-trash" style="color:red"></span></button>
                    </div>
                </td>
            </tr>
        }
    }
</table>

@if (ShowModal)
{
    <EditorModalDialog Title="@(string.Format("{0} (By: {1})","Test", "Deez Nuts"))"
                       Text="Story"
                       Transact="@SelectedTransaction"
                       OnClose="@CloseModal">

    </EditorModalDialog>
}
@if (ShowDelete)
{
    <Confirmation OnClose="@Delete" LeftBtnTxt="Cancel" LeftBtnColor="btn-secondary" RightBtnColor="btn-danger">
        <span>
            Do you want to delete this <strong>@SelectedTransaction.Name</strong> transaction?
        </span>
    </Confirmation>
}
@code {
    [CascadingParameter]
    public BalanceTray GlobalBT { get; set; }

    [Parameter]
    public string Title { get; set; } = "Transactions";

    [Parameter]
    public EventCallback<bool> OnDeleteConfirm { get; set; }

    [Parameter]
    public EventCallback<bool> OnEditConfirm { get; set; }

    [Parameter]
    public string ExpenseType { get; set; }

    [Parameter]
    public bool ShowPerson { get; set; } = true;

    [Parameter]
    public EventCallback RefreshParent { get; set; }

    public List<Transaction> FilteredTransactions { get; set; }

    [Parameter]
    public string TheBalance
    {
        get { return theBalance; }
        set
        {
            if (theBalance == value)
                return;
            theBalance = value;

            FilteredTransactions = GetTransactions();
        }
    }
    public string theBalance { get; set; }

    private bool Show { get; set; }
    private bool Disabled { get; set; }
    private bool ShowModal { get; set; }
    private bool ShowDelete { get; set; }

    private Transaction SelectedTransaction;

    protected override Task OnInitializedAsync()
    {
        FilteredTransactions = GetTransactions();

        Constants.TransactionsChanged += TransactionsUpdated;
        return base.OnInitializedAsync();
    }

    private string TranColor(string et, double amount)
    {
        return IndexRunner.TranColor(et, amount);
    }

    private string Pretty(double num)
    {
        return Constants.Pretty(num);
    }

    private async void ShowDeleteBtn(Transaction t)
    {
        SelectedTransaction = t;
        ShowDelete = true;
        await JSRuntime.InvokeAsync<bool>("TurnOffScroll");
    }
    private async void CloseModal(bool accepted)
    {
        ShowModal = false;

        if (accepted)
        {
            await OnEditConfirm.InvokeAsync(accepted);
            await RefreshParent.InvokeAsync();
            StateHasChanged();
        }
        await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
    }
    private async void OpenModal(Transaction trans)
    {
        SelectedTransaction = new Transaction(trans);
        ShowModal = true;
        await JSRuntime.InvokeAsync<bool>("TurnOffScroll");
        StateHasChanged();
    }
    private async void Delete(bool accepted)
    {
        if (accepted)
        {
            // TransactionRepo sets everything in Constants
            await TransactionRepo.RemoveAsync(SelectedTransaction.Id);
            if (!Constants.Mobile)
                GlobalBT.RefreshBalances();
            await RefreshParent.InvokeAsync();
            await OnDeleteConfirm.InvokeAsync(accepted);
        }
        ShowDelete = false;
        await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
        StateHasChanged();
    }
    private List<Transaction> GetTransactions()
    {
        List<Transaction> transactions = Constants.catchAll.Transactions.Where(t => t.MonthYear() == Constants.MonthYear()).ToList();

        if (!string.IsNullOrEmpty(ExpenseType))
        {
            transactions = transactions.Where(t => t.ExpenseType == ExpenseType).ToList();
        }
        else if (!string.IsNullOrEmpty(TheBalance))
        {
            transactions = transactions.Where(tr =>
                            (tr.PaidWithPerson1 + " " + tr.PaidWithPerson2).Contains(TheBalance)).ToList();
        }

        transactions = transactions.OrderByDescending(t => t.DateOfTransaction).ToList();
        return transactions;
    }

    public void RefreshMe()
    {
        StateHasChanged();
    }

    private void TransactionsUpdated(object sender, List<Transaction> e)
    {
        FilteredTransactions = GetTransactions();
        StateHasChanged();
    }

    public void Dispose()
    {
        Constants.TransactionsChanged -= TransactionsUpdated;
    }
}