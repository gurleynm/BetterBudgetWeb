@using BetterBudgetWeb.Data;
@using BetterBudgetWeb.Repo;
@using BetterBudgetWeb.Runner;
@inject IJSRuntime JSRuntime

<table class="" style="width:@(Constants.Mobile && TheBalance != null ? "90%" :"100%");margin-bottom:1vh">
    <tr style="height:3vw">
        <th style="padding:0 1vw;font-size: @(Constants.Mobile ? "3vw;" : "1vw");" colspan="100%">
            <span>@Title</span>
        </th>
    </tr>
    @if (FilteredTransactions != null)
    {
        @foreach (var transaction in FilteredTransactions)
        {
            <tr style="border:1px black solid">
                <td style="margin:1vh 0 1vh 0;padding-left:1vw;width:2vw;font-size: @(Constants.Mobile ? "3vw;" : "1vw");border:none">
                    <DateBlock TheDate=transaction.DateOfTransaction />
                    @transaction.Name
                    <br />
                    @("(" + transaction.ExpenseType + ")")
                    <br />
                    <br />
                    @if (!All)
                    {
                        <div style="display:flex;justify-content:center;font-size: @(Constants.Mobile ? "3vw;" : "1vw");">
                            @if (!(transaction.ExpenseType == "Debt" || transaction.ExpenseType == "Transfer"))
                            {
                                <button class="btn btn-secondary" disabled=@Disabled style="margin:.5vh;height:5vh;" @onclick="(() => OpenModal(transaction))"><span class="oi oi-pencil"></span></button>
                            }
                            <button class="btn btn-danger" disabled=@Disabled style="margin:.5vh;height:5vh;" @onclick="(() => ShowDeleteBtn(transaction))"><span class="oi oi-x"></span></button>
                        </div>
                    }
                </td>
                @if (transaction.Person1Amount == transaction.TotalAmount)
                {
                    <td style="height:100%;font-size: @(Constants.Mobile ? "3vw;" : "1vw");border:none">
                        <span class="@(TranColor(transaction.ExpenseType, transaction.Person1Amount))">@Pretty(transaction.Person1Amount)</span>
                    </td>
                    if (ShowPerson)
                    {
                        <td style="padding:1vh;font-size: @(Constants.Mobile ? "3vw;" : "1vw");border:none">
                            <span>@("- " + Constants.Person1)</span>
                            @if (!string.IsNullOrEmpty(ExpenseType))
                            {
                                <br/>
                                <span>@("(" + transaction.PaidWithPerson1 + ")")</span>
                            }
                        </td>
                    }
                    else
                    {
                        <td></td>
                    }
                }
                else if (transaction.Person2Amount == transaction.TotalAmount)
                {
                    <td style="height:100%;font-size: @(Constants.Mobile ? "3vw;" : "1vw");border:none">
                        <span class="@(TranColor(transaction.ExpenseType, transaction.Person2Amount))">@Pretty(transaction.Person2Amount)</span>
                    </td>
                    @if (ShowPerson)
                    {
                        <td style="padding:1vh;font-size: @(Constants.Mobile ? "3vw;" : "1vw");border:none">
                            <span>@("- " + Constants.Person2)</span>
                            @if (!string.IsNullOrEmpty(ExpenseType)) {
                                <br />
                                <span>@("(" + transaction.PaidWithPerson2 + ")")</span>
                            }
                        </td>
                    }
                    else
                    {
                        <td></td>
                    }
                }
                else
                {
                    <td style="height:100%;font-size: @(Constants.Mobile ? "3vw;" : "1vw");border:none">
                        <span class="@(TranColor(transaction.ExpenseType, transaction.Person1Amount))">@Pretty(transaction.Person1Amount)</span>
                        <br />
                        <span class="@(TranColor(transaction.ExpenseType, transaction.Person2Amount))">@Pretty(transaction.Person2Amount)</span>
                        <br />
                        <hr />
                        <span>@Pretty(transaction.TotalAmount)</span>
                    </td>
                    <td style="padding:1vh;font-size: @(Constants.Mobile ? "3vw;" : "1vw");border:none">
                        <span>@("- " + Constants.Person1)</span>
                        <br />
                        <span>@("- " + Constants.Person2)</span>
                        <br />
                        <hr />
                        <span>@("- Total")</span>
                    </td>
                }
                @if (All)
                {
                    <td style="height:100%;font-size: @(Constants.Mobile ? "3vw;" : "1vw");border:none">
                        <div style="display:flex;justify-content:center;font-size: @(Constants.Mobile ? "3vw;" : "1vw");">
                            @if (!(transaction.ExpenseType == "Debt" || transaction.ExpenseType == "Transfer"))
                            {
                                <button class="btn btn-secondary" disabled=@Disabled style="margin:.5vh;height:5vh;" @onclick="(() => OpenModal(transaction))"><span class="oi oi-pencil"></span></button>
                            }
                            <button class="btn btn-danger" disabled=@Disabled style="margin:.5vh;height:5vh;" @onclick="(() => ShowDeleteBtn(transaction))"><span class="oi oi-x"></span></button>
                        </div>
                    </td>
                }
            </tr>
        }
    }
</table>

@if (ShowModal)
{
    <EditorModalDialog Title="@(string.Format("{0} (By: {1})","Test", "Deez Nuts"))"
                       Text="Story"
                       Transact="@SelectedTransaction"
                       OnClose="@CloseModal">

    </EditorModalDialog>
}
@if (ShowDelete)
{
     <Confirmation OnClose="@Delete" LeftBtnTxt="Cancel" LeftBtnColor="btn-secondary" RightBtnColor="btn-danger">
        <span>
                Do you want to delete this <strong>@SelectedTransaction.Name</strong> transaction?
        </span>
    </Confirmation>
}
@code {
    [Parameter]
    public string Title { get; set; } = "Transactions";

    [Parameter]
    public EventCallback<bool> OnDeleteConfirm { get; set; }

    [Parameter]
    public EventCallback<bool> OnEditConfirm { get; set; }

    [Parameter]
    public Balance TheBalance { get; set; }

    [Parameter]
    public string ExpenseType { get; set; }

    [Parameter]
    public bool All { get; set; }

    [Parameter]
    public EventCallback RefreshParent { get; set; }

    public bool ShowPerson => (TheBalance != null && TheBalance.Person == "Joint") || !string.IsNullOrEmpty(ExpenseType) || All;

    private List<Transaction> FilteredTransactions => GetTransactions();

    private bool Show { get; set; }
    private bool Disabled { get; set; }
    private bool ShowModal { get; set; }
    private bool ShowDelete { get; set; }

    private Transaction SelectedTransaction;

    private string TranColor(string et, double amount)
    {
        return IndexRunner.TranColor(et, amount);
    }

    private string Pretty(double num)
    {
        return Constants.Pretty(num);
    }

    private bool ThisBalance(Transaction t)
    {
        return t.PaidWithPerson1 == TheBalance.Name ||
                t.PaidWithPerson2 == TheBalance.Name ||
                t.PaidOffPerson1 == TheBalance.Name ||
                t.PaidOffPerson2 == TheBalance.Name;
    }
    private async void ShowDeleteBtn(Transaction t)
    {
        SelectedTransaction = t;
        ShowDelete = true;
        await JSRuntime.InvokeAsync<bool>("TurnOffScroll");
    }
    private async void CloseModal(bool accepted)
    {
        ShowModal = false;
        await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
        if (accepted)
        {
            await OnEditConfirm.InvokeAsync(accepted);
            await RefreshParent.InvokeAsync();
            StateHasChanged();
        }
    }
    private async void OpenModal(Transaction trans)
    {
        SelectedTransaction = new Transaction(trans);
        ShowModal = true;
        await JSRuntime.InvokeAsync<bool>("TurnOffScroll");
        StateHasChanged();
    }
    private async void Delete(bool accepted)
    {
        await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
        if (accepted)
        {
            // TransactionRepo sets everything in Constants
            await TransactionRepo.RemoveAsync(SelectedTransaction.Id);
            await RefreshParent.InvokeAsync();
            await OnDeleteConfirm.InvokeAsync(accepted);
        }
        ShowDelete = false;
        StateHasChanged();
    }
    private List<Transaction> GetTransactions()
    {
        List<Transaction> transactions = Constants.catchAll.Transactions.Where(t => t.MonthYear() == Constants.MonthYear()).ToList();

        if (!string.IsNullOrEmpty(ExpenseType))
        {
            transactions = transactions.Where(t => t.ExpenseType == ExpenseType).ToList();
        }
        else if (TheBalance != null)
        {
            transactions = transactions.Where(t => ThisBalance(t)).ToList();
        }

        transactions = transactions.OrderByDescending(t => t.DateOfTransaction).ToList();
        return transactions;
    }

    public void RefreshMe()
    {
        StateHasChanged();
    }
}