<tr class="text-color" style="background-color:transparent;width:100%;">
    <td class="chart-bar-hor__label" style="border:none;width:100%;text-align:start;cursor:pointer">
        <span class="text-color">@Label</span>
    </td>
    <td colspan="2" class="chart-bar-hor__inner" style="@BackgroundColorAdjusted">
        @if (Negative)
        {
            <div class="chart-bar-hor__fill-bad"
                 style="width:@BarFillWidth"></div>
        }
        else
        {
            <div class="chart-bar-hor__fill"
                 style="@FillColorAdjusted;width:@BarFillWidth;"></div>
        }
    </td>
    <td class="chart-bar-hor__label" style="border:none;width:100%">
        @if (Negative)
        {
            <span style="color:red;">@(Constants.Pretty(Value) + "/" + Constants.Pretty(MaxValue).Trim('$'))</span>
        }
        else
        {
            <span style="color:@Constants.ColorScheme["IncomeGood"]">@(Constants.Pretty(Value) + "/" + Constants.Pretty(MaxValue).Trim('$'))</span>
        }
    </td>
</tr>

@code {
    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public bool Negative { get; set; }
    [Parameter]
    public string FillColor { get; set; }
    [Parameter]
    public string BackgroundColor { get; set; }

    private string FillColorAdjusted => string.IsNullOrEmpty(FillColor) ? "" : "background-color:" + FillColor;
    private string BackgroundColorAdjusted => string.IsNullOrEmpty(BackgroundColor) ? "" : "background-color:" + BackgroundColor;

    public double val = 0;
    public double maxVal = 0;

    [Parameter]
    public double Value
    {
        get { return val; }
        set
        {
            val = value;

            if (MaxValue > 0)
            {
                BarFillWidth = (100-Math.Round((val / MaxValue) * 100)) + "%";
                StateHasChanged();
            }
        }
    }

    [Parameter]
    public double MaxValue
    {
        get { return maxVal; }
        set
        {
            maxVal = value;

            if (maxVal > 0)
            {
                BarFillWidth = (100 - Math.Round((val / MaxValue) * 100)) + "%";
                StateHasChanged();
            }
        }
    }

    public string BarFillWidth { get; set; } = "0%";

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }
}
