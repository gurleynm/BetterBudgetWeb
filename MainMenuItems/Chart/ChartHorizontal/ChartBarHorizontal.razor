<div class="text-color flex-c" style="background-color:transparent;width:100%;">
    <div class="chart-bar-hor__label flex-r" style="justify-content:start;border:none;width:100%;text-align:start;cursor:pointer" @onclick=OnClick>
        <span class="text-color">@Label</span>
    </div>
    <div class="chart-bar-hor__inner flex-r" style="@BackgroundColorAdjusted;justify-content:start;cursor:pointer" @onclick=OnClick>
        @if (Negative)
        {
            <div class="chart-bar-hor__fill-bad"
                 style="width:@BarFillWidth"></div>
        }
        else
        {
            <div class="chart-bar-hor__fill"
                 style="@FillColorAdjusted;width:@BarFillWidth"></div>
        }
    </div>
    <div class="chart-bar-hor__label flex-c" style="border:none;width:100%;">
        @if (Negative)
        {
            <span @onclick=OnClick style="color:red;cursor:pointer">@(Constants.Pretty(Value) + "/" + Constants.Pretty(MaxValue).Trim('$'))</span>
        }
        else
        {
            <span @onclick=OnClick style="cursor:pointer;color:@Constants.ColorScheme["IncomeGood"]">@(Constants.Pretty(Value) + "/" + Constants.Pretty(MaxValue).Trim('$'))</span>
        }

        @if (Show)
        {
            <div class="flex-r" style="flex-wrap:wrap;width:100%">
                <MonthlySpending @ref="Child" ExpenseType=@ST RefreshParent="@RefreshMe" />
                @if (BottomBorder)
                {
                    <hr style="width:100%" />
                }
            </div>
        }
        @if (BottomBorder && !Show)
        {
            <hr style="margin-top:5vh" />
        }
    </div>
</div>

@code {
    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public string SearchTerm { get; set; }
    [Parameter]
    public bool BottomBorder { get; set; }
    [Parameter]
    public bool Negative { get; set; }
    [Parameter]
    public EventCallback<string> DateBarClicked { get; set; }
    [Parameter]
    public string FillColor { get; set; }
    [Parameter]
    public string BackgroundColor { get; set; }

    private string FillColorAdjusted => string.IsNullOrEmpty(FillColor) ? "" : "background-color:" + FillColor;
    private string BackgroundColorAdjusted => string.IsNullOrEmpty(BackgroundColor) ? "" : "background-color:" + BackgroundColor;

    public string ST => string.IsNullOrEmpty(SearchTerm) ? Label : SearchTerm;

    private MonthlySpending Child;
    private bool Show;

    public double val = 0;
    public double maxVal = 0;

    [Parameter]
    public double Value
    {
        get { return val; }
        set
        {
            val = value;

            if (MaxValue > 0)
            {
                BarFillWidth = (100-Math.Round((val / MaxValue) * 100)) + "%";
                StateHasChanged();
            }

            if(Show)
                Child?.RefreshMe();
        }
    }

    [Parameter]
    public double MaxValue
    {
        get { return maxVal; }
        set
        {
            maxVal = value;

            if (maxVal > 0)
            {
                BarFillWidth = (100 - Math.Round((val / MaxValue) * 100)) + "%";
                StateHasChanged();
            }
        }
    }

    public string BarFillWidth { get; set; } = "0%";

    protected override Task OnInitializedAsync()
    {
        var c = Negative;
        return base.OnInitializedAsync();
    }

    private void OnClick()
    {
        Show = !Show;
    }

    private void RefreshMe()
    {
        var curdci = Constants.DynamicCostItems.FirstOrDefault(dci => dci.Name == Label);
        if (curdci != null)
            Value = curdci.Left;
        StateHasChanged();
    }
}
