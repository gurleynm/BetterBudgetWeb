@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Runner
@using BetterBudgetWeb.Shared.General
@using BetterBudgetWeb.Pages.PricingStuff
@using BetterBudgetWeb.Shared.General.Footer
@inject NavigationManager NavMan
@inject IJSRuntime jsRuntime
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<GoogleAnalytic />

<div style="height:fit-content">
    @if (!Constants.Mobile)
    {
        <div id="" class="flex-r"
        style="flex-wrap:wrap;background-color:indigo;justify-content:space-between;width:100%;position:sticky;top:0;padding:0;align-items:center;z-index:10">
            @if (!string.IsNullOrEmpty(Announcement))
            {
                <div class="flex-r-100" style="height:fit-content;background-image:linear-gradient(to right, #B9AFF8,cyan);color:black;font-family:'CBB Default'">
                    @Announcement
                </div>
            }
            <div class="flex-r" style="align-items:center;width:fit-content;justify-content:start;padding:2px 1em;">
                <img src="images/RoundLogo.webp" alt="Logo image" style="width:6.5vw;height:fit-content;padding:2px 1vw;cursor:pointer" @onclick=@(() => NavMan.NavigateTo("")) />
                <div class="flex-c" style="height:50%;">
                    @if (!LoadingDemo)
                    {
                        <button style="background-color:transparent;font-family:'CBB Default';"
                        class="btn-grad"
                        @onclick=GetDemo>
                            View Demo
                        </button>
                    }
                    else
                    {
                        <div class="slide-right" style="width:100%">
                            <div style="font-size:large;color:white;font-family:'CBB Default';padding:1em">Loading Demo...</div>
                        </div>
                    }
                </div>
            </div>

            @if (!LoadingDemo)
            {
                <div class="ps-3 navbar-dark flex-r">
                    <a class="navbar-brand navbtn" href="features" style="font-family:'CBB Default'; text-align:center;cursor:pointer">
                        <span aria-hidden="true"></span> Features
                    </a>
                    <a class="navbar-brand navbtn" href="FAQs" style="font-family:'CBB Default'; text-align:center;cursor:pointer">
                        <span aria-hidden="true"></span> FAQs
                    </a>
                </div>
                <div class="flex-r" style="align-items:center;margin-right:2vw">
                    <a @onclick=@(() => ToggleSign(false)) href="sign/in" style="font-family:'CBB Default';margin-right:1em;font-size:large;color:white">Log in</a>
                    <button class="btn btn-primary" @onclick=@(() => ToggleSign(true)) style="font-size:large;font-family:'CBB Default';color:black;background-color:cyan">@Constants.SignUpText</button>
                </div>
            }

        </div>
    }
    else
    {
        <CascadingValue Value="GrabDemo">
            <CascadingValue Value="SignIsUp">
                <LandingNavMenu />
            </CascadingValue>
        </CascadingValue>
    }
    <div class="flex-r" style="height:fit-content;flex-wrap:wrap;">
        <CascadingValue Value="SignIsUp">
            @ChildContent
        </CascadingValue>
        <CookieBanner />
    </div>
</div>
<Footer />

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public bool signIsUp { get; set; }
    public bool SignIsUp 
    {
        get { return signIsUp; }
        set {
            if (signIsUp == value)
                return;
            signIsUp = value;
            SignIsUpChanged.InvokeAsync(value);
        }
    }
    public EventCallback<bool> SignIsUpChanged { get; set; }

    EventCallback GrabDemo => EventCallback.Factory.Create(this, GetDemo);

    private bool LoadingDemo { get; set; }
    ValueTask<bool> DeviceCheck { get; set; }

    private string Announcement = "";//"Get 25% off your first year with code TOGETHER";

    protected override async Task OnInitializedAsync()
    {
        Constants.Token = "";
        Constants.CUR_USER_NAME = "";
        Constants.TIER_LEVEL = Tier.TRIAL;
        Constants.TIER_STATUS = "active";
        Constants.catchAll = new CatchAll();
        Constants.WeIn = false;

        sessionStorage.SetItemAsync("token", "");
    }

    private void ToggleSign(bool signIsUp)
    {
        SignIsUp = signIsUp;

        if (signIsUp)
            NavMan.NavigateTo("sign/up");
        else
            NavMan.NavigateTo("sign/in");
    }

    private async void GetDemo()
    {
        LoadingDemo = true;
        await Task.Delay(10);
        await CatchAllRunner.GrabDemo();
        Constants.WeIn = true;

        NavMan.NavigateTo("home");

        StateHasChanged();
    }
}
