@page "/"
@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Runner
@inject NavigationManager NavMan
@inject IJSRuntime jsRuntime
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<div style="height:100%">
    <div id="land-top" class="flex-r"
         style="background-color:indigo;justify-content:space-between;width:100%;position:fixed;padding:1em;align-items:center;z-index:1">
        @if (!Constants.Mobile)
        {
            <div>
                <a href="" style="font-size:large;font-family:'CBB Default'; text-align:center; float:left;color:white;">
                    <strong>Couple's Better Budget</strong>
                </a>
            </div>

            <div class="flex-c" style="height:50%;">
                @if (!LoadingDemo)
                {
                    <button style="background-color:transparent;font-family:'CBB Default';"
                            class="btn-grad"
                            @onclick=GrabDemo>
                        View Demo
                    </button>
                }
                else
                {
                    <div style="font-size:large;color:white;font-family:'CBB Default'">Loading Demo...</div>
                }
            </div>
            @if (!LoadingDemo)
            {
                <div class="flex-r" style="align-items:center">
                    <a href="sign/in" style="font-family:'CBB Default';margin-right:1em;font-size:large;color:white">Log in</a>
                    <button class="btn btn-primary" @onclick=@(() => NavMan.NavigateTo("sign/up")) style="font-size:large;font-family:'CBB Default';color:black;background-color:cyan">Start 45-Day Trial</button>
                </div>
            }
        }
        else
        {
            <a href="sign/in" style="font-family:'CBB Default';margin-right:1em;font-size:large;color:white">Log in</a>
            <button class="btn btn-primary" @onclick=@(() => NavMan.NavigateTo("sign/up")) style="font-size:large;font-family:'CBB Default';color:black;background-color:cyan">Start 45-Day Trial</button>
        }
    </div>
    <div class="flex-r" style="height:fit-content;margin-top:@HeightTopBar;">
        @if (!Constants.Mobile)
        {
            <div class="slide-right flex-c" style="height:100%">
                <h1 style="font-size:8em;font-family:'CBB Default';">Helping you reach your goals together</h1>
            </div>
        }
        <div class="flex-c-start slide-up" style="height:100%;padding:1em;width:@(Constants.Mobile ? "100%" : "50%")">
            <div class="flex-r">
                <img src="/images/RoundLogo.png" style="width:50%;" />
            </div>
            <div class="flex-c-start" style="align-items:center">
                <span style="font-family:'CBB Default';font-size:xx-large;text-align:center">Start your commitment-free trial today</span>
                @if (Constants.Mobile)
                {
                    @if (!LoadingDemo)
                    {
                        <button style="background-color:transparent;padding:1em;font-family:'CBB Default';"
                                class="btn-grad"
                                @onclick=GrabDemo>
                            View Demo
                        </button>
                    }
                    else
                    {
                        <div style="font-size:large;color:white;font-family:'CBB Default'">Loading Demo...</div>
                    }
                }
                else
                {
                    <button class="btn btn-primary" @onclick=@(() => NavMan.NavigateTo("sign/up")) style="width:90%;font-size:large;font-family:'CBB Default';color:black;background-color:cyan">Start 45-Day Trial</button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private double heightTopBar = 8;
    private string HeightTopBar => heightTopBar + "px";

    private bool LoadingDemo { get; set; }
    private Task GrabDemoTask;

    protected override async Task OnInitializedAsync()
    {
        await sessionStorage.SetItemAsync("token", "");
        Constants.Token = "";
        Constants.CUR_USER_NAME = "";
        Constants.TIER_LEVEL = Tier.TRIAL;
        Constants.TIER_STATUS = "active";
        Constants.catchAll = new CatchAll();
        Constants.WeIn = false;
        try
        {
            Constants.Mobile = await jsRuntime.InvokeAsync<bool>("isDevice");
        }
        catch (Exception e)
        {
            Constants.Mobile = false;
        }

        GrabDemoTask = CatchAllRunner.GrabDemo();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        heightTopBar = Convert.ToDouble(await jsRuntime.InvokeAsync<string>("ElementHeight", "land-top"));
    }

    private async void GrabDemo()
    {
        LoadingDemo = true;
        await Task.Delay(10);
        await GrabDemoTask;
        Constants.WeIn = true;

        NavMan.NavigateTo("home");

        StateHasChanged();
    }
}
