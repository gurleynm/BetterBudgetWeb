@page "/forecast"
@using BetterBudgetWeb.Data
@using BetterBudgetWeb.MainMenuItems
@using BetterBudgetWeb.MainMenuItems.Chart
@using BetterBudgetWeb.Repo
@using BetterBudgetWeb.Runner
@using BetterBudgetWeb.MonthView
@using System.Data;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavMan

<style>
    button {
        color: black;
    }

    th {
        padding: 1em;
    }
</style>

<GoogleAnalytic />

<PageTitle>Forecast</PageTitle>

@if (Constants.Mobile)
{
    <div class="flex-r-100">
        <MyLineChart Plots="Plots" Height=300 />
    </div>
}
else
{
    <MyLineChart Plots="Plots" />
}
<div class="flex-r-100 nobar" style="overflow-x:auto;justify-content:flex-start">
    @foreach (var mr in MonthRels)
    {
        <div class="@(mr.Show ? "month-rel-selected" : "month-rel")" @onclick=@(() => SetMR(mr))>
            <h4>@mr.Name</h4>
        </div>
    }
</div>
<div class="flex-c-start">
    @foreach (var mr in MonthRels)
    {
        @if (mr.Show)
        {
            <div class="flex-r" style="justify-content:space-between;width:100%">
                <h2 style="text-align:center">
                    @{
                        double p1nw = GetNetWorthOf(mr, Constants.Person1);
                        <span>@($"Projected {Constants.Person1}'s Net Worth:")</span> <span style="color:@Constants.GoodOrBad(p1nw)">@(Constants.Pretty(p1nw))</span>
                    }
                </h2>
                <h2 style="text-align:center">
                    @{
                        double p2nw = GetNetWorthOf(mr, Constants.Person2);
                        <span>@($"Projected {Constants.Person2}'s Net Worth:")</span> <span style="color:@Constants.GoodOrBad(p2nw)">@(Constants.Pretty(p2nw))</span>
                    }
                </h2>
            </div>

            <MonthView MR=mr @bind-Person1Overflow=mr.ProjectPerson1Income
                       @bind-Person2Overflow=mr.ProjectPerson2Income />
        }
    }
</div>

<br />
<br />

@code {
    private List<LinePlot> Plots = new List<LinePlot>();
    private static int TotalNumMonths = 6;

    private List<MonthRelations> MonthRels = new List<MonthRelations>();

    private string ErrorMsg = string.Empty;

    bool CompareYM(int mym, int mrym)
    {
        return mym <= mrym;
    }


    protected override async Task OnInitializedAsync()
    {

        Constants.CurPage = "Forecast";
        if (Constants.TIER_LEVEL <= Tier.BASIC_TIER)
            NavMan.NavigateTo("home");

        InitMonths();

        if (MonthRels?.Count > 0)
            MonthRels[0].Show = true;

        Plots = MonthViewConstants.GetPlots();
        StateHasChanged();
    }

    private void InitMonths()
    {
        MonthRels.Clear();

        DateTime nextOne;
        for (int cnt = 0; cnt < TotalNumMonths; cnt++)
        {
            List<ExpenseAmount> Expenses = new List<ExpenseAmount>();
            nextOne = DateTime.Today.AddMonths(cnt + 1);

            MonthViewConstants.SetMonthlies(nextOne.Month, nextOne.Year);

            foreach (var dcin in MonthViewConstants.DynamicCostItems)
                Expenses.Add(new ExpenseAmount(dcin.Name, dcin.TotalAmount));

            foreach (var stat in MonthViewConstants.StaticMonthlyCosts)
                Expenses.Add(new ExpenseAmount(stat.Name, stat.TotalAmount));

            var temp = new MonthRelations(nextOne.Month, nextOne.Year, Expenses);
            temp.ProjectPerson1Income = Expenses.Sum(ex => ex.Amount) / 2;
            temp.ProjectPerson2Income = Expenses.Sum(ex => ex.Amount) / 2;

            MonthRels.Add(temp);
        }
    }

    private double GetNetWorthOf(MonthRelations monthRelations, string person)
    {
        double nw = IndexRunner.CalculateNetWorth(person);
        foreach (var monthRel in MonthRels)
        {
            if (monthRel.YearMonth <= monthRelations.YearMonth)
            {
                if (person == Constants.Person1)
                {
                    if (monthRel.ProjectPerson1Income == int.MinValue)
                        nw += monthRelations.ProjectPerson1Income;
                    else
                        nw += monthRel.ProjectPerson1Income;
                }
                else
                {
                    if (monthRel.ProjectPerson2Income == int.MinValue)
                        nw += monthRelations.ProjectPerson2Income;
                    else
                        nw += monthRel.ProjectPerson2Income;
                }
            }
        }

        return nw;
    }

    private void SetMR(MonthRelations monthRelations)
    {
        foreach (var m in MonthRels)
        {
            m.Show = monthRelations.Name == m.Name;
            if (m.Show)
                MonthViewConstants.SetMonthlies(m.Month, m.Year);
        }
    }
}