@page "/delete"
@using BetterBudgetWeb.Shared.DeleteActions
@inject IJSRuntime JSRuntime

<GoogleAnalytic />

<PageTitle>Delete</PageTitle>

@if (!Constants.Mobile)
{
    <h1 style="font-family:'CBB Default'">Delete</h1>
}
<div class="tab flex-r" style="width:100%;flex-wrap:wrap">
    <button class="tablinks @BalanceClass" @onclick="@ShowBalanceGoal">Account</button>
    @if(Constants.Monthlies.FirstOrDefault(m => m.Dynamic == "DYNAMIC") != null)
    {        
        <button class="tablinks @DynamicClass" @onclick="@ShowDynamicGoal">Dynamic Charge</button>
    }
    @if (Constants.Monthlies.FirstOrDefault(m => m.Dynamic == "STATIC") != null)
    {
        <button class="tablinks @StaticClass" @onclick="@ShowStaticGoal">Set Charge</button>
    }
    @if(Constants.Envelopes.Count > 0)
    {        
        <button class="tablinks @EnvelopesClass" @onclick="@ShowEnvelopes">Goal Envelopes</button>
    }
    @*<button class="tablinks @SavingsClass" @onclick="@ShowSavingsGoal">Savings Monthly</button>*@
</div>

@if (ShowBalance)
{
    <DeleteBalance />
}
@if (ShowDynamic)
{
    <DeleteDynamic />
}
else if (ShowStatic)
{
    <DeleteStatic  />
}
else if (ShowEnvelope)
{
    <DeleteEnvelope />
}


@code {
    private string TransactionName;
    private string ExpenseType;
    private string PaidOffPerson1;
    private string PaidOffPerson2;
    private string PaidWithPerson1;
    private string PaidWithPerson2;
    private string Person1Amount;
    private string Person2Amount;

    private string BalName;
    private string BalanceType;
    private string APR;
    private string InitAmount;
    private string color = "#32A852";
    private string Color
    {
        get { return color; }
        set
        {
            if (string.IsNullOrEmpty(value))
                value = "#32A852";
            else if (value[0] != '#')
                value = "#" + value;

            if (value.Length > 7)
                value.Substring(0, 7);

            color = value;
        }
    }

    private bool ShowBalance { get; set; } = true;
    private bool ShowDynamic { get; set; }
    private bool ShowStatic { get; set; }
    private bool ShowEnvelope { get; set; }

    private string BalanceClass => ShowBalance ? "active" : "";
    private string DynamicClass => ShowDynamic ? "active" : "";
    private string StaticClass => ShowStatic ? "active" : "";
    private string EnvelopesClass => ShowEnvelope ? "active" : "";

    private bool NoBalances { get; set; } = Constants.Balances == null || Constants.Balances.Count == 0;

    protected override Task OnInitializedAsync()
    {
        Constants.CurPage = "Delete";
        return base.OnInitializedAsync();
    }

    private void ShowBalanceGoal()
    {
        ShowBalance = !ShowBalance;
        ShowDynamic = false;
        ShowStatic = false;
        ShowEnvelope = false;
    }
    private void ShowDynamicGoal()
    {
        ShowDynamic = !ShowDynamic;
        ShowBalance = false;
        ShowStatic = false;
        ShowEnvelope = false;
    }
    private void ShowStaticGoal()
    {
        ShowStatic = !ShowStatic;
        ShowBalance = false;
        ShowDynamic = false;
        ShowEnvelope = false;
    }
    private void ShowEnvelopes()
    {
        ShowEnvelope = !ShowEnvelope;
        ShowBalance = false;
        ShowDynamic = false;
        ShowStatic = false;
    }

    private void Refresh(bool accepted)
    {
        if (accepted)
        {
            NoBalances = Constants.Balances == null || Constants.Balances.Count == 0;
            StateHasChanged();
        }
    }
}
