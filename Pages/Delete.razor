@page "/delete"
@using BetterBudgetWeb.Shared.DeleteActions
@inject IJSRuntime JSRuntime

<GoogleAnalytic />

<PageTitle>Delete</PageTitle>

@if (!Constants.Mobile)
{
    <h1 style="font-family:'CBB Default'">Delete</h1>
}
<div class="tab flex-r" style="width:100%;flex-wrap:wrap">
    <button class="tablinks tab-btn @(ShowBools["Balance"] ? "active" : "")" @onclick="@(() => ShowIndex("Balance"))">Account</button>
    @if (Constants.Monthlies.FirstOrDefault(m => m.Dynamic == "DYNAMIC") != null)
    {
        <button class="tablinks tab-btn @(ShowBools["Dynamic"] ? "active" : "")" @onclick="@(() => ShowIndex("Dynamic"))">Budget Category</button>
    }
    @if (Constants.Monthlies.FirstOrDefault(m => m.Dynamic == "STATIC") != null)
    {
        <button class="tablinks tab-btn @(ShowBools["Static"] ? "active" : "")" @onclick="@(() => ShowIndex("Static"))">1-time Monthly Charge</button>
    }
    @if (Constants.Envelopes.Count > 0)
    {
        <button class="tablinks tab-btn @(ShowBools["Envelope"] ? "active" : "")" @onclick="@(() => ShowIndex("Envelope"))">Goal Envelopes</button>
    }
    @if (Constants.Presets.Count > 0)
    {
        <button class="tablinks tab-btn @(ShowBools["Preset"] ? "active" : "")" @onclick="@(() => ShowIndex("Preset"))">Presets</button>
    }
    @*<button class="tablinks @SavingsClass" @onclick="@ShowSavingsGoal">Savings Monthly</button>*@
</div>

@if (ShowBools["Balance"])
{
    <DeleteBalance />
}
@if (ShowBools["Dynamic"])
{
    <DeleteDynamic />
}
else if (ShowBools["Static"])
{
    <DeleteStatic />
}
else if (ShowBools["Envelope"])
{
    <DeleteEnvelope />
}
else if (ShowBools["Preset"])
{
    <DeletePreset />
}


@code {
    Dictionary<string, bool> ShowBools = new()
    {
        {"Balance",true}
        ,{"Dynamic",false}
        ,{"Static",false}
        ,{"Envelope",false}
        ,{"Preset",false}
    };

    private string TransactionName;
    private string ExpenseType;
    private string PaidOffPerson1;
    private string PaidOffPerson2;
    private string PaidWithPerson1;
    private string PaidWithPerson2;
    private string Person1Amount;
    private string Person2Amount;

    private string BalName;
    private string BalanceType;
    private string APR;
    private string InitAmount;
    private string color = "#32A852";
    private string Color
    {
        get { return color; }
        set
        {
            if (string.IsNullOrEmpty(value))
                value = "#32A852";
            else if (value[0] != '#')
                value = "#" + value;

            if (value.Length > 7)
                value.Substring(0, 7);

            color = value;
        }
    }

    private bool NoBalances { get; set; } = Constants.Balances == null || Constants.Balances.Count == 0;

    protected override Task OnInitializedAsync()
    {
        Constants.CurPage = "Delete";
        return base.OnInitializedAsync();
    }

    private void ShowIndex(string index)
    {
        foreach (string key in ShowBools.Keys)
            ShowBools[key] = key == index;
    }

    private void Refresh(bool accepted)
    {
        if (accepted)
        {
            NoBalances = Constants.Balances == null || Constants.Balances.Count == 0;
            StateHasChanged();
        }
    }
}
