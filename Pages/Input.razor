@page "/input"
@using BetterBudgetWeb.Data;
@using BetterBudgetWeb.Shared.InputActions
@inject IJSRuntime JSRuntime

<PageTitle>Input</PageTitle>

@if (!Constants.Mobile)
{
    <h1 style="font-family:'CBB Default'">Input</h1>
}
@if (!Constants.Mobile)
{
    <div class="tab flex-r" style="width:100%;flex-wrap:wrap">
        @if (NoBalances)
        {
            <button class="tablinks @BalClass" @onclick="@ShowAccount">Account</button>
        }
        else
        {
            <button class="tablinks tab-btn @BalClass" @onclick="@ShowAccount">Account</button>
            <button class="tablinks tab-btn @MonthClass" @onclick="@ShowStaticCost">Recurring Charge</button>
            <button class="tablinks tab-btn @EnvClass" @onclick="@ShowEnvelope">Goal Envelope</button>
        }
    </div>
}
else
{
    <div class="tab flex-r" style="width:fit-content;max-width:100%;flex-wrap:wrap">
        @if (NoBalances)
        {
            <button class="tablinks" @onclick="@ShowAccount">Account</button>
        }
        else
        {
            <button class="tablinks tab-btn @BalClass" @onclick="@ShowAccount">Account</button>
            <button class="tablinks tab-btn @MonthClass" @onclick="@ShowStaticCost">Recurring Charge</button>
            <button class="tablinks tab-btn @EnvClass" @onclick="@ShowEnvelope">Goal Envelope</button>
        }
    </div>
}
@if (ShowBal)
{
    <InputBalance />
}
else if (ShowEnv)
{
    <InputEnvelope />
}
else if (ShowStatic)
{
    <InputMonthlyCost />

}

<!-- <button class="btn btn-primary" @onclick="@ShowEnvurity">Input Security</button> -->
@code {
    private bool ShowBal { get; set; } = true;
    private bool ShowStatic { get; set; }
    private bool ShowEnv { get; set; }

    private string BalClass => ShowBal ? "active" : "";
    private string MonthClass => ShowStatic ? "active" : "";
    private string EnvClass => ShowEnv ? "active" : "";

    private bool NoBalances { get; set; } = Constants.Balances == null || Constants.Balances.Count == 0;

    protected override async Task OnInitializedAsync()
    {
        Constants.CurPage = "Input";
        if (NoBalances)
            ShowBal = true;

        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.InvokeAsync<string>("ScrollToTop");
    }

    private void ShowAccount()
    {
        ShowBal = !ShowBal;
        ShowEnv = false;
        ShowStatic = false;
    }
    private void ShowStaticCost()
    {
        ShowStatic = !ShowStatic;
        ShowEnv = false;
        ShowBal = false;
    }
    private void ShowEnvelope()
    {
        ShowEnv = !ShowEnv;
        ShowBal = false;
        ShowStatic = false;
    }

    private void Refresh(bool accepted)
    {
        if (accepted)
        {
            NoBalances = Constants.Balances == null || Constants.Balances.Count == 0;
            StateHasChanged();
        }
    }
}
