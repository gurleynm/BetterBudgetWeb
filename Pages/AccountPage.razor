@page "/account"
@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Repo
@using BetterBudgetWeb.Shared.LoginStuff
@inject NavigationManager NavMan

<PageTitle>Account</PageTitle>

<div class="flex-r" style="justify-content:space-between;align-items:center">
    <div class="flex-r" style="align-items:baseline">
        @if (!Constants.Mobile)
        {
            <h3 style="font-family:'CBB Default';margin-right:1em">Account Page</h3>
        }
        @if (!Constants.Mobile && Constants.TIER_LEVEL != Tier.DEMO)
        {
            <div class="flex-c-start">
                <button class="btn btn-primary" style="background-color:indigo" disabled=@ShowChangedDisabled @onclick=@(() => { Update(); })>Save Changes</button>
            </div>
        }
    </div>
    @if (Constants.TIER_LEVEL != Tier.DEMO)
    {
        <div class="flex-r" style="@Constants.TestMobile("justify-content:space-between;width:100%;margin-bottom:1em","")">
            <button class="btn btn-primary" style="background-color:indigo;color:white;margin-right:1em" @onclick=@(() => {ShowUpdatePassword = true; ErrorMsgPass = "";})>Update Password</button>
            <button class="btn btn-primary" style="background-color:cyan;color:black" @onclick=LogOff>Sign Out</button>
        </div>
    }
    else
    {
        <div class="flex-r" style="justify-content:end;">
            <button class="btn btn-primary" style="background-color:cyan;color:black" @onclick=LogOff>Sign Out</button>
        </div>
    }
</div>
@if (Constants.TIER_LEVEL != Tier.DEMO)
{
    @if (ShowUpdateConfirmation)
    {
        <div class="flex-r"
             style="margin:auto 0;
                width:100%;
                padding: 1vw;
                height:100%;
                outline:solid dodgerblue 1px;
                border-radius:5px;
                color:white;
                text-align:center;
                pointer-events:none;
                z-index:10;">
            Update successful!
        </div>
    }
    <div class="@(Constants.Mobile ? "flex-c" : "flex-r")" style="width:100%;justify-content:space-between">
        <h4>Your name is: <input type="text" @bind-value=@NewUsername /><span style="color:red;padding-left:1em">@ErrorMsgUsername</span></h4>
        <h4>Your email is: <input type="email" @bind-value=@NewEmail style="width:fit-content;padding:0 1em" /><span style="color:red;padding-left:1em">@ErrorMsgEmail</span></h4>
        <h4>The second user's name is: <span>@OtherUser</span></h4>
    </div>
    @if (Constants.Mobile)
    {
        <div class="flex-r" style="justify-content:space-evenly;width:100%;margin-bottom:1em">
            <button class="btn btn-primary" style="background-color:indigo" disabled=@ShowChangedDisabled @onclick=@(() => { Update(); })>Save Changes</button>
        </div>
    }
    @if (Constants.TIER_LEVEL < Data.Tier.GOD_TIER)
    {
        <div class="flex-r" style="justify-content:space-evenly;width:100%;margin-bottom:1em">
            <button class="btn btn-primary" style="background-color:indigo" @onclick="ManageSubscription">Manage Subscription</button>
        </div>
    }
    @if (ShowPricingTable)
    {
        <PaymentPlans />
    }
    else
    {
        <button class="btn btn-danger" style="position:absolute;right:1rem;bottom:1rem" @onclick=@(() => {ShowDelete = true; ErrorMsgPass = "";})>Delete Account</button>
    }

}
else
{
    <div style="font-family:'CBB Default';font-size:large">This the demo page. Normally, this would contain info about your account and subscription.</div>
    <div class="flex-r" style="width:100%">
        <button class="btn btn-primary" @onclick=@(() => NavMan.NavigateTo("sign/up")) style="width:90%;font-size:large;font-family:'CBB Default';color:black;background-color:cyan">Start 45-Day Trial</button>
    </div>
}

@if (ShowUpdatePassword)
{
    <Confirmation OnClose="UpdatePassword" LeftBtnTxt="Cancel" LeftBtnColor="btn-secondary" RightBtnTxt="Update" RightBtnColor="btn-primary"
                  @bind-Disabled=@UpdateDisabled>
        <div>
            <span style="color:red"><strong>WARNING: All of your data will be deleted. This action cannot be reversed!</strong></span>
            <br />
            <br />
            <span style="color:@Constants.ColorScheme["TextOnSilver"]">To update your account, please enter in your current password and your new password below:</span>
            <br />
            <br />
            <div class="flex-r">
                <table style="color:@Constants.ColorScheme["Text"]">
                    <tr>
                        <td style="border:none;color:white">Current password:</td>
                        <td style="border:none">
                            <PasswordInput Placeholder="Current Password" @bind-Password=@CurrentPassword ShowEye="true" />
                        </td>
                    </tr>
                    <tr>
                        <td style="border:none;color:white">New password:</td>
                        <td style="border:none">
                            <PasswordInput Placeholder="New Password" @bind-Password=@NewPassword ShowEye="true" />
                        </td>
                    </tr>
                    <tr>
                        <td style="border:none;color:white">Confirm new password:</td>
                        <td style="border:none">
                            <PasswordInput Placeholder="Confirm New Password" @bind-Password=@ConfirmPassword ShowEye="true" />
                        </td>
                    </tr>
                </table>
            </div>
            <br />
            <PasswordRules @ref=@passwordRules Password="@NewPassword" ConfirmedPassword="@ConfirmPassword" ConfirmedRequired="true" />
            <br />
            <span style="color:red">@ErrorMsgPass</span>
        </div>
    </Confirmation>
}
<DeleteAccountModal @bind-ShowDelete=ShowDelete />


@code {
    [CascadingParameter]
    public EventCallback LogOff { get; set; }

    private bool ShowChangedDisabled => NewUsername == OG_Username && NewEmail == OG_Email;

    private string OtherUser => Constants.CUR_USER_NAME == Constants.Person1 ? Constants.Person2 : Constants.Person1;

    private bool UpdateDisabled;
    private bool ShowUpdatePassword;
    private bool ShowDelete;
    private bool ShowUpdateConfirmation;

    private string User1 = "";
    private string User2 = "";
    private string Password = "";
    private string Password2 = "";

    private string CurrentPassword = "";
    private string NewPassword = "";
    private string ConfirmPassword = "";

    private string NewUsername = "";
    private string NewEmail = "";

    private string OG_Username = "";
    private string OG_Email = "";

    private PasswordRules passwordRules;

    private string ErrorMsgPass = "";
    private string ErrorMsgUsername = "";
    private string ErrorMsgEmail = "";

    private bool ShowPricingTable;

    protected override async Task OnInitializedAsync()
    {
        Constants.CurPage = "Account";
        OG_Username = Constants.CUR_USER_NAME;
        OG_Email = Constants.CUR_USER_EMAIL;
        NewUsername = "" + OG_Username;
        NewEmail = "" + OG_Email;
    }

    private async void Update()
    {
        ErrorMsgEmail = "";
        ErrorMsgUsername = "";

        if (!Constants.IsValidEmail(NewEmail))
            ErrorMsgEmail = "Invalid email";

        if (NewUsername.Trim().Length < 6)
            ErrorMsgUsername = "Username must be at least 6 characters";

        if (!string.IsNullOrEmpty(ErrorMsgEmail) || !string.IsNullOrEmpty(ErrorMsgUsername))
        {
            StateHasChanged();
            return;
        }

        User userInfo = new User { Name = NewUsername, Email = NewEmail };

        string UpdateUser = await UserRepo.UpdateUser(userInfo);
        if (UpdateUser != "Success")
        {
            ErrorMsgEmail = UpdateUser;
            UpdateDisabled = false;
        }
        else
        {
            ShowUpdatePassword = false;
            StateHasChanged();
            ShowUpdateConfirmation = true;
            StateHasChanged();
            await Task.Delay(3000);
            ShowUpdateConfirmation = false;
        }

        UpdateDisabled = false;
        StateHasChanged();
    }

    private async void UpdatePassword(bool accepted)
    {
        if (accepted)
        {
            bool Passed = passwordRules.CheckConditions();

            ErrorMsgPass = "";
            if (string.IsNullOrEmpty(CurrentPassword))
                ErrorMsgPass = "You must enter your current password.";

            if (!string.IsNullOrEmpty(ErrorMsgPass) || !Passed)
            {
                UpdateDisabled = false;
                return;
            }

            User userInfo = new User(NewUsername, NewEmail, NewPassword);
            userInfo.Id = Constants.CUR_USER_NAME;
            userInfo.Token = CurrentPassword;

            string UpdateUser = await UserRepo.UpdateUser(userInfo);
            if (UpdateUser != "Success")
            {
                ErrorMsgPass = UpdateUser;
                UpdateDisabled = false;
            }
            else
            {
                ShowUpdatePassword = false;
                StateHasChanged();
                ShowUpdateConfirmation = true;
                StateHasChanged();
                await Task.Delay(3000);
                ShowUpdateConfirmation = false;
            }
        }
        else
            ShowUpdatePassword = false;

        UpdateDisabled = false;
        StateHasChanged();
    }

    private void ManageSubscription()
    {
        if (Constants.TIER_LEVEL == Data.Tier.TRIAL)
            ShowPricingTable = !ShowPricingTable;
        else
            NavMan.NavigateTo("https://billing.stripe.com/p/login/test_6oE9AJfV35xS32U000");
    }
}