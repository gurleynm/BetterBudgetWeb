@page "/chart"
@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Repo
@using BetterBudgetWeb.Runner
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Sankey Chart</PageTitle>
<style>
    option {
        color: black;
    }

    select {
        color: black;
    }

    input {
        color: black;
    }

    button {
        color: black;
    }
</style>

<div id="sankey_basic" style="width: 100%; height: 75vh;background-color:aliceblue;overflow-x:auto;overflow-y:auto;
        margin-bottom:5vh;margin-right:5vw;"></div>

<div style="float:left;margin-right:2vw">
    <label>Month</label>
    <br />
    <select class="custom-select" @bind="SelectedMonth" title="Pick a Timeframe ">
        <option value="@string.Empty" selected disabled="disabled">(Choose a Timeframe)</option
        @if (FoundMonths.Count > 1)
        {
            <option value="All">All</option>
        }
        @foreach (var dt in FoundMonths)
        {
            <option value="@dt">@dt</option>
        }
    </select>
</div>
<div style="float:left;margin-right:2vw">
    <label>Year</label>
    <br />
    <select class="custom-select" @bind="SelectedYear" title="Pick a Timeframe ">
        <option value="@string.Empty" selected disabled="disabled">(Choose a Timeframe)</option>
        @if (FoundYears.Count > 1)
        {
            <option value="All">All</option>
        }
        @foreach (var dt in FoundYears)
        {
            <option value="@dt">@dt</option>
        }
    </select>
</div>
@*
<div style="float:left;margin-right:2vw">
    <label>Person</label>
    <br />
    <select class="custom-select" @bind="SelectedPerson" title="Pick a Person ">
        <option value="Both" selected>Both</option>
        <option value="@Constants.Person1">@Constants.Person1</option>
        <option value="@Constants.Person2">@Constants.Person2</option>
    </select>
</div>
*@
<div style="float:left;">
    @if (Levels != null && Levels.Count > 0)
    {
    <label>Level</label>
    <br />
        <select class="custom-select" @bind="SelectedLevel" title="Pick a Level ">
            <option value="@string.Empty" selected disabled="disabled">(Choose a level)</option>
            @if (Levels.Count > 1)
            {
                <option value="All">All</option>
            }
            @foreach (var dt in Levels)
            {
                <option value="@dt">@dt</option>
            }
        </select>
    }
    else
    {
        <br />
        <label style="color:red">No values for this combination.</label>
    }
</div>
@if (Levels != null && Levels.Count > 0)
{
    <div style="float:left;margin-top:.5vw">
        <button class="btn btn-primary" style="margin: auto 5vw" @onclick=DrawChart>Enter</button>
    </div>
}

@*
<table style="margin: auto 10vw; width:40vw; float:right">
    <tr>
        <th></th>
        <th>Total In</th>
        <th>Total Out</th>
        <th>Difference</th>
    </tr>
    <tr>
        <td>Thing</td>
        <td>Thing</td>
        <td>Thing</td>
        <td>Thing</td>
    </tr>
</table>
*@

@code {
    private string selectedYear;
    private string selectedMonth;
    private string selectedPerson;
    private string SelectedYear
    {
        get { return selectedYear; }
        set
        {
            if (value == null || value == selectedYear)
                return;

            List<Transaction> DesiredTransactions;

            selectedYear = value;

            DecideDesired();
        }
    }
    private string SelectedMonth
    {
        get { return selectedMonth; }
        set
        {
            if (value == null || value == selectedMonth)
                return;

            selectedMonth = value;

            DecideDesired();
        }
    }
    private string SelectedPerson
    {
        get { return selectedPerson; }
        set
        {
            if (value == null || value == selectedPerson)
                return;

            selectedPerson = value;

            DecideDesired();
        }
    }
    private string SelectedLevel { get; set; }

    private List<string> FoundMonths => GetMonths();
    private List<string> FoundYears => GetYears();
    private List<string> Levels = new List<string>();
    private List<CashFlow> CashFlows = new List<CashFlow>();

    protected override Task OnInitializedAsync()
    {
        SelectedMonth = "All";
        SelectedYear = "All";
        DrawChart();
        return base.OnInitializedAsync();
    }

    private List<string> GetMonths()
    {
        return IndexRunner.GetMonths(Constants.Transactions, false);
    }

    private List<string> GetYears()
    {
        List<string> years = new List<string>();
        foreach (var trans in Constants.Transactions)
        {
            if (!years.Contains(trans.DateOfTransaction.Year.ToString()))
                years.Add(trans.DateOfTransaction.Year.ToString());
        }

        return years;
    }

    public async void DrawChart()
    {
        if (string.IsNullOrEmpty(SelectedLevel))
            return;

        await JSRuntime.InvokeAsync<bool>("TurnOffScroll");
        List<Flow> objs = GetFlows(SelectedMonth, SelectedYear);

        var json = System.Text.Json.JsonSerializer.Serialize(objs);
        await JSRuntime.InvokeAsync<object>("drawChart", json);
    }

    private List<Flow> GetFlows(string Month, string Year)
    {
        List<Flow> TheFlows = new List<Flow>();
        List<Transaction> DesiredTransactions = new List<Transaction>();
        Dictionary<string, Transaction> DesiredTransactionsDict = new Dictionary<string, Transaction>();
        Dictionary<string, Transaction> DictIncome = new Dictionary<string, Transaction>();

        var SelectedDownload = SelectedMonth + " " + SelectedYear;

        if (SelectedDownload == "All All")
            DesiredTransactions = Constants.Transactions.OrderByDescending(t => t.DateOfTransaction).ToList();
        else
        {
            if (SelectedDownload.Contains("All "))
            {
                DesiredTransactions = Constants.Transactions.Where(tr => tr.DateOfTransaction.Year.ToString() == SelectedYear).OrderByDescending(t => t.DateOfTransaction).ToList();
            }
            else if (SelectedDownload.Contains(" All"))
                DesiredTransactions = Constants.Transactions.Where(tr => tr.DateOfTransaction.ToString("MMMM") == SelectedMonth).OrderByDescending(t => t.DateOfTransaction).ToList();
            else
                DesiredTransactions = Constants.Transactions.Where(tr => tr.MonthYear() == SelectedDownload).OrderByDescending(t => t.DateOfTransaction).ToList();
        }

        if (SelectedLevel != "All")
            DesiredTransactions = DesiredTransactions.Where(dt => dt.ExpenseType == SelectedLevel).ToList();

        string TKey;
        string[] IgnoreThese = new string[] { "Debt", "Equity", "Transfer", "Envelope" };

        bool firstPerson = SelectedPerson == "Both" || SelectedPerson == Constants.Person1;
        bool secondPerson = SelectedPerson == "Both" || SelectedPerson == Constants.Person2;

        foreach (var transact in DesiredTransactions)
        {
            if (IgnoreThese.Contains(transact.ExpenseType))
                continue;

            TKey = transact.Name;

            if (transact.ExpenseType == "Income")
            {
                if (DictIncome.ContainsKey(TKey))
                {
                    DictIncome[TKey].Person1Amount += transact.Person1Amount;
                    DictIncome[TKey].Person2Amount += transact.Person2Amount;
                }
                else
                {
                    DictIncome[TKey] = new Transaction(transact);
                }
                continue;
            }


            if (DesiredTransactionsDict.ContainsKey(TKey))
            {
                DesiredTransactionsDict[TKey].Person1Amount += transact.Person1Amount;
                DesiredTransactionsDict[TKey].Person2Amount += transact.Person2Amount;
            }
            else
            {
                DesiredTransactionsDict[TKey] = new Transaction(transact);
            }
        }

        Dictionary<string, Transaction> GeneralTransactions = new Dictionary<string, Transaction>();
        Transaction trans;
        var keys = DesiredTransactionsDict.Keys.ToArray();
        Array.Sort(keys);
        double Totals = 0;

        foreach (var key in keys)
        {
            if (DesiredTransactionsDict[key].TotalAmount < 0)
                continue;

            if (SelectedLevel != "All")
            {
                Totals = DesiredTransactionsDict.Values.Sum(di => di.TotalAmount);
                TheFlows.Add(DesiredTransactionsDict[key].ToFlow(Totals));
            }

            trans = DesiredTransactionsDict[key];

            if (trans.ExpenseType == "Income")
                continue;
            else if (trans.ExpenseType == "Envelope")
                TKey = trans.Name;
            else if (IgnoreThese.Contains(trans.ExpenseType) || trans.ExpenseType == "Income")
                continue;
            else
                TKey = trans.ExpenseType;

            if (GeneralTransactions.ContainsKey(TKey))
            {
                GeneralTransactions[TKey].Person1Amount += trans.Person1Amount;
                GeneralTransactions[TKey].Person2Amount += trans.Person2Amount;
            }
            else
            {
                if (trans.ExpenseType == "Envelope")
                    GeneralTransactions[TKey] = new Transaction
                        {
                            Person1Amount = trans.Person1Amount,
                            Person2Amount = trans.Person2Amount,
                            ExpenseType = trans.Name,
                            Name = trans.ExpenseType
                        };
                else
                    GeneralTransactions[TKey] = new Transaction(trans);
            }
        }

        if (SelectedLevel == "All")
        {
            double generalTotals = GeneralTransactions.Values.Sum(di => di.TotalAmount);
            double incomeTotals = DictIncome.Values.Sum(di => di.TotalAmount);
            double maxTotals = Math.Max(incomeTotals, generalTotals);

            foreach (var key in DictIncome.Keys)
                TheFlows.Add(DictIncome[key].ToFlow(maxTotals));

            foreach (var key in GeneralTransactions.Keys)
                TheFlows.Add(GeneralTransactions[key].ToFlow(maxTotals, "GENERAL"));
        }

        string[] DecreaseAmount = new string[] { "Eating Out", "Unexpected Adulting" };

        if (DecreaseAmount.Contains(SelectedLevel) && TheFlows.Count > 30)
        {
            int numOfUnder25 = 0;
            double totalOfUnder25 = 0;
            string plural;

            for (int step = TheFlows.Count - 1; step >= 0; step--)
            {
                if (TheFlows[step].Amount < 25)
                {
                    numOfUnder25++;
                    totalOfUnder25 += TheFlows[step].Amount;
                    TheFlows.RemoveAt(step);
                }
            }
            plural = numOfUnder25 != 1 ? "s" : "";
            TheFlows.Add(new Transaction
                {
                    Name = numOfUnder25 + " Item" + plural + " Under $25.00",
                    Person1Amount = totalOfUnder25 / 2,
                    Person2Amount = totalOfUnder25 / 2,
                    ExpenseType = SelectedLevel
                }
                .ToFlow(Totals));
        }
        return TheFlows;
    }

    public void DecideDesired()
    {
        List<Transaction> DesiredTransactions;

        if (SelectedYear != "All")
            {
                // Specific Year

                if (SelectedMonth == "All")
                    // All Months
                    DesiredTransactions = Constants.Transactions.Where(tr => tr.DateOfTransaction.Year.ToString() == SelectedYear).OrderByDescending(t => t.DateOfTransaction).ToList();
                else
                    // Specific Month
                    DesiredTransactions = Constants.Transactions.Where(tr => tr.MonthYear() == SelectedMonth + " " + SelectedYear).OrderByDescending(t => t.DateOfTransaction).ToList();
            }
            else
            {
                // All Years

                if (SelectedMonth == "All")
                    // All Months
                    DesiredTransactions = Constants.Transactions.OrderByDescending(t => t.DateOfTransaction).ToList();
                else
                    // Specific Month
                    DesiredTransactions = Constants.Transactions.Where(tr => tr.DateOfTransaction.ToString("MMMM") == SelectedMonth).OrderByDescending(t => t.DateOfTransaction).ToList();
            }
                

            SelectedLevel = "All";

            Levels = new List<string>();

            string[] IgnoreThese = new string[] { "Debt", "Income", "Equity", "Envelope", "Transfer" };

            foreach (var dt in DesiredTransactions)
            {
                if (Levels.Contains(dt.ExpenseType) || IgnoreThese.Contains(dt.ExpenseType))
                    continue;

                Levels.Add(dt.ExpenseType);
            }

            StateHasChanged();
    }

    public class CashFlow
    {
        public string Name { get; set; }
        public double In { get; set; }
        public double Out { get; set; }
        public CashFlow() { }
    }
}