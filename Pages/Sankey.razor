@page "/chart"
@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Repo
@using BetterBudgetWeb.Runner
@using System.Globalization;
@using CrispyCode.BlazorSankey;
@using CrispyCode.BlazorSankey.Model;
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<GoogleAnalytic />

<PageTitle>Sankey Chart</PageTitle>

<div class="flex-c" style="overflow-y:auto;align-items:center">
    @* <div id="sankey_basic" style="width: 95%; height:fit-content;min-height: 75vh;background-color:@Constants.ColorScheme["ComponentBackground"];border-radius:10px;
                                overflow-x:clip;overflow-y:auto;padding:1em;margin: 1em 0 1em 0;"></div> *@
    <div class="@(Constants.Mobile ? "flex-c" : "flex-r")" style="justify-content:center;align-items:center;flex-wrap:wrap; width:100%">
        <div>
            @if (Levels == null || Levels.Count == 0)
            {
                <br />
                <label style="color:red">No values for this combination.</label>
            }
        </div>
    </div>
    <div class="flex-r-100" style="justify-content:space-between;flex-wrap:wrap;align-content:center">
        <div class="flex-c" style="align-items:center;padding:0 1em;border-radius:10px;
                    background-color:@Constants.ColorScheme["ComponentBackground"];width:11em;border:1px silver solid;">
            <span>Total Income</span>
            <span style="padding:0;color:@Constants.ColorScheme["IncomeGood"]">@Constants.Pretty(TotalIn)</span>
        </div>
        <div class="flex-c" style="align-items:center;padding:0 1em;border-radius:10px;
                background-color:@Constants.ColorScheme["ComponentBackground"];width:11em;border:1px silver solid">
            <span>Total Expenses</span>
            <span style="padding:0;color:red">@Constants.Pretty(TotalOut)</span>
        </div>
        <div class="flex-c" style="align-items:center;padding:0 1em;border-radius:10px;
                background-color:@Constants.ColorScheme["ComponentBackground"];width:11em;border:1px silver solid">
            <span>Total Net</span>
            <span style="padding:0;color:@Constants.GoodOrBad(TotalIn-TotalOut)">@Constants.Pretty(TotalIn - TotalOut)</span>
        </div>
        <div class="flex-c" style="align-items:center;padding:0 1em;border-radius:10px;
                background-color:@Constants.ColorScheme["ComponentBackground"];width:11em;border:1px silver solid">
            <span>Savings Rate</span>
            <span style="padding:0;color:@Constants.GoodOrBad((TotalIn-TotalOut)/TotalIn)">@(Math.Round(TotalIn == 0 ? 0 : (TotalIn - TotalOut) / TotalIn * 100, 1) + "%")</span>
        </div>
    </div>
    @if (Levels != null && Levels.Count > 0)
    {
        <div class="flex-r">
            
            <div class="flex-c">
                <input type="month" id="start" name="start" min=@(MinMonYear.ToString("yyyy-MM")) max=@(MaxMonYear.ToString("yyyy-MM")) @bind=@MonYear />
            </div>

            <div class="flex-r" style="margin:1em">
                <button class="btn-grad" @onclick=DrawChartEnter>@(SelectedLevel == "All" ? "Enter" : "Reset")</button>
            </div>
        </div>
    }
    @if (links.Count > 0)
    {
        <div class="nobar" style="width:100%;padding:1em 0;overflow-x:auto">
            <SankeyDiagram OnNodeClicked="NodeClicked" OnLinkClicked="LinkClicked" Width="@(Constants.Mobile ? "200vw" : "100%")" Height="@(Constants.Mobile ? Constants.MobileApp ? "80vh" : "90vh" : "100vh")" Nodes=@nodes.Values.ToList() Links=@links />
        </div>
    }
    else
    {
        <LoadingDots />
    }
</div>


@code {
    Dictionary<string, int> nodeIds = new();
    Dictionary<string, string> nodeColors = new();
    int nodeCnt = 0;

    private Dictionary<string, Node> nodes = new Dictionary<string, Node>();
    private List<Link> links = new List<Link>();
    private string selectedYear;
    private string selectedMonth;
    private DateTime monYear = DateTime.Now;
    private DateTime MinMonYear;
    private DateTime MaxMonYear;
    private string selectedPerson;
    private string SelectedYear
    {
        get { return selectedYear; }
        set
        {
            if (value == null || value == selectedYear)
                return;

            List<Transaction> DesiredTransactions;

            selectedYear = value;

            DecideDesired();
        }
    }
    private string SelectedMonth
    {
        get { return selectedMonth; }
        set
        {
            if (value == null || value == selectedMonth)
                return;

            selectedMonth = value;

            DecideDesired();
        }
    }
    private DateTime MonYear
    {
        get { return monYear; }
        set
        {
            if (value == null || value == monYear)
                return;

            monYear = value;
            List<Transaction> DesiredTransactions;
            selectedYear = monYear.Year.ToString();
            selectedMonth = monYear.ToString("MMMM");

            DecideDesired();

        }
    }
    private string SelectedPerson
    {
        get { return selectedPerson; }
        set
        {
            if (value == null || value == selectedPerson)
                return;

            selectedPerson = value;

            DecideDesired();
        }
    }
    private string SelectedLevel { get; set; }

    private List<string> FoundMonths => GetMonths();
    private List<string> FoundYears => GetYears();
    private List<string> Levels = new List<string>();
    private List<CashFlow> CashFlows = new List<CashFlow>();
    private double TotalIn { get; set; }
    private double TotalOut { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Constants.CurPage = "Chart";
        Constants.Transactions = await TransactionRepo.GetTransactionsAsync("ALL");
        DateTime latestDate = Constants.Transactions.Max(t => t.DateOfTransaction);

        MaxMonYear = latestDate;
        MinMonYear = latestDate;

        if (FoundYears.Count > 0)
        {
            SelectedYear = FoundYears.LastOrDefault();
            MinMonYear = new DateTime(int.Parse(SelectedYear), Constants.TheMonthsFromString[FoundMonths[0]], 1);
        }

        SelectedMonth = latestDate.ToString("MMMM");
        SelectedYear = latestDate.Year.ToString();
        SelectedLevel = "All";
        DrawChart();
    }

    private List<string> GetMonths()
    {
        List<string> AllFoundMonths;
        if (SelectedYear == "All")
            AllFoundMonths = IndexRunner.GetMonths();

        else
            AllFoundMonths = IndexRunner.GetMonths(Constants.Transactions.Where(tr => tr.DateOfTransaction.Year.ToString() == SelectedYear).ToList(), false);

        AllFoundMonths = AllFoundMonths.Select(x =>
                                 new { Name = x, Sort = DateTime.ParseExact(x, "MMMM", CultureInfo.InvariantCulture) })
                                     .OrderBy(x => x.Sort.Month)
                                     .Select(x => x.Name).ToList();

        return AllFoundMonths;
    }

    private List<string> GetYears()
    {
        List<string> years = new List<string>();
        foreach (var trans in Constants.Transactions)
        {
            if (!years.Contains(trans.DateOfTransaction.Year.ToString()))
                years.Add(trans.DateOfTransaction.Year.ToString());
        }

        years.Sort((a, b) => b.CompareTo(a));
        return years;
    }

    public async void DrawChartEnter()
    {
        SelectedLevel = "All";
        await GetFlows(SelectedMonth, SelectedYear);
    }

    public async void DrawChart()
    {
        if (string.IsNullOrEmpty(SelectedLevel))
            return;


        await GetFlows(SelectedMonth, SelectedYear);
    }

    private async Task GetFlows(string Month, string Year)
    {
        List<Flow> TheFlows = new List<Flow>();
        List<Transaction> DesiredTransactions = new List<Transaction>();
        Dictionary<string, Transaction> DesiredTransactionsDict = new Dictionary<string, Transaction>();
        Dictionary<string, Transaction> DictIncome = new Dictionary<string, Transaction>();

        // Get the proper set of transactions -- START
        var SelectedDownload = SelectedMonth + " " + SelectedYear;

        if (SelectedDownload == "All All")
            DesiredTransactions = Constants.Transactions.OrderByDescending(t => t.DateOfTransaction).ToList();
        else
        {
            if (SelectedDownload.Contains("All "))
            {
                DesiredTransactions = Constants.Transactions.Where(tr => tr.DateOfTransaction.Year.ToString() == SelectedYear).OrderByDescending(t => t.DateOfTransaction).ToList();
            }
            else if (SelectedDownload.Contains(" All"))
                DesiredTransactions = Constants.Transactions.Where(tr => tr.DateOfTransaction.ToString("MMMM") == SelectedMonth).OrderByDescending(t => t.DateOfTransaction).ToList();
            else
                DesiredTransactions = Constants.Transactions.Where(tr => tr.MonthYear() == SelectedDownload).OrderByDescending(t => t.DateOfTransaction).ToList();
        }

        if (SelectedLevel != "All")
            DesiredTransactions = DesiredTransactions.Where(dt => ValidTransaction(dt)).ToList();
        // Get the proper set of transactions -- END

        // Sum up all transactions by transaction name
        double threshold = 100;
        if (DesiredTransactions.Count < 25)
            threshold = 0;
        else if (DesiredTransactions.Count < 50)
            threshold = 100;
        // else
        //     threshold = 400;

        string TKey;
        string[] IgnoreThese = new string[] { "Debt", "Equity", "Transfer" };
        foreach (var transact in DesiredTransactions)
        {
            if (IgnoreThese.Contains(transact.ExpenseType))
                continue;

            TKey = transact.Name;

            if (transact.ExpenseType == "Income")
            {
                if (DictIncome.ContainsKey(TKey))
                {
                    DictIncome[TKey].Person1Amount += transact.Person1Amount;
                    DictIncome[TKey].Person2Amount += transact.Person2Amount;
                }
                else
                {
                    DictIncome[TKey] = new Transaction(transact);
                }
            }
            else if (0 < transact.TotalAmount && transact.TotalAmount < threshold)
            {
                Transaction newT = new(transact);
                newT.Name = "'" + newT.ExpenseType + "' < " + Constants.Pretty(threshold);
                if (!DesiredTransactionsDict.ContainsKey(newT.Name))
                    DesiredTransactionsDict[newT.Name] = newT;
                else
                {
                    DesiredTransactionsDict[newT.Name].Person1Amount += transact.Person1Amount;
                    DesiredTransactionsDict[newT.Name].Person2Amount += transact.Person2Amount;
                }
            }
            else if (DesiredTransactionsDict.ContainsKey(TKey))
            {
                DesiredTransactionsDict[TKey].Person1Amount += transact.Person1Amount;
                DesiredTransactionsDict[TKey].Person2Amount += transact.Person2Amount;
            }
            else
            {
                DesiredTransactionsDict[TKey] = new Transaction(transact);
            }
        }

        nodes = new();
        links = new();
        await Task.Delay(100);

        double totalT = 0;
        double totalI = 0;
        double Refunds = 0;

        nodeIds = new();
        Dictionary<string, List<Transaction>> expenseTypeTotals = new();
        nodeColors = new();
        nodeCnt = 0;

        nodeColors["Income"] = "forestgreen";
        AddNode("Income", 0);

        foreach (var income in DictIncome.Keys)
        {
            nodeColors[income] = "limegreen";
            AddNode(income, DictIncome[income].Name, DictIncome[income].TotalAmount);
            AddLink(income, "Income", DictIncome[income].TotalAmount);
            totalI += DictIncome[income].TotalAmount;
        }

        foreach (var key in DesiredTransactionsDict.Keys)
        {
            Transaction tempTrans = DesiredTransactionsDict[key];
            // If transaction totals to 0, remove it
            if (tempTrans.TotalAmount == 0)
                DesiredTransactionsDict.Remove(key);

            string SubKey = tempTrans.ExpenseType + "_" + tempTrans.Name;
            if (!nodeIds.ContainsKey(SubKey))
            {
                if (!nodeIds.ContainsKey(tempTrans.ExpenseType))
                {
                    nodeColors[tempTrans.ExpenseType] = ColorWheel.RandomInSet("blue");
                    expenseTypeTotals[tempTrans.ExpenseType] = new() { new(tempTrans) };
                    AddNode(tempTrans.ExpenseType, tempTrans.TotalAmount);
                }
                else
                {
                    expenseTypeTotals[tempTrans.ExpenseType].Add(new(tempTrans));
                }

                nodeColors[SubKey] = ColorWheel.NextColorString();
                AddNode(SubKey, tempTrans.Name, tempTrans.TotalAmount < 0 ? -tempTrans.TotalAmount : tempTrans.TotalAmount);
            }
            else
            {
                expenseTypeTotals[tempTrans.ExpenseType].Add(new(tempTrans));
            }

            if (tempTrans.TotalAmount < 0)
            {
                AddLink(SubKey, tempTrans.ExpenseType, -tempTrans.TotalAmount);
            }
            else
                AddLink(tempTrans.ExpenseType, SubKey, tempTrans.TotalAmount);

            totalT += tempTrans.TotalAmount;
        }

        foreach (var ett in expenseTypeTotals.Keys)
        {
            AddLink("Income", ett, expenseTypeTotals[ett].Sum(ex => ex.TotalAmount));
        }

        nodes["Income"].Name = "Income (" + Constants.Pretty(double.Max(totalT, totalI)) + ")";

        if (totalT > totalI && totalI != 0)
        {
            nodeColors["Overspent"] = ColorWheel.RandomInSet("red");
            AddNode("Overspent", totalT - totalI);
            AddLink("Overspent", "Income", totalT - totalI);
        }
        else if (totalT < totalI && totalT != 0)
        {
            nodeColors["Savings"] = ColorWheel.RandomInSet("green");
            AddNode("Savings", totalI - totalT);
            AddLink("Income", "Savings", totalI - totalT);
        }

        foreach (var key in nodes.Keys)
        {
            double left = 0;
            double right = 0;
            if (expenseTypeTotals.ContainsKey(key))
            {
                left = expenseTypeTotals[key].Where(ex => ex.TotalAmount < 0).Sum(ex => -ex.TotalAmount);
                right = expenseTypeTotals[key].Where(ex => ex.TotalAmount > 0).Sum(ex => ex.TotalAmount);

                UpdateNode(key, double.Max(left, right));
            }
        }

        TotalIn = totalI;
        TotalOut = totalT - Refunds;
        await Task.Delay(100);
        StateHasChanged();
    }

    private void LinkClicked(Link link)
    {
        try
        {
            if (link != null)
            {
                string from = link.Source.Name;
                string to = link.Target.Name;
                foreach (string lev in Levels)
                {
                    if (to.Contains(lev))
                    {
                        SelectedLevel = lev;
                        DrawChart();
                        break;
                    }
                    else if (from.Contains(lev))
                    {
                        SelectedLevel = lev;
                        DrawChart();
                        break;
                    }
                }
            }
        }
        catch (Exception e) { }
    }

    private void NodeClicked(Node node)
    {
        try
        {
            if (node != null)
            {
                string title = node.Name;
                foreach (string lev in Levels)
                {
                    if (title.Contains(lev))
                    {
                        SelectedLevel = lev;
                        DrawChart();
                        break;
                    }
                }
            }
        }
        catch (Exception e) { }
    }


    private bool ValidTransaction(Transaction dt)
    {
        bool ExpenseIsLevel = dt.ExpenseType == SelectedLevel;
        bool ExpenseIsEnvelope = dt.ExpenseType == "Envelope";

        bool PaidWithPerson1IsLevel = dt.PaidWithPerson1 == SelectedLevel;
        bool PaidWithPerson2IsLevel = dt.PaidWithPerson2 == SelectedLevel;

        bool PaidWithPerson = PaidWithPerson1IsLevel || PaidWithPerson2IsLevel;

        return ExpenseIsLevel || (ExpenseIsEnvelope && PaidWithPerson);
    }

    private string DecideColor(double amount)
    {
        return amount < 0 ? "red" : Constants.ColorScheme["IncomeGood"];
    }

    public void DecideDesired()
    {
        List<Transaction> DesiredTransactions;

        if (SelectedYear != "All")
        {
            // Specific Year

            if (SelectedMonth == "All")
                // All Months
                DesiredTransactions = Constants.Transactions.Where(tr => tr.DateOfTransaction.Year.ToString() == SelectedYear).OrderByDescending(t => t.DateOfTransaction).ToList();
            else
                // Specific Month
                DesiredTransactions = Constants.Transactions.Where(tr => tr.MonthYear() == SelectedMonth + " " + SelectedYear).OrderByDescending(t => t.DateOfTransaction).ToList();
        }
        else
        {
            // All Years

            if (SelectedMonth == "All")
                // All Months
                DesiredTransactions = Constants.Transactions.OrderByDescending(t => t.DateOfTransaction).ToList();
            else
                // Specific Month
                DesiredTransactions = Constants.Transactions.Where(tr => tr.DateOfTransaction.ToString("MMMM") == SelectedMonth).OrderByDescending(t => t.DateOfTransaction).ToList();
        }


        SelectedLevel = "All";

        Levels = new List<string>();

        string[] IgnoreThese = new string[] { "Debt", "Income", "Equity", "Envelope", "Transfer" };

        foreach (var dt in DesiredTransactions)
        {
            if (Levels.Contains(dt.ExpenseType) || IgnoreThese.Contains(dt.ExpenseType))
                continue;

            Levels.Add(dt.ExpenseType);
        }

        StateHasChanged();
    }
    private void AddLink(string from, string to, double val)
    {
        links.Add(new Link(nodeIds[from], nodeIds[to], val, null, nodeColors[from], nodeColors[to]));
    }
    private void AddNode(string id, string title, double amount)
    {
        AddNode(id, title, amount, nodeColors[id]);
    }
    private void AddNode(string id, double amount)
    {
        AddNode(id, amount, nodeColors[id]);
    }
    private void AddNode(string id, double amount, string color)
    {
        AddNode(id, id, amount, color);
    }
    private void AddNode(string id, string title, double amount, string color)
    {
        nodes[id] = new Node(nodeCnt, title + " (" + Constants.Pretty(Math.Abs(amount)) + ")", null, color, 1);
        nodeIds[id] = nodeCnt;
        nodeCnt++;
    }
    private void UpdateNode(string id, double? amount)
    {
        if (amount is null)
            return;

        string CurTitle = nodes[id].Name;
        if (!string.IsNullOrEmpty(CurTitle))
        {
            nodes[id] = new Node(nodes[id].Id, id + " (" + Constants.Pretty(amount) + ")", null, nodes[id].Color, 1);
        }
    }
    public class CashFlow
    {
        public string Name { get; set; }
        public double In { get; set; }
        public double Out { get; set; }
        public CashFlow() { }
    }
}