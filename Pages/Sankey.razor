@page "/chart"
@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Repo
@using BetterBudgetWeb.Runner
@using System.Globalization;
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Sankey Chart</PageTitle>

<div class="flex-c" style="overflow-y:auto;align-items:center">
<div id="sankey_basic" style="width: 95%; height:fit-content;min-height: 75vh;background-color:@Constants.ColorScheme["ComponentBackground"];border-radius:10px;
                                overflow-x:clip;overflow-y:auto;padding:1em;margin: 1em 0 1em 0;"></div>
<div class="@(Constants.Mobile ? "flex-c" : "flex-r")" style="justify-content:space-evenly;align-items:center;flex-wrap:wrap;">
    <div>
        <table class="toggle-table">
            <tr>
                <th style="padding:0 2vw">Total In</th>
                <th style="padding:0 2vw">Total Out</th>
                <th style="padding:0 2vw">Difference</th>
            </tr>
            <tr>
                <td style="padding:0 2vw;color:@Constants.ColorScheme["IncomeGood"]">@Constants.Pretty(TotalIn)</td>
                <td style="padding:0 2vw;color:red">@Constants.Pretty(TotalOut)</td>
                <td style="padding:0 2vw;color:@DecideColor(TotalIn - TotalOut)">@Constants.Pretty(TotalIn - TotalOut)</td>
            </tr>
        </table>    
    </div>
    <div>
        <label>Year</label>
        <br />
        <select class="custom-select" @bind="SelectedYear" title="Pick a Timeframe ">
            <option value="@string.Empty" selected disabled="disabled">(Choose a Timeframe)</option>
            @if (FoundYears.Count > 1)
            {
                <option value="All">All</option>
            }
            @foreach (var dt in FoundYears)
            {
                <option value="@dt">@dt</option>
            }
        </select>    
    </div>
    <div>
        <label>Month</label>
        <br />
        <select class="custom-select" @bind="SelectedMonth" title="Pick a Timeframe ">
            <option value="@string.Empty" selected disabled="disabled">(Choose a Timeframe)</option
            <option value="All">All</option>
            @foreach (var dt in FoundMonths)
            {
                <option value="@dt">@dt</option>
            }
        </select>
    </div>
    
    <div >
        @if (Levels != null && Levels.Count > 0)
        {
        <label>Level</label>
        <br />
            <select class="custom-select" @bind="SelectedLevel" title="Pick a Level ">
                <option value="@string.Empty" selected disabled="disabled">(Choose a level)</option>
                <option value="All">All</option>
                @foreach (var dt in Levels)
                {
                    <option value="@dt">@dt</option>
                }
            </select>
        }
        else
        {
            <br />
            <label style="color:red">No values for this combination.</label>
        }
    </div>
    <div style="@(Constants.Mobile ? "" : "align-self:end")">
        @if (Levels != null && Levels.Count > 0)
        {
            <div class="flex-r" style="margin:1em">
                <button class="btn btn-primary" @onclick=DrawChart>Enter</button>
            </div>
        }
    </div>
</div>
</div>


@code {
    private string selectedYear;
    private string selectedMonth;
    private string selectedPerson;
    private string SelectedYear
    {
        get { return selectedYear; }
        set
        {
            if (value == null || value == selectedYear)
                return;

            List<Transaction> DesiredTransactions;

            selectedYear = value;

            DecideDesired();
        }
    }
    private string SelectedMonth
    {
        get { return selectedMonth; }
        set
        {
            if (value == null || value == selectedMonth)
                return;

            selectedMonth = value;

            DecideDesired();
        }
    }
    private string SelectedPerson
    {
        get { return selectedPerson; }
        set
        {
            if (value == null || value == selectedPerson)
                return;

            selectedPerson = value;

            DecideDesired();
        }
    }
    private string SelectedLevel { get; set; }

    private List<string> FoundMonths => GetMonths();
    private List<string> FoundYears => GetYears();
    private List<string> Levels = new List<string>();
    private List<CashFlow> CashFlows = new List<CashFlow>();
    private double TotalIn { get; set; }
    private double TotalOut { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Constants.Transactions = await TransactionRepo.GetTransactionsAsync("ALL");
        DateTime latestDate = Constants.Transactions.Max(t => t.DateOfTransaction);

        SelectedMonth = latestDate.ToString("MMMM");
        SelectedYear = latestDate.Year.ToString();
        DrawChart();
    }

    private List<string> GetMonths()
    {
        List<string> AllFoundMonths;
        if (SelectedYear == "All")
            AllFoundMonths = IndexRunner.GetMonths();

        else
            AllFoundMonths = IndexRunner.GetMonths(Constants.Transactions.Where(tr => tr.DateOfTransaction.Year.ToString() == SelectedYear).ToList(), false);

        AllFoundMonths =  AllFoundMonths.Select(x => 
                                 new { Name = x, Sort = DateTime.ParseExact(x, "MMMM", CultureInfo.InvariantCulture) })
                                     .OrderBy(x => x.Sort.Month)
                                     .Select(x => x.Name).ToList();

        return AllFoundMonths;
    }

    private List<string> GetYears()
    {
        List<string> years = new List<string>();
        foreach (var trans in Constants.Transactions)
        {
            if (!years.Contains(trans.DateOfTransaction.Year.ToString()))
                years.Add(trans.DateOfTransaction.Year.ToString());
        }

        years.Sort((a, b) => b.CompareTo(a));
        return years;
    }

    public async void DrawChart()
    {
        if (string.IsNullOrEmpty(SelectedLevel))
            return;

        await JSRuntime.InvokeAsync<bool>("TurnOffScroll");
        List<Flow> objs = GetFlows(SelectedMonth, SelectedYear);

        var json = System.Text.Json.JsonSerializer.Serialize(objs);
        await JSRuntime.InvokeAsync<object>("drawChart", json);
    }

    private List<Flow> GetFlows(string Month, string Year)
    {
        List<Flow> TheFlows = new List<Flow>();
        List<Transaction> DesiredTransactions = new List<Transaction>();
        Dictionary<string, Transaction> DesiredTransactionsDict = new Dictionary<string, Transaction>();
        Dictionary<string, Transaction> DictIncome = new Dictionary<string, Transaction>();

        var SelectedDownload = SelectedMonth + " " + SelectedYear;

        if (SelectedDownload == "All All")
            DesiredTransactions = Constants.Transactions.OrderByDescending(t => t.DateOfTransaction).ToList();
        else
        {
            if (SelectedDownload.Contains("All "))
            {
                DesiredTransactions = Constants.Transactions.Where(tr => tr.DateOfTransaction.Year.ToString() == SelectedYear).OrderByDescending(t => t.DateOfTransaction).ToList();
            }
            else if (SelectedDownload.Contains(" All"))
                DesiredTransactions = Constants.Transactions.Where(tr => tr.DateOfTransaction.ToString("MMMM") == SelectedMonth).OrderByDescending(t => t.DateOfTransaction).ToList();
            else
                DesiredTransactions = Constants.Transactions.Where(tr => tr.MonthYear() == SelectedDownload).OrderByDescending(t => t.DateOfTransaction).ToList();
        }

        if (SelectedLevel != "All")
            DesiredTransactions = DesiredTransactions.Where(dt => ValidTransaction(dt)).ToList();

        string TKey;
        string[] IgnoreThese = new string[] { "Debt", "Equity", "Transfer" };

        bool firstPerson = SelectedPerson == "Both" || SelectedPerson == Constants.Person1;
        bool secondPerson = SelectedPerson == "Both" || SelectedPerson == Constants.Person2;

        foreach (var transact in DesiredTransactions)
        {
            if (IgnoreThese.Contains(transact.ExpenseType))
                continue;

            TKey = transact.Name;

            if (transact.ExpenseType == "Income")
            {
                if (DictIncome.ContainsKey(TKey))
                {
                    DictIncome[TKey].Person1Amount += transact.Person1Amount;
                    DictIncome[TKey].Person2Amount += transact.Person2Amount;
                }
                else
                {
                    DictIncome[TKey] = new Transaction(transact);
                }
                continue;
            }


            if (DesiredTransactionsDict.ContainsKey(TKey))
            {
                DesiredTransactionsDict[TKey].Person1Amount += transact.Person1Amount;
                DesiredTransactionsDict[TKey].Person2Amount += transact.Person2Amount;
            }
            else
            {
                DesiredTransactionsDict[TKey] = new Transaction(transact);
            }
        }

        foreach (var key in DesiredTransactionsDict.Keys)
            if (DesiredTransactionsDict[key].TotalAmount == 0)
                DesiredTransactionsDict.Remove(key);

        Dictionary<string, Transaction> GeneralTransactions = new Dictionary<string, Transaction>();
        Transaction trans;
        var keys = DesiredTransactionsDict.Keys.ToArray();
        Array.Sort(keys);
        double Charges = DesiredTransactionsDict.Values.Where(d => d.TotalAmount > 0).Sum(di => di.TotalAmount);
        var Refunds = DesiredTransactionsDict.Values.Where(d => d.TotalAmount < 0).ToList();

        double Totals = Charges;
        double BudgetedAmount;
        double RefundSum = Refunds.Sum(dc => dc.TotalAmount) * -1;

        List<string> Skip = new List<string>();

        Skip.Add("Static Cost");

        foreach (var ev in Constants.Envelopes)
            Skip.Add(ev.Name);

        if (SelectedLevel != "All" && SelectedMonth != "All" && !Skip.Contains(SelectedLevel))
        {
            BudgetedAmount = Constants.GetBudgetedAmount(SelectedLevel, SelectedMonth, SelectedYear);

            // Line below may be obsolete
            Totals = BudgetedAmount + RefundSum > Totals ? BudgetedAmount + Refunds.Sum(dc => dc.TotalAmount) * -1 : Totals;

            if (Charges < BudgetedAmount)
                Totals = Charges;
            else if (BudgetedAmount == 0)
            {
                // Most likely an Envelope
                BudgetedAmount = Totals;
            }

            TheFlows.Add(new Transaction { 
                Name = "Budgeted Amount", 
                ExpenseType = SelectedLevel, 
                Person1Amount = BudgetedAmount
            }.ToFlow(Totals, "~B~"));


            foreach (var refund in Refunds)
                TheFlows.Add(refund.ToFlow(Totals, "~~~"));
        }

        foreach (var key in keys)
        {
            if (DesiredTransactionsDict[key].TotalAmount < 0)
                continue;

            if (SelectedLevel != "All")
            {
                TheFlows.Add(DesiredTransactionsDict[key].ToFlow(Totals));
            }

            trans = DesiredTransactionsDict[key];

            if (trans.ExpenseType == "Income")
                continue;
            else if (trans.ExpenseType == "Envelope")
                TKey = WhichEnvelope(trans);
            else if (IgnoreThese.Contains(trans.ExpenseType) || trans.ExpenseType == "Income")
                continue;
            else
                TKey = trans.ExpenseType;

            if (GeneralTransactions.ContainsKey(TKey))
            {
                GeneralTransactions[TKey].Person1Amount += trans.Person1Amount;
                GeneralTransactions[TKey].Person2Amount += trans.Person2Amount;
            }
            else
            {
                if (trans.ExpenseType == "Envelope")
                    GeneralTransactions[TKey] = new Transaction
                        {
                            Person1Amount = trans.Person1Amount,
                            Person2Amount = trans.Person2Amount,
                            ExpenseType = WhichEnvelope(trans),
                            Name = trans.ExpenseType
                        };
                else
                    GeneralTransactions[TKey] = new Transaction(trans);
            }
        }

        if (SelectedLevel == "All")
        {
            double generalTotals = GeneralTransactions.Values.Sum(di => di.TotalAmount);
            double incomeTotals = DictIncome.Values.Sum(di => di.TotalAmount);
            double maxTotals = Math.Max(incomeTotals, generalTotals);

            foreach (var key in DictIncome.Keys)
                TheFlows.Add(DictIncome[key].ToFlow(incomeTotals,"",generalTotals));

            foreach (var key in GeneralTransactions.Keys)
                TheFlows.Add(GeneralTransactions[key].ToFlow(maxTotals, "GENERAL",incomeTotals));

            TotalIn = incomeTotals + RefundSum;
            TotalOut = generalTotals;
        }
        else
        {
            if(TheFlows.Count > 0)
            {
                var splitter = TheFlows[0].From.Split('$');
                var second = splitter.Length > 1 ? splitter[1].Trim(')') : "0";

                TotalIn = (double.TryParse(second, out double catcher) ? catcher : 0) + RefundSum;
                TotalOut = TheFlows.Sum(tf => tf.From.Contains("Budgeted Amount") ? 0 : tf.Amount);
            }
            else
            {
                TotalIn = TotalOut = 0;
            }
        }

        string[] DecreaseAmount = new string[] { "Eating Out", "Unexpected Adulting", "Fun" };

        // Cut down on # of Entries
        if (DecreaseAmount.Contains(SelectedLevel) && TheFlows.Count > 30)
        {
            int numOfUnder25 = 0;
            double totalOfUnder25 = 0;
            string plural;

            for (int step = TheFlows.Count - 1; step >= 0; step--)
            {
                if (TheFlows[step].Amount < 25)
                {
                    numOfUnder25++;
                    totalOfUnder25 += TheFlows[step].Amount;
                    TheFlows.RemoveAt(step);
                }
            }
            plural = numOfUnder25 != 1 ? "s" : "";
            TheFlows.Add(new Transaction
                {
                    Name = numOfUnder25 + " Item" + plural + " Under $25.00",
                    Person1Amount = totalOfUnder25 / 2,
                    Person2Amount = totalOfUnder25 / 2,
                    ExpenseType = SelectedLevel
                }
                .ToFlow(Totals));
        }

        StateHasChanged();
        return TheFlows;
    }

    private string WhichEnvelope(Transaction t)
    {
        if (string.IsNullOrEmpty(t.PaidWithPerson1))
            return t.PaidWithPerson2;

        return t.PaidWithPerson1;
    }

    private bool ValidTransaction(Transaction dt)
    {
        bool ExpenseIsLevel = dt.ExpenseType == SelectedLevel;
        bool ExpenseIsEnvelope = dt.ExpenseType == "Envelope";

        bool PaidWithPerson1IsLevel = dt.PaidWithPerson1 == SelectedLevel;
        bool PaidWithPerson2IsLevel = dt.PaidWithPerson2 == SelectedLevel;

        bool PaidWithPerson = PaidWithPerson1IsLevel || PaidWithPerson2IsLevel;

        return ExpenseIsLevel || (ExpenseIsEnvelope && PaidWithPerson);
    }

    private string DecideColor(double amount)
    {
        return amount < 0 ? "red" : Constants.ColorScheme["IncomeGood"];
    }

    public void DecideDesired()
    {
        List<Transaction> DesiredTransactions;

        if (SelectedYear != "All")
            {
                // Specific Year

                if (SelectedMonth == "All")
                    // All Months
                    DesiredTransactions = Constants.Transactions.Where(tr => tr.DateOfTransaction.Year.ToString() == SelectedYear).OrderByDescending(t => t.DateOfTransaction).ToList();
                else
                    // Specific Month
                    DesiredTransactions = Constants.Transactions.Where(tr => tr.MonthYear() == SelectedMonth + " " + SelectedYear).OrderByDescending(t => t.DateOfTransaction).ToList();
            }
            else
            {
                // All Years

                if (SelectedMonth == "All")
                    // All Months
                    DesiredTransactions = Constants.Transactions.OrderByDescending(t => t.DateOfTransaction).ToList();
                else
                    // Specific Month
                    DesiredTransactions = Constants.Transactions.Where(tr => tr.DateOfTransaction.ToString("MMMM") == SelectedMonth).OrderByDescending(t => t.DateOfTransaction).ToList();
            }
                

            SelectedLevel = "All";

            Levels = new List<string>();

            string[] IgnoreThese = new string[] { "Debt", "Income", "Equity", "Envelope", "Transfer" };

            foreach (var dt in DesiredTransactions)
            {
                if (Levels.Contains(dt.ExpenseType) || IgnoreThese.Contains(dt.ExpenseType))
                    continue;

                Levels.Add(dt.ExpenseType);
            }

            StateHasChanged();
    }

    public class CashFlow
    {
        public string Name { get; set; }
        public double In { get; set; }
        public double Out { get; set; }
        public CashFlow() { }
    }
}