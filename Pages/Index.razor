@page "/"
@using BetterBudgetWeb.Data
@using BetterBudgetWeb.MainMenuItems
@using BetterBudgetWeb.MainMenuItems.Chart
@using BetterBudgetWeb.MainMenuItems.Chart.ChartHorizontal
@using BetterBudgetWeb.Repo
@using BetterBudgetWeb.Runner
@using BetterBudgetWeb.Shared.Balances
@using BetterBudgetWeb.Shared.Tutorial
@using System.Collections.Specialized
@using static BetterBudgetWeb.MainMenuItems.AddExpense
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Index</PageTitle>
@if (Transactions == null)
{
    <div>Login successful. Pulling data...</div>
}
else
{
    @if (!Constants.Mobile)
    {
        <PopTray Id="char1" ShowWorth=!ShowChart ShowButton=false>
            <Chart DPs=DataPoints BarClicked=FilterDate />
            <br />
            <br />
        </PopTray>
        <br />

        <div class="flex-r" style="flex-wrap:nowrap;justify-content:space-between">
            <div class="flex-r" style="justify-content:start;">

                <div style="width:100%;float:left; margin-right:1vw; margin-bottom:2vh;display:inline-block;">
                    <div class="flex-r" style="margin-bottom:2vh;">
                        <div>
                            <!-- Savings Goals-->
                            <MonthlyGoalTracking ActualDynamicAmount=@ActualDynamic
                                                 ActualStaticAmount=@ActualStatic
                                                 ActualIncomeAmount=@ActualIncome
                                                 EnvelopeAmount=@EnvelopeExpenses />
                        </div>
                        <br />

                        <div class="flex-c-start" style="margin-left:1vw">
                            <PopTray Id="char" ShowWorth=!ShowChart ShowButton=false>
                                <MonthlySpending Title="@(Constants.TheMonthsFromInt[DateTime.Now.Month] + " Transactions")"
                                                 OnDeleteConfirm=@CloseModal TheBalance="@SelectedBalance" />
                            </PopTray>

                            <!-- Dynamic Costs -->
                            <ChartHorizontal DPs=@DynamicCostItems />
                        </div>
                    </div>
                </div>

                <br />
                <div style="display:inline-block;width:50%;">
                    <div class="flex-r" style="padding:0;width:100%;justify-content:space-around;align-items:center; margin-bottom:1vh">
                        <div style="width:100%">
                            @if (Goals)
                            {
                                <button class="btn btn-info" style="width:100%;align-self:center;color:black" @onclick=@(() => ToggleStash())>Stash Cash</button>
                                <br style="clear:both" />
                                <br style="clear:both" />
                                <button class="btn btn-danger" style="width:100%;align-self:center;color:black" @onclick=@(() => ToggleCash())>Cash Out</button>
                                <br />
                                <br />

                                <div class="flex-c">
                                    <div style="font-size:1.5vw;text-align:center">
                                        Total Goals:
                                        <span> @Constants.Pretty(Envelopes.Sum(e => e.Goal))</span>
                                    </div>
                                    <div style="text-align:center;font-size:1.5vw;">
                                        Total Saved:
                                        <span> @Constants.Pretty(Envelopes.Sum(e => e.TotalAmount))</span>
                                    </div>
                                    <hr />
                                    <div class="flex-r" style="font-size:1.25vw;justify-content:space-evenly">
                                        <div class="flex-c" style="font-size:1.25vw;justify-content:space-between">
                                            <div style="text-align:center;">@Constants.Person1 Saved:</div>
                                            <div style="text-align:center;"> @Constants.Pretty(Envelopes.Sum(e => e.Person1Amount))</div>
                                        </div>
                                        <div class="flex-c" style="font-size:1.25vw;justify-content:space-between">
                                            <div style="text-align:center;">@Constants.Person2 Saved:</div>
                                            <div style="text-align:center;"> @Constants.Pretty(Envelopes.Sum(e => e.Person2Amount))</div>
                                        </div>
                                    </div>
                                </div>
                                <br />
                                <div class="flex-r" style="font-size:3vw;flex-wrap:wrap;">
                                    @foreach (var env in Envelopes)
                                    {
                                        <Envelope Name="@env.Name" Scale=11 Font_Size=1.375
                                                  Goal=@Math.Max(env.Goal,env.Person1Amount + env.Person2Amount)
                                                  Saved=@env.TotalAmount FlipClick="true"
                                                  Person1Account="@(new BalanceRepoCaller().GetName(env.Person1Account))"
                                                  Person2Account="@(new BalanceRepoCaller().GetName(env.Person2Account))"
                                                  Person1Amount="@env.Person1Amount"
                                                  Person2Amount="@env.Person2Amount" />
                                    }
                                </div>
                            }
                            <AddExpense OnAddConfirm="Add" Added="Added" />
                            <br style="clear:both;" />
                            <!-- Set Monthly Costs Goals-->
                            <SetMonthlyTable Trans=FilteredTransactions />
                            <br style="clear:both;" />
                            <!-- Ideal Emergency Fund-->
                            <IdealEmergencyFund />
                        </div>
                    </div>
                    <br />
                    <div style="float:right; margin-bottom:1vh;margin-right:1vw;">
                        <select class="custom-select" @bind="SelectedMonth" title="Pick a Download Timeframe " style="width:8vw">
                            <option value="@string.Empty" selected disabled="disabled">(Choose a download)</option>
                            <option value="All">All</option>
                            @foreach (var dt in FoundMonths)
                            {
                                <option value="@dt">@dt</option>
                            }
                        </select>
                        <select class="custom-select" @bind="SelectedYear" title="Pick a Download Timeframe " style="width:5vw">
                            <option value="@string.Empty" selected disabled="disabled">(Choose a download)</option>
                            <option value="All">All</option>
                            @foreach (var dt in FoundYears)
                            {
                                <option value="@dt">@dt</option>
                            }
                        </select>
                        @if (ValidChoice)
                        {
                            <button class="btn btn-secondary" style="margin:1vw" @onclick="DownloadCSV"><span class="oi oi-data-transfer-download"></span> CSV</button>
                        }
                        else
                        {
                            <label style="color:red">No values for this combination.</label>
                        }
                    </div>
                </div>

            </div>
        </div>
    }
    else
    {
        <BalanceTray @ref=@GlobalBT OnReportClick=ToggleReports OnChartClick=ToggleChartBtn OnEnvelopeClick=ToggleGoals />
        @if (Goals)
        {
            <div style="display:inline-block;width:100%">
                <button class="btn btn-info" style="width:100%;align-self:center;color:black" @onclick=@(() => ToggleStash())>Stash Cash</button>
                <br style="clear:both" />
                <br style="clear:both" />
                <button class="btn btn-danger" style="width:100%;align-self:center;color:black" @onclick=@(() => ToggleCash())>Cash Out</button>
                <br />
                <br />
                <div class="flex-c">
                    <div style="font-size:5vw;text-align:center">
                        Total Goals:
                        <span> @Constants.Pretty(Envelopes.Sum(e => e.Goal))</span>
                    </div>
                    <div style="text-align:center;font-size:5vw;">
                        Total Saved:
                        <span> @Constants.Pretty(Envelopes.Sum(e => e.TotalAmount))</span>
                    </div>
                    <hr />
                    <div class="flex-r" style="font-size:4vw;justify-content:space-evenly">
                        <div class="flex-c" style="font-size:4vw;justify-content:space-between">
                            <div style="text-align:center;">@Constants.Person1 Saved:</div>
                            <div style="text-align:center;"> @Constants.Pretty(Envelopes.Sum(e => e.Person1Amount))</div>
                        </div>
                        <div class="flex-c" style="font-size:4vw;justify-content:space-between">
                            <div style="text-align:center;">@Constants.Person2 Saved:</div>
                            <div style="text-align:center;"> @Constants.Pretty(Envelopes.Sum(e => e.Person2Amount))</div>
                        </div>
                    </div>
                </div>
                <br />
                <div class="flex-r" style="flex-wrap:wrap;">
                    @foreach (var env in Envelopes)
                    {
                        <Envelope Name="@env.Name" Scale=40 Font_Size=5 Goal=@Math.Max(env.Goal,env.Person1Amount + env.Person2Amount)
                                  Saved=@env.TotalAmount FlipClick="true"
                                  Person1Account="@(new BalanceRepoCaller().GetName(env.Person1Account))"
                                  Person2Account="@(new BalanceRepoCaller().GetName(env.Person2Account))"
                                  Person1Amount="@env.Person1Amount" Person2Amount="@env.Person2Amount" />
                    }
                </div>
                <br style="clear:both" />
                <br style="clear:both" />
            </div>
        }

        <AddExpense OnAddConfirm="Add" Added="Added" />

        @if (DataPoints != null && DataPoints.Count > 0)
        {
            <PopTray Id="mobile-spend" ShowWorth=!ShowChart ShowTxt="Show Spending Chart" HideTxt="Hide Spending Chart" TopButton=true>

                <Chart DPs=DataPoints BarClicked=FilterDate />
                <br />
                <br />
                <MonthlySpending Title="@(Constants.TheMonthsFromInt[DateTime.Now.Month] + " Transactions")"
                                 OnDeleteConfirm=@CloseModal TheBalance="@SelectedBalance" />
            </PopTray>

        }

        <br />

        <!-- Savings Goals-->
        <MonthlyGoalTracking ActualDynamicAmount=@ActualDynamic
                             ActualStaticAmount=@ActualStatic
                             ActualIncomeAmount=@ActualIncome
                             EnvelopeAmount=@EnvelopeExpenses />

        <br style="clear:both" />
        <br style="clear:both" />

        <!-- Dynamic Costs -->
        <div style="margin-left:1vw">
            <table>
                <tr>
                    <td colspan="4">
                        <ChartHorizontal DPs=@DynamicCostItems />
                    </td>
                </tr>
            </table>
        </div>

        <br />

        <!-- Set Monthly Costs Goals-->
        <SetMonthlyTable Trans=FilteredTransactions />

        <br style="clear:both" />
        <br />

        <!-- Ideal Emergency Fund-->
        <IdealEmergencyFund Mobile=true />

        <br style="clear:both" />
        <br />
    }
    @if (ViewReports)
    {
        <Reports Title="@(string.Format("{0} (By: {1})","Stubname", "Deez Nuts"))"
                 Text="Story" OnClose="@CloseModal">

        </Reports>
    }
    @if (StashCashBool)
    {
        <StashCash OnClose="@CloseModal">

        </StashCash>
    }
    @if (CashOutBool)
    {
        <CashOut OnClose="@CloseModal">

        </CashOut>
    }
}

@code {
    [CascadingParameter]
    public BalanceTray GlobalBT { get; set; }

    private bool Added { get; set; }

    private DateTime StartDate => DateTime.Now;
    private DateTime EndDate => new DateTime(StartDate.Year,
                                             StartDate.Month,
                                             DateTime.DaysInMonth(StartDate.Year,
                                             StartDate.Month));
    private int DaysLeft => Math.Ceiling((EndDate - StartDate).TotalDays) > 0 ? (int)Math.Ceiling((EndDate - StartDate).TotalDays + 1) : 1;

    private List<Transaction> Transactions;
    private List<Transaction> FilteredTransactions;
    private List<Balance> Balances;
    private List<Security> Securities;
    private List<DynamicCostItem> DynamicCostItems;

    private string SelectedBalance = "";
    private bool ValidChoice = true;
    private string selectedMonth = DateTime.Now.ToString("MMMM");
    private string selectedYear = DateTime.Now.Year.ToString();
    private string SelectedMonth
    {
        get { return selectedMonth; }
        set
        {
            selectedMonth = value;
            ValidChoice = Constants.DR.IsItValidMonthYear(selectedMonth + " " + selectedYear);
            StateHasChanged();
        }

    }
    private string SelectedYear
    {
        get { return selectedYear; }
        set
        {
            selectedYear = value;
            ValidChoice = Constants.DR.IsItValidMonthYear(selectedMonth + " " + selectedYear);
            StateHasChanged();
        }
    }
    private string SelectedDownload => SelectedMonth + " " + SelectedYear;

    private string MonthYear => (DateTime.Now.ToString("MMMM") + " " + DateTime.Now.Year.ToString());

    private string ErrorMsg = string.Empty;

    private bool ShowChart;

    private bool ShowTutorial;

    private List<string> FoundMonths => GetMonths();
    private List<string> FoundYears => GetYears();
    private List<DataPoint> DataPoints = new List<DataPoint>();

    private bool goals;
    private bool Goals { get { return goals; } set { goals = value; if (!Constants.Mobile) GlobalBT.SetGoals(goals); } }

    private bool filtered;

    private bool ViewReports { get; set; }
    private bool StashCashBool { get; set; }
    private bool CashOutBool { get; set; }

    private bool hideEnvExp = true;
    private bool HideEnvExp
    {
        get { return hideEnvExp; }
        set
        {
            hideEnvExp = value;
            SetDataPoints();

        }
    }

    private List<Transaction> MonthlyTransactions = new List<Transaction>();
    private double ActualStatic => MonthlyTransactions.Where(ft => ft.ExpenseType == "Static Cost").Sum(ft => ft.TotalAmount);
    private double ActualIncome => MonthlyTransactions.Where(ft => ft.ExpenseType == "Income").Sum(ft => ft.TotalAmount);
    private double ActualDynamic => DynamicCostItems.Sum(dci => dci.Amount) - DynamicCostItems.Sum(dci => dci.Left);

    private double ProjectedExpense => Constants.StaticMonthlyCosts.Sum(ta => ta.TotalAmount) +
                                        DynamicCostItems.Sum(d => d.Amount);
    private double ActualExpense => FilteredTransactions.Where(ft => CostMoney(ft)).Sum(ft => ft.TotalAmount);
    private double EnvelopeExpenses => FilteredTransactions.Where(ft => ft.ExpenseType == "Envelope").Sum(ft => ft.TotalAmount)
                                        + FilteredTransactions.Where(ft => IsAnEnvelope(ft)).Sum(ft => ft.TotalAmount);

    private List<Balance> BalancesP1 => Balances.Where(b => b.Person == Constants.Person1 | b.Person.ToUpper() == "JOINT").ToList();
    private List<Balance> BalancesP2 => Balances.Where(b => b.Person == Constants.Person2 | b.Person.ToUpper() == "JOINT").ToList();
    private List<string> ETs => FillEts();

    private bool Disabled;

    private void SetBalance(Balance bal)
    {
        if (SelectedBalance == bal.Name)
        {
            SelectedBalance = "";
            ResetFilters();
        }
        else
        {
            SelectedBalance = bal.Name;
            ShowChart = true;
            FilterBalance(SelectedBalance);
        }

        StateHasChanged();
    }

    private List<string> FillEts()
    {
        List<string> retStr = new List<string>();
        retStr.Add("Income");
        retStr.Add("Static Cost");
        retStr.Add("Envelope");
        retStr.Add("Equity");
        retStr.Add("Debt");
        retStr.Add("Transfer");

        foreach (var dci in Constants.DynamicCostItems)
            if (!retStr.Contains(dci.Name))
                retStr.Add(dci.Name);

        // Purposefully neglect Envelopes
        return retStr;
    }

    private bool IsAnEnvelope(Transaction t)
    {
        if (t.ExpenseType == "Envelope") return true;

        if (!ETs.Contains(t.ExpenseType))
            return true;

        return false;
    }

    private bool CostMoney(Transaction ft)
    {
        List<string> IgnoreThese = new List<string> { "Debt", "Transfer", "Equity", "Income" };

        if (HideEnvExp)
        {
            IgnoreThese.Add("Envelope");
            if (IsAnEnvelope(ft))
                return false;

            foreach (var env in Envelopes)
            {
                IgnoreThese.Add(env.Name);
            }
        }

        if (IgnoreThese.Contains(ft.ExpenseType))
            return false;

        return true;
    }

    private List<Data.Envelope> Envelopes { get; set; }

    string GoalTxt = "GOALS";

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeAsync<bool>("TurnOnScroll");

        Balances = Constants.catchAll.Balances;
        Transactions = Constants.catchAll.Transactions;
        FilteredTransactions = new List<Transaction>(Transactions);

        FilteredTransactions = FilteredTransactions.Where(t => t.MonthYear() == Constants.MonthYear()).OrderByDescending(t => t.DateOfTransaction).ToList();
        MonthlyTransactions = new List<Transaction>(FilteredTransactions);
        ErrorMsg = string.Empty;
        Balances.Sort(Constants.CompareBalance);

        Envelopes = Constants.Envelopes.OrderByDescending(e => e.TotalAmount / e.Goal).ToList();

        DynamicCostItems = new List<DynamicCostItem>(Constants.DynamicCostItems);


        Goals = false;

        GoalTxt = Goals ? "GOALS (ON)" : "GOALS";

        /*
        * string TutorialSeen = await ReadCookies("TutorialSeen");
       if (string.IsNullOrEmpty(TutorialSeen))
           ShowTutorial = true;
           else
           ShowTutorial = false;
            */

        SetDataPoints();

        if (!Constants.Mobile)
        {
            GlobalBT.OnSlotClick += SetBalance;
            GlobalBT.OnEnvelopeClick += ToggleGoals;
            GlobalBT.OnReportClick += ToggleReports;
            GlobalBT.OnChartClick += ToggleChartBtn;
        }
        Constants.TransactionsChanged += TransactionsUpdated;
        Constants.EnvelopesChanged += EnvelopesUpdated;

        StateHasChanged();
    }

    private string Pretty(double num)
    {
        return Constants.Pretty(num);
    }

    private List<string> GetMonths()
    {
        return IndexRunner.GetMonths();
    }

    private List<string> GetYears()
    {
        return IndexRunner.GetYears();
    }

    private void FilterDate(string filter) { Filter(filter, true); }
    private void FilterBalance(string filter) { Filter(filter, false, true); }
    private void Filter(string filter, bool date = false, bool balance = false)
    {
        if (filtered)
            ResetFilters();

        if (!string.IsNullOrEmpty(filter))
        {
            if (date)
                FilteredTransactions = FilteredTransactions.Where(ft => ft.DateOfTransaction.ToShortDateString() == filter).ToList();
            else if (balance)
                FilteredTransactions = FilteredTransactions.Where(ft => ft.PaidWithPerson1 == filter ||
                                                                        ft.PaidWithPerson2 == filter ||
                                                                        ft.PaidOffPerson1 == filter ||
                                                                        ft.PaidOffPerson2 == filter).ToList();
            else
                FilteredTransactions = FilteredTransactions.Where(ft => ft.ExpenseType == filter).ToList();

            filtered = true;
        }

        StateHasChanged();
    }

    private void Filter(DynamicCostItem filter)
    {
        var catcher = IndexRunner.Filter(ref filter, Transactions, FilteredTransactions, ref filtered);
        Transactions = catcher[0];
        FilteredTransactions = catcher[1];

        StateHasChanged();
    }

    private void ResetFilters(bool BtnPress = false)
    {
        FilteredTransactions = Transactions.Where(t => t.MonthYear() == Constants.MonthYear()).OrderByDescending(t => t.DateOfTransaction).ToList();
        filtered = false;

        if (BtnPress)
        {
            string FilterIndicatorTxt = " (ON)";
            for (int index = 0; index < DynamicCostItems.Count; index++)
            {
                if (DynamicCostItems[index].Name.Contains(FilterIndicatorTxt))
                {
                    DynamicCostItems[index].Name = DynamicCostItems[index].Name.Replace(FilterIndicatorTxt, "");
                }
            }
        }
    }
    private void SetDataPoints(bool UpdateState = false)
    {
        DataPoints = new List<DataPoint>();

        if (FilteredTransactions != null && FilteredTransactions.Count > 0)
        {
            Transaction tr = FilteredTransactions[0];
            DateTime PreviousDate = tr.DateOfTransaction;
            double MonthAmount = 0;

            List<string> NotExpenseOrIncome = new List<string> { "Debt", "Transfer", "Equity" };

            if (HideEnvExp)
            {
                NotExpenseOrIncome.Add("Envelope");

                foreach (var env in Envelopes)
                {
                    NotExpenseOrIncome.Add(env.Name);
                }
            }

            string[] IncomeOrEquity = new string[] { "Income", "Equity" };

            if (IncomeOrEquity.Contains(tr.ExpenseType))
                MonthAmount = tr.TotalAmount;
            else if (!NotExpenseOrIncome.Contains(tr.ExpenseType))
                MonthAmount = HideEnvExp & IsAnEnvelope(tr) ? 0 : tr.TotalAmount * -1;

            bool lastSwitch = false; // true if there is only 1 transaction for this date, and it's the last one

            for (int index = 1; index < FilteredTransactions.Count; index++)
            {
                if (FilteredTransactions[index].DateOfTransaction.ToShortDateString() != PreviousDate.ToShortDateString())
                {
                    var newDP = new DataPoint(PreviousDate.Day.ToString(), MonthAmount);
                    newDP.Negative = newDP.Value < 0;
                    newDP.Value = Math.Abs(newDP.Value);

                    if (newDP.Value != 0)
                        DataPoints.Add(newDP);

                    lastSwitch = true;
                    PreviousDate = FilteredTransactions[index].DateOfTransaction;
                    if (IncomeOrEquity.Contains(FilteredTransactions[index].ExpenseType))
                        MonthAmount = FilteredTransactions[index].TotalAmount;
                    else if (!NotExpenseOrIncome.Contains(FilteredTransactions[index].ExpenseType))
                        MonthAmount = HideEnvExp & IsAnEnvelope(FilteredTransactions[index]) ? 0 : FilteredTransactions[index].TotalAmount * -1;
                    else
                        MonthAmount = 0;
                }
                else
                {
                    if (IncomeOrEquity.Contains(FilteredTransactions[index].ExpenseType))
                        MonthAmount += FilteredTransactions[index].TotalAmount;
                    else if (!NotExpenseOrIncome.Contains(FilteredTransactions[index].ExpenseType))
                        MonthAmount -= HideEnvExp & IsAnEnvelope(FilteredTransactions[index]) ? 0 : FilteredTransactions[index].TotalAmount;

                    lastSwitch = false;

                    if (index == FilteredTransactions.Count - 1)
                    {
                        var newDP = new DataPoint(PreviousDate.Day.ToString(), MonthAmount);
                        newDP.Negative = newDP.Value < 0;
                        newDP.Value = Math.Abs(newDP.Value);

                        if (newDP.Value != 0)
                            DataPoints.Add(newDP);
                    }
                }

            }
            if (lastSwitch)
            {
                int last = FilteredTransactions.Count - 1;
                var newDP = new DataPoint(PreviousDate.Day.ToString(), MonthAmount);
                newDP.Negative = newDP.Value < 0;
                newDP.Value = Math.Abs(newDP.Value);

                if (newDP.Value != 0)
                    DataPoints.Add(newDP);
            }
            DataPoints.Reverse();
        }

        if (UpdateState)
            StateHasChanged();
    }
    private async void AddConfirm()
    {
        SetDataPoints();
        if (!Constants.Mobile)
            GlobalBT.RefreshBalances();
        else
            Balances.Sort(Constants.CompareBalance);

        Added = true;
        await Task.Delay(2000);
        Added = false;
        StateHasChanged();
    }
    private async void CloseModal(bool accepted)
    {
        ViewReports = false;
        StashCashBool = false;
        CashOutBool = false;

        if (accepted)
        {
            Transactions = Constants.Transactions;
            FilteredTransactions = Transactions.Where(t => t.MonthYear() == Constants.MonthYear()).OrderByDescending(t => t.DateOfTransaction).ToList();
            Balances = Constants.Balances;
            Balances.Sort(Constants.CompareBalance);
        }

        await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
    }
    private async void CloseTutModal(bool DontShowAgain)
    {
        if (DontShowAgain)
            await WriteCookieAsync("TutorialSeen", "YES", 1000);

        ShowTutorial = false;
        await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
    }
    protected async Task<string> ReadCookies(string CookieName)
    {
        string response;
        try
        {
            response = await JSRuntime.InvokeAsync<string>("ReadCookie", CookieName);
        }
        catch (Exception e)
        {
            response = null;
        }

        return response;
    }

    public async Task WriteCookieAsync(string name, string value, double days)
    {
        var test = await JSRuntime.InvokeAsync<object>("WriteCookie", name, value, days);
    }
    private void ToggleChartBtn()
    {
        if (!ShowChart)
        {
            ResetFilters();
            FilteredTransactions = new List<Transaction>(Constants.catchAll.Transactions);
            FilteredTransactions = FilteredTransactions.Where(t => t.MonthYear() == Constants.MonthYear()).OrderByDescending(t => t.DateOfTransaction).ToList();
            SelectedBalance = "";
        }
        ShowChart = !ShowChart;
        StateHasChanged();
    }
    private void ToggleGoals()
    {
        Goals = !Goals;
    }
    private async void ToggleReports()
    {
        ViewReports = !ViewReports;
        if (ViewReports)
            await JSRuntime.InvokeAsync<bool>("TurnOffScroll");
        else
        {
            DynamicCostItems = new List<DynamicCostItem>(Constants.DynamicCostItems);
            await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
        }
        StateHasChanged();

    }
    private async void ToggleStash()
    {
        StashCashBool = !StashCashBool;
        if (StashCashBool)
            await JSRuntime.InvokeAsync<bool>("TurnOffScroll");
        else
            await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
    }
    private async void ToggleCash()
    {
        CashOutBool = !CashOutBool;
        if (CashOutBool)
            await JSRuntime.InvokeAsync<bool>("TurnOffScroll");
        else
            await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
    }
    async Task DownloadCSV()
    {
        if (string.IsNullOrEmpty(SelectedDownload))
            return;

        string fileString = CSVBuilder.Build(await TransactionRepo.GetTransactionsAsync("ALL"), SelectedDownload);

        byte[] file = System.Text.Encoding.UTF8.GetBytes(fileString);
        string FileSaveName = SelectedDownload == "All" ? "All_Transactions.csv" : SelectedDownload.Replace(" ", "_") + "_Transactions.csv";
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", FileSaveName, "text/csv", file);
    }
    private async void Add(NewTransaction addIt)
    {
        if (addIt == null)
            return;

        var nt = IndexRunner.Add(addIt);
        JSRuntime.InvokeAsync<string>("console.log", "DateAddIt: " + addIt.DateOfTransaction.ToString());
        JSRuntime.InvokeAsync<string>("console.log", "DateNTIt: " + nt.DateOfTransaction.ToString());

        if (nt != null)
        {
            // TransactionRepo sets everything in Constants
            Transactions = await TransactionRepo.AddOrUpdateAsync(nt);
            FilteredTransactions = Transactions.Where(t => t.MonthYear() == Constants.MonthYear()).OrderByDescending(t => t.DateOfTransaction).ToList();

            Balances = Constants.Balances;
            Envelopes = Constants.Envelopes.OrderByDescending(e => e.TotalAmount / e.Goal).ToList(); ;

            AddConfirm();
        }

        Disabled = false;
        StateHasChanged();
    }

    private void TransactionsUpdated(object sender, List<Transaction> e)
    {
        Transactions = new List<Transaction>(e);

        FilteredTransactions = e.Where(t => t.MonthYear() == Constants.MonthYear()).OrderByDescending(t => t.DateOfTransaction).ToList();
        MonthlyTransactions = new List<Transaction>(FilteredTransactions);

        StateHasChanged();
    }

    private void EnvelopesUpdated(object sender, List<Data.Envelope> e)
    {
        Envelopes = e.OrderByDescending(ev => ev.TotalAmount / ev.Goal).ToList();
        Envelopes = new List<Data.Envelope>(Envelopes);

        StateHasChanged();
    }

    public void Dispose()
    {
        if (!Constants.Mobile)
        {
            GlobalBT.OnSlotClick -= SetBalance;
            GlobalBT.OnEnvelopeClick -= ToggleGoals;
            GlobalBT.OnReportClick -= ToggleReports;
            GlobalBT.OnChartClick -= ToggleChartBtn;
        }
        Constants.TransactionsChanged -= TransactionsUpdated;
        Constants.EnvelopesChanged -= EnvelopesUpdated;
    }
}