@page "/"
@using BetterBudgetWeb.Data
@using BetterBudgetWeb.MainMenuItems
@using BetterBudgetWeb.MainMenuItems.Chart
@using BetterBudgetWeb.Repo
@using BetterBudgetWeb.Runner
@inject IJSRuntime JSRuntime

<style>
    option {
        color: black;
    }

    select {
        color: black;
    }

    input {
        color: black;
    }

    button {
        color: black;
    }
</style>

<PageTitle>Index</PageTitle>
<div class="@AddConfirmClass" style="display:flex;justify-content:center">
    @if (AddConfirmClass != "collapse")
    {
        <div style="display:flex;
                justify-content:center;
                margin:auto 0;
                width:fit-content;
                padding: 1vw;
                height:100%;
                background-color:green;
                border-radius:5px;
                color:white;
                text-align:center;
                pointer-events:none;
                z-index:10;">
            <span>Add was successfully completed</span><span>&#160;&#10003;&#10003;&#10003;</span>
        </div>
    }
</div>

<h1 style="text-align:center;color:@GoodOrBad(Person1NetWorth + Person2NetWorth)">TOTAL NET WORTH: @(Pretty(Person1NetWorth + Person2NetWorth))</h1>
<div>
    <h2 style="float:left;text-align:center">
        <span>@($"{Constants.Person1}'s Net Worth:")</span> <span style="color:@GoodOrBad(Person1NetWorth)">@(Pretty(Person1NetWorth))</span>
    </h2>

    <h2 style="float:right;text-align:center">
        <span>@($"{Constants.Person2}'s Net Worth:")</span> <span style="color:@GoodOrBad(Person2NetWorth)">@(Pretty(Person2NetWorth))</span>
    </h2>
</div>
<br />
<br />
@if (!mobile)
{
    <div style="display:flex;justify-content:center;flex-wrap:wrap;width:95vw;">
        @if (Balances != null)
        {
            @foreach (var balance in Balances.OrderByDescending(b => b.Value))
            {
                <BalanceBlock TheBalance="@balance"
                  OnClick="@(() => FilterBalance(balance.Name))"
                  OnDelete="@(() => ShowDeleteBalBtn(balance))" />
            }

        }
    </div>
    <br style="clear:both;" />
    @if (DataPoints != null && DataPoints.Count > 0)
    {
        <button class="spendchart-btn" @onclick="@ToggleChartBtn">
            @if (!ShowChart)
            {
                <h2>Spending Chart&nbsp;<i class="arrow right"></i></h2>
            }
            else
            {
                <h2>Spending Chart&nbsp;&nbsp;<i class="arrow down"></i></h2>
            }
        </button>
        @if (ShowChart)
        {
            <Chart DPs=DataPoints BarClicked=FilterDate />
        }

        <br />
        <br />
        <br />
    }
    <div style="display:flex;justify-content:start;">
        <!-- Monthly Spending -->
    <div style="width:50%;float:left; margin-right:1vw; margin-bottom:2vh;">
            <MonthlySpending Mobile=mobile
                         OnAddConfirm=AddConfirm
                         OnDeleteConfirm=DeleteConfirm
                         @bind-Transactions=Transactions
                         @bind-FilteredTransactions=FilteredTransactions
                         @bind-Balances=Balances />
        </div>
        <div style="display:inline-block;margin-right:1vw;">

            <!-- Dynamic Costs -->
        <div style="width:100%; margin-right:1vw;">
                <table>
                    <tr>
                        <th colspan="4" style="background-color:magenta;color:white;"><i>Dynamic Monthly Costs</i></th>
                    </tr>
                    <tr>
                        <th>Expense</th>
                        <th>Total Budget Amount</th>
                        <th>Left This Month</th>
                        <th style="padding:0 5px">Spend/Day</th>
                    </tr>
                    @foreach (var dci in Constants.DynamicCostItems)
                    {
                        @if (dci.Name.Contains("EXAMPLE DATA"))
                        {
                            <tr>
                                <td style="padding:.5vw 1vw;cursor:pointer;" @onclick='() => Filter(dci)'><i>@dci.Name</i></td>
                                <td>@Pretty(dci.Amount)</td>
                                <td>@Pretty(dci.Left)</td>
                                <td>@Pretty(dci.Left/DaysLeft)</td>
                            </tr>
                        }
                        else
                        {
                            <tr>
                                <td style="padding:.5vw 1vw;cursor:pointer;" @onclick='() => Filter(dci)'>@dci.Name</td>
                                <td>@Pretty(dci.Amount)</td>
                                <td>@Pretty(dci.Left)</td>
                                <td>@Pretty(dci.Left/DaysLeft)</td>
                            </tr>
                        }
                    }
                    <tr>
                        <td colspan="4">=</td>
                    </tr>
                    <tr>
                        <td><strong>Total</strong></td>
                        <td>@Pretty(Constants.DynamicCostItems.Sum(d => d.Amount))</td>
                        <td>@Pretty(Constants.DynamicCostItems.Sum(d => d.Left))</td>
                        <td>@Pretty(Constants.DynamicCostItems.Sum(d => d.Left)/DaysLeft)</td>
                    </tr>
                </table>
            </div>
            <!-- Savings Goals-->
        <SavingsGoalsTable />

            <!-- Ideal Emergency Fund-->
        <IdealEmergencyFund OneMonthPerson1="@(Constants.DynamicCostItems.Sum(d => d.Person1Amount) + Constants.StaticMonthlyCosts.Sum(smc => smc.Person1Amount))"
                            OneMonthPerson2="@(Constants.DynamicCostItems.Sum(d => d.Person2Amount) + Constants.StaticMonthlyCosts.Sum(smc => smc.Person2Amount))" />
        </div>
        <!-- Set Monthly Costs Goals-->
    <div style="display:inline-block">
            <SetMonthlyTable Trans=Transactions />
            <br style="clear:both" />
            <br />
            <div style="float:right; margin-bottom:1vh;margin-right:1vw;">
                <select class="custom-select" @bind="SelectedDownload" title="Pick a Download Timeframe ">
                    <option value="@string.Empty" selected disabled="disabled">(Choose a download)</option>
                    <option value="All">All</option>
                    @foreach (var dt in FoundMonths)
                    {
                        <option value="@dt">@dt</option>
                    }
                </select>
                <button class="btn btn-secondary" style="margin:1vw" @onclick="DownloadCSV">Download CSV file</button>
            </div>
        </div>
    </div>

    @if (ShowDeleteBal)
    {
        <DeleteConfirm Balan="@SelectedBalance"
               OnClose="@DeleteBalance">

        </DeleteConfirm>
    }
}
else
{
    <div style="display:flex;justify-content:center;flex-wrap:wrap;width:95vw;">
        @if (Balances != null)
        {
            @foreach (var balance in Balances.OrderByDescending(b => b.Value))
            {
                <BalanceBlock TheBalance="@balance" FontSize="5" />
            }

        }
    </div>
    <br />
    <br style="clear:both;" />
    @if (DataPoints != null && DataPoints.Count > 0)
    {
        <button class="spendchart-btn" @onclick="@ToggleChartBtn">
            @if (!ShowChart)
            {
                <h2 style="float:left;">Spending Chart&nbsp;<i class="arrow right"></i></h2>
            }
            else
            {
                <h2 style="float:left;">Spending Chart&nbsp;&nbsp;<i class="arrow down"></i></h2>
            }
        </button>
        @if (ShowChart)
        {
            <Chart DPs=DataPoints BarClicked=FilterDate Mobile=mobile />
        }

        <br />
        <br />
        <br />
    }
    <!-- Monthly Spending -->
    <div style="width:100%;float:left;margin-bottom:2vh;">
        <MonthlySpending Mobile=mobile
                     OnAddConfirm=AddConfirm
                     @bind-Transactions=Transactions
                     @bind-FilteredTransactions=FilteredTransactions
                     @bind-Balances=Balances />
    </div>

    <br />

    <!-- Dynamic Costs -->
    <div style="width:100%;">
        <table>
            <tr>
                <th colspan="4" style="background-color:magenta;font-size:3vw;"><i>Dynamic Monthly Costs</i></th>
            </tr>
            <tr>
                <th style="font-size:3vw;">Expense</th>
                <th style="font-size:3vw;">Total Budget Amount</th>
                <th style="font-size:3vw;">Left This Month</th>
                <th style="font-size:3vw;padding:0 5px">Spend/Day</th>
            </tr>
            @foreach (var dci in Constants.DynamicCostItems)
            {
                @if (dci.Name.Contains("EXAMPLE DATA"))
                {
                    <tr>
                        <td style="font-size:3vw;padding:.5vw 1vw;"><i>@dci.Name</i></td>
                        <td style="font-size:3vw;">@Pretty(dci.Amount)</td>
                        <td style="font-size:3vw;">@Pretty(dci.Left)</td>
                        <td style="font-size:3vw;">@Pretty(dci.Left/DaysLeft)</td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td style="font-size:3vw;padding:.5vw 1vw;">@dci.Name</td>
                        <td style="font-size:3vw;">@Pretty(dci.Amount)</td>
                        <td style="font-size:3vw;">@Pretty(dci.Left)</td>
                        <td style="font-size:3vw;">@Pretty(dci.Left/DaysLeft)</td>
                    </tr>
                }
            }
            <tr>
                <td style="font-size:3vw;" colspan="4">=</td>
            </tr>
            <tr>
                <td style="font-size:3vw;"><strong>Total</strong></td>
                <td style="font-size:3vw;">@Pretty(Constants.DynamicCostItems.Sum(d => d.Amount))</td>
                <td style="font-size:3vw;">@Pretty(Constants.DynamicCostItems.Sum(d => d.Left))</td>
                <td style="font-size:3vw;">@Pretty(Constants.DynamicCostItems.Sum(d => d.Left)/DaysLeft)</td>
            </tr>
        </table>
    </div>

    <br />

    <!-- Savings Goals-->
    <SavingsGoalsTable Mobile=true />

    <br />

    <!-- Ideal Emergency Fund-->
    <IdealEmergencyFund Mobile=true OneMonthPerson1="@(Constants.DynamicCostItems.Sum(d => d.Person1Amount) + Constants.StaticMonthlyCosts.Sum(smc => smc.Person1Amount))"
                    OneMonthPerson2="@(Constants.DynamicCostItems.Sum(d => d.Person2Amount) + Constants.StaticMonthlyCosts.Sum(smc => smc.Person2Amount))" />

    <br />

    <!-- Set Monthly Costs Goals-->
    <SetMonthlyTable Trans=FilteredTransactions Mobile=true />

    <br />
    <br />
}

@code {
    private DateTime StartDate => DateTime.Now;
    private DateTime EndDate => new DateTime(StartDate.Year,
                                             StartDate.Month,
                                             DateTime.DaysInMonth(StartDate.Year,
                                             StartDate.Month));
    private int DaysLeft => Math.Ceiling((EndDate - StartDate).TotalDays) > 0 ? (int)Math.Ceiling((EndDate - StartDate).TotalDays + 1) : 1;

    private List<Transaction> Transactions;
    private List<Transaction> FilteredTransactions;
    private List<Balance> Balances;
    private List<Security> Securities;
    private List<Monthly> Monthlies;
    private double Person1NetWorth => CalculateNetWorth(Constants.Person1);
    private double Person2NetWorth => CalculateNetWorth(Constants.Person2);

    private Balance SelectedBalance;
    private string SelectedDownload { get; set; } = (DateTime.Now.ToString("MMMM") + " " + DateTime.Now.Year.ToString());

    private bool ShowDeleteBal = false;

    private string MonthYear => (DateTime.Now.ToString("MMMM") + " " + DateTime.Now.Year.ToString());

    private string ErrorMsg = string.Empty;
    private bool mobile;

    private bool ShowChart;

    private List<string> FoundMonths => GetMonths();
    private List<DataPoint> DataPoints = new List<DataPoint>();

    private bool filtered;
    private string AddConfirmClass = "collapse";

    protected override async Task OnInitializedAsync()
    {
        mobile = await JSRuntime.InvokeAsync<bool>("isDevice");
        Balances = await BalanceRepo.GetBalancesAsync();
        Transactions = await TransactionRepo.GetTransactionsAsync();
        FilteredTransactions = new List<Transaction>(Transactions);
        FilteredTransactions = FilteredTransactions.Where(t => t.MonthYear() == Constants.MonthYear()).OrderByDescending(t => t.DateOfTransaction).ToList();
        Monthlies = await MonthlyRepo.GetMonthliesAsync();
        ErrorMsg = string.Empty;

        SetDataPoints();

        StateHasChanged();
    }

    private string GoodOrBad(double money)
    {
        return money <= 0 ? "red" : "forestgreen";
    }
    private string Pretty(double num)
    {
        return Constants.Pretty(num);
    }
    private void ShowDeleteBalBtn(Balance b)
    {
        SelectedBalance = b;
        ShowDeleteBal = true;
    }
    private async void DeleteBalance(bool accepted)
    {
        if (accepted)
        {
            Balances = await BalanceRepo.RemoveAsync(SelectedBalance);
        }
        ShowDeleteBal = false;
        StateHasChanged();
    }
    private double CalculateNetWorth(string person)
    {
        return IndexRunner.CalculateNetWorth(person, Balances);
    }

    private List<string> GetMonths()
    {
        return IndexRunner.GetMonths(Transactions);
    }

    private void FilterDate(string filter) { Filter(filter, true); }
    private void FilterBalance(string filter) { Filter(filter, false, true); }
    private void Filter(string filter, bool date = false, bool balance = false)
    {
        if (filtered)
            ResetFilters(true);
        else
        {
            if (date)
                FilteredTransactions = FilteredTransactions.Where(ft => ft.DateOfTransaction.ToShortDateString() == filter).ToList();
            else if (balance)
                FilteredTransactions = FilteredTransactions.Where(ft => ft.PaidWithPerson1 == filter ||
                                                                        ft.PaidWithPerson2 == filter ||
                                                                        ft.PaidOffPerson1 == filter ||
                                                                        ft.PaidOffPerson2 == filter).ToList();
            else
                FilteredTransactions = FilteredTransactions.Where(ft => ft.ExpenseType == filter).ToList();

            filtered = true;
        }
        StateHasChanged();
    }

    private void Filter(DynamicCostItem filter)
    {
        var catcher = IndexRunner.Filter(ref filter, Transactions, FilteredTransactions, ref filtered);
        Transactions = catcher[0];
        FilteredTransactions = catcher[1];

        StateHasChanged();
    }

    private void ResetFilters(bool BtnPress = false)
    {
        FilteredTransactions = Transactions.Where(t => t.MonthYear() == Constants.MonthYear()).OrderByDescending(t => t.DateOfTransaction).ToList();
        filtered = false;

        if (BtnPress)
        {
            string FilterIndicatorTxt = " (ON)";
            for (int index = 0; index < Constants.DynamicCostItems.Count; index++)
            {
                if (Constants.DynamicCostItems[index].Name.Contains(FilterIndicatorTxt))
                {
                    Constants.DynamicCostItems[index].Name = Constants.DynamicCostItems[index].Name.Replace(FilterIndicatorTxt, "");
                }
            }
            StateHasChanged();
        }
    }
    private void SetDataPoints(bool UpdateState = false)
    {
        DataPoints = new List<DataPoint>();

        if (FilteredTransactions != null && FilteredTransactions.Count > 0)
        {
            Transaction tr = FilteredTransactions[0];
            DateTime PreviousDate = tr.DateOfTransaction;
            double MonthAmount = 0;

            if (tr.ExpenseType == "Income")
                MonthAmount = tr.TotalAmount;
            else if (tr.ExpenseType != "Debt")
                MonthAmount = tr.TotalAmount * -1;

            for (int index = 1; index < FilteredTransactions.Count; index++)
            {
                if (FilteredTransactions[index].DateOfTransaction.ToShortDateString() != PreviousDate.ToShortDateString())
                {
                    var newDP = new DataPoint(PreviousDate.Day.ToString(), MonthAmount);
                    newDP.Negative = newDP.Value < 0;
                    newDP.Value = Math.Abs(newDP.Value);

                    if (newDP.Value != 0)
                        DataPoints.Add(newDP);

                    PreviousDate = FilteredTransactions[index].DateOfTransaction;
                    if (FilteredTransactions[index].ExpenseType == "Income")
                        MonthAmount = FilteredTransactions[index].TotalAmount;
                    else if (FilteredTransactions[index].ExpenseType != "Debt")
                        MonthAmount = FilteredTransactions[index].TotalAmount * -1;
                    else
                        MonthAmount = 0;
                }
                else
                {
                    if (FilteredTransactions[index].ExpenseType == "Income")
                        MonthAmount += FilteredTransactions[index].TotalAmount;
                    else if (FilteredTransactions[index].ExpenseType != "Debt")
                        MonthAmount -= FilteredTransactions[index].TotalAmount;

                    if (index == FilteredTransactions.Count - 1)
                    {
                        var newDP = new DataPoint(PreviousDate.Day.ToString(), MonthAmount);
                        newDP.Negative = newDP.Value < 0;
                        newDP.Value = Math.Abs(newDP.Value);

                        if (newDP.Value != 0)
                            DataPoints.Add(newDP);
                    }
                }

            }
            DataPoints.Reverse();
        }

        if (UpdateState)
            StateHasChanged();
    }
    private async void DeleteConfirm()
    {
        SetDataPoints(true);
    }
    private async void AddConfirm()
    {

        SetDataPoints();

        AddConfirmClass = "floaty";
        await Task.Delay(3000);

        AddConfirmClass = "floaty-rev";
        StateHasChanged();
    }
    private void ToggleChartBtn()
    {
        ShowChart = !ShowChart;
    }
    async Task DownloadCSV()
    {
        if (string.IsNullOrEmpty(SelectedDownload))
            return;

        string fileString = CSVBuilder.Build(Transactions, SelectedDownload);

        byte[] file = System.Text.Encoding.UTF8.GetBytes(fileString);
        string FileSaveName = SelectedDownload == "All" ? "All_Transactions.csv" : SelectedDownload.Replace(" ", "_") + "_Transactions.csv";
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", FileSaveName, "text/csv", file);
    }
}