@page "/"
@using BetterBudgetWeb.Data
@using BetterBudgetWeb.MainMenuItems
@using BetterBudgetWeb.MainMenuItems.Chart
@using BetterBudgetWeb.Repo
@using BetterBudgetWeb.Runner
@using BetterBudgetWeb.Shared.Tutorial
@inject IJSRuntime JSRuntime

<style>
    option {
        color: black;
    }

    select {
        color: black;
    }

    input {
        color: black;
    }

    button {
        color: black;
    }
</style>

<PageTitle>Index</PageTitle>
@if (Transactions == null)
{
    <div>Login successful. Pulling data...</div>
}
else
{
    <div class="@AddConfirmClass" style="display:flex;justify-content:center">
        @if (AddConfirmClass != "collapse")
        {
            <div style="display:flex;
                justify-content:center;
                margin:auto 0;
                width:fit-content;
                padding: 1vw;
                height:100%;
                background-color:green;
                border-radius:5px;
                color:white;
                text-align:center;
                pointer-events:none;
                z-index:10;">
                <span>Add was successfully completed</span><span>&#160;&#10003;&#10003;&#10003;</span>
            </div>
        }
    </div>


    @if (!Constants.Mobile)
    {
        <h1 style="text-align:center;color:@GoodOrBad(Person1NetWorth + Person2NetWorth)">TOTAL NET WORTH: @(Pretty(Person1NetWorth + Person2NetWorth))</h1>
        <div style="display:flex;flex-direction:row;justify-content:space-between;width:100%">
            <h2 style="text-align:center">
                <span>@($"{Constants.Person1}'s Net Worth:")</span> <span style="color:@GoodOrBad(Person1NetWorth)">@(Pretty(Person1NetWorth))</span>
            </h2>
            @if (Envelopes != null && Envelopes.Count > 0)
            {
                <Envelope Name="@GoalTxt" Scale=8 Font_Size=1 OnClick=@ToggleGoals />
            }

            <h2 style="text-align:center">
                <span>@($"{Constants.Person2}'s Net Worth:")</span> <span style="color:@GoodOrBad(Person2NetWorth)">@(Pretty(Person2NetWorth))</span>
            </h2>
        </div>
        <br />
        <div style="display:flex;justify-content:center;flex-wrap:wrap;width:70vw;margin:0 auto;">
            @if (Balances != null)
            {
                @foreach (var balance in Balances)
                {
                    <BalanceBlock TheBalance="@balance"
                                  OnClick="@(() => FilterBalance(balance.Name))"
                                  OnDelete="@(() => ShowDeleteBalBtn(balance))"
                                  IncludeGoals=@Goals />
                }

            }
        </div>
        <br style="clear:both;" />
        <br style="clear:both;" />
        <div style="display:flex;flex-direction:row;
                justify-content:@(DataPoints != null && DataPoints.Count > 0 ? "space-between" : "flex-end");width:100%">
            @if (DataPoints != null && DataPoints.Count > 0)
            {
                <button class="spendchart-btn" @onclick="@ToggleChartBtn">
                    @if (!ShowChart)
                    {
                        <h2>Spending Chart&nbsp;<i class="arrow right"></i></h2>
                    }
                    else
                    {
                        <h2>Spending Chart&nbsp;&nbsp;<i class="arrow down"></i></h2>
                    }
                </button>

            }
            @if (Constants.Transactions != null && Constants.Transactions.Count > 0)
            {
                <button class="btn btn-secondary" style="align-self:flex-end" @onclick=@(() => ToggleReports())>View Reports</button>
            }
        </div>
        @if (ShowChart)
        {
            <br />
            <div style="display:flex;flex-direction:row;justify-content:space-between;width:100%">
                <h2 style="text-align:center">
                    <span>Month Projected Expenses:</span> <span class="income-bad">@Constants.Pretty(ProjectedExpense)</span>
                </h2>
                @if (EnvelopeExpenses > 0)
                {
                    <div style="position: relative; top:.3vw; right:1vw; height:4vh; vertical-align:middle;display:flex;align-items:baseline;justify-content:center">
                        <span style='position:relative;top:.3vw;font-size:x-large;text-align:center;'>Envelopes (Include/Exclude):&nbsp;</span>
                        <label class="switch">
                            <input type="checkbox" @bind=HideEnvExp>
                            <span class="slider round"></span>
                        </label>
                    </div>
                }
                <h2 style="text-align:center">
                    <span>Month Actual Expenses:</span> <span class='@(ActualExpense > ProjectedExpense ? "income-bad" : "income-good")'>@Constants.Pretty(ActualExpense)</span>
                </h2>
            </div>
            <br />
            <Chart DPs=DataPoints BarClicked=FilterDate />
            <br />
            <br />
        }
        <br />

        <div style="display:flex;justify-content:start;">
            <!-- Monthly Spending -->
            <div style="width:50%;float:left; margin-right:1vw; margin-bottom:2vh;">
                <MonthlySpending OnAddConfirm=AddConfirm
                                 OnDeleteConfirm=DeleteConfirm
                                 OnEditConfirm=@(() => SetDataPoints(true))
                @bind-Envelopes=Envelopes
                @bind-Transactions=Transactions
                @bind-FilteredTransactions=FilteredTransactions
                @bind-Balances=Balances />
            </div>

            <br />
            <div style="display:inline-block;margin-right:1vw;">

                <!-- Dynamic Costs -->
                <div style="width:100%; margin-right:1vw;">
                    <table>
                        <tr>
                            <th colspan="4" style="background-color:magenta;color:white;"><i>Dynamic Monthly Costs</i></th>
                        </tr>
                        <tr>
                            <th>Expense</th>
                            <th>Total Budget Amount</th>
                            <th>Left This Month</th>
                            <th style="padding:0 5px">Spend/Day</th>
                        </tr>
                        @foreach (var dci in DynamicCostItems)
                        {
                            @if (dci.Name.Contains("EXAMPLE DATA"))
                            {
                                <tr>
                                    <td style="padding:.5vw 1vw;cursor:pointer;" @onclick='() => Filter(dci)'><i>@dci.Name</i></td>
                                    <td>@Pretty(dci.Amount)</td>
                                    <td>@Pretty(dci.Left)</td>
                                    <td>@Pretty(dci.Left/DaysLeft)</td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td style="padding:.5vw 1vw;cursor:pointer;" @onclick='() => Filter(dci)'>@dci.Name</td>
                                    <td style="padding:.5vw 1vw;">@Pretty(dci.Amount)</td>
                                    <td style="padding:.5vw 1vw;">@Pretty(dci.Left)</td>
                                    <td>@Pretty(dci.Left/DaysLeft)</td>
                                </tr>
                            }
                        }
                        <tr>
                            <td colspan="4">=</td>
                        </tr>
                        <tr>
                            <td><strong>Total</strong></td>
                            <td>@Pretty(DynamicCostItems.Sum(d => d.Amount))</td>
                            <td>@Pretty(DynamicCostItems.Sum(d => d.Left))</td>
                            <td>@Pretty(DynamicCostItems.Sum(d => d.Left)/DaysLeft)</td>
                        </tr>
                    </table>
                </div>

                @if (Goals)
                {
                    <!-- Set Monthly Costs Goals-->
                    <br />
                    <SetMonthlyTable Trans=FilteredTransactions />
                    <br style="clear:both" />
                }

                <!-- Savings Goals-->
                <MonthlyGoalTracking ActualDynamicAmount=@ActualDynamic 
                                        ActualStaticAmount=@ActualStatic
                                        ActualIncomeAmount=@ActualIncome
                                        EnvelopeAmount=@EnvelopeExpenses />

                <!-- Ideal Emergency Fund-->
                <IdealEmergencyFund />


                <br />
            </div>
            @if (!Goals)
            {
                <!-- Set Monthly Costs Goals-->
                <div style="display:inline-block">
                    <SetMonthlyTable Trans=FilteredTransactions />
                    <br style="clear:both" />
                    <br />
                    <div style="float:right; margin-bottom:1vh;margin-right:1vw;">
                        <select class="custom-select" @bind="SelectedMonth" title="Pick a Download Timeframe " style="width:8vw">
                            <option value="@string.Empty" selected disabled="disabled">(Choose a download)</option>
                            <option value="All">All</option>
                            @foreach (var dt in FoundMonths)
                            {
                                <option value="@dt">@dt</option>
                            }
                        </select>
                        <select class="custom-select" @bind="SelectedYear" title="Pick a Download Timeframe " style="width:5vw">
                            <option value="@string.Empty" selected disabled="disabled">(Choose a download)</option>
                            <option value="All">All</option>
                            @foreach (var dt in FoundYears)
                            {
                                <option value="@dt">@dt</option>
                            }
                        </select>
                        @if (ValidChoice)
                        {
                            <button class="btn btn-secondary" style="margin:1vw" @onclick="DownloadCSV"><span class="oi oi-data-transfer-download"></span> CSV</button>
                        }
                        else
                        {
                            <label style="color:red">No values for this combination.</label>
                        }
                    </div>
                </div>
            }
            else
            {
                <div style="display:inline-block">
                    <button class="btn btn-info" style="width:100%;align-self:center;color:black" @onclick=@(() => ToggleStash())>Stash Cash</button>
                    <br style="clear:both" />
                    <br style="clear:both" />
                    <button class="btn btn-danger" style="width:100%;align-self:center;color:black" @onclick=@(() => ToggleCash())>Cash Out</button>
                    <br />
                    <br />

                    <div style="display:flex;flex-direction:column;justify-content:center">
                        <div style="font-size:1.5vw;text-align:center">
                            Total Goals:
                            <span> @Constants.Pretty(Envelopes.Sum(e => e.Goal))</span>
                        </div>
                        <div style="text-align:center;font-size:1.5vw;">
                            Total Saved:
                            <span> @Constants.Pretty(Envelopes.Sum(e => e.TotalAmount))</span>
                        </div>
                        <hr />
                        <div style="font-size:1.25vw;display:flex;flex-direction:row;justify-content:space-evenly">
                            <div style="font-size:1.25vw;display:flex;flex-direction:column;justify-content:space-between">
                                <div style="text-align:center;">@Constants.Person1 Saved:</div>
                                <div style="text-align:center;"> @Constants.Pretty(Envelopes.Sum(e => e.Person1Amount))</div>
                            </div>
                            <div style="font-size:1.25vw;display:flex;flex-direction:column;justify-content:space-between">
                                <div style="text-align:center;">@Constants.Person2 Saved:</div>
                                <div style="text-align:center;"> @Constants.Pretty(Envelopes.Sum(e => e.Person2Amount))</div>
                            </div>
                        </div>
                    </div>
                    <br />
                    <div style="font-size:3vw;display:flex;flex-direction:row;flex-wrap:wrap;justify-content:center">
                        @foreach (var env in Envelopes)
                        {
                            <Envelope Name="@env.Name" Scale=11 Font_Size=1.375 Goal=@env.Goal Saved=@env.TotalAmount
                                      FlipClick="true"
                                      Person1Account="@(new BalanceRepoCaller().GetName(env.Person1Account))"
                                      Person2Account="@(new BalanceRepoCaller().GetName(env.Person2Account))"
                                      Person1Amount="@env.Person1Amount"
                                      Person2Amount="@env.Person2Amount" />
                        }
                    </div>
                    <br />
                    @if (Goals)
                    {
                        <div style="float:right; margin-bottom:1vh;margin-right:1vw;">
                            <select class="custom-select" @bind="SelectedMonth" title="Pick a Download Timeframe " style="width:8vw">
                                <option value="@string.Empty" selected disabled="disabled">(Choose a download)</option>
                                <option value="All">All</option>
                                @foreach (var dt in FoundMonths)
                                {
                                    <option value="@dt">@dt</option>
                                }
                            </select>
                            <select class="custom-select" @bind="SelectedYear" title="Pick a Download Timeframe " style="width:5vw">
                                <option value="@string.Empty" selected disabled="disabled">(Choose a download)</option>
                                <option value="All">All</option>
                                @foreach (var dt in FoundYears)
                                {
                                    <option value="@dt">@dt</option>
                                }
                            </select>
                            @if (ValidChoice)
                            {
                                <button class="btn btn-secondary" style="margin:1vw" @onclick="DownloadCSV"><span class="oi oi-data-transfer-download"></span> CSV</button>
                            }
                            else
                            {
                                <label style="color:red">No values for this combination.</label>
                            }
                        </div>
                    }
                </div>
            }
        </div>

        @if (ShowDeleteBal)
        {
            <DeleteConfirm Balan="@SelectedBalance"
                           OnClose="@DeleteBalance">

            </DeleteConfirm>
        }
    }
    else
    {
        <h1 style="text-align:center;color:@GoodOrBad(Person1NetWorth + Person2NetWorth)">TOTAL NET WORTH: @(Pretty(Person1NetWorth + Person2NetWorth))</h1>
        <div>
            <h2 style="float:left;text-align:center">
                <span>@($"{Constants.Person1}'s Net Worth:")</span> <span style="color:@GoodOrBad(Person1NetWorth)">@(Pretty(Person1NetWorth))</span>
            </h2>

            <h2 style="float:right;text-align:center">
                <span>@($"{Constants.Person2}'s Net Worth:")</span> <span style="color:@GoodOrBad(Person2NetWorth)">@(Pretty(Person2NetWorth))</span>
            </h2>
        </div>
        <br />
        <br />
        <div style="display:flex;justify-content:center;flex-wrap:wrap;width:95vw;">
            @if (Balances != null)
            {
                @foreach (var balance in Balances)
                {
                    <BalanceBlock TheBalance="@balance" FontSize="5" />
                }
            }
        </div>
        <br />
        <br style="clear:both;" />
        <br style="clear:both;" />
        @if (Constants.Transactions != null && Constants.Transactions.Count > 0)
        {
            <div style="display:flex;justify-content:center">
                <button class="btn btn-secondary" @onclick=@(() => ToggleReports())>View Reports</button>
            </div>
            <br style="clear:both;" />
            <br style="clear:both;" />
        }
        @if (DataPoints != null && DataPoints.Count > 0)
        {
            <button class="spendchart-btn" style="width:100%" @onclick="@ToggleChartBtn">
                @if (!ShowChart)
                {
                    <h2 style="float:left;">Spending Chart&nbsp;<i class="arrow right"></i></h2>
                }
                else
                {
                    <h2 style="float:left;">Spending Chart&nbsp;&nbsp;<i class="arrow down"></i></h2>
                }
            </button>
            @if (ShowChart)
            {
                <!-- Monthly Expenses -->
                @if (EnvelopeExpenses > 0)
                {
                    <div style="position: relative; top:.3vw; right:1vw; height:4vh; vertical-align:middle;display:flex;
                                align-items:center;justify-content:center">
                        <span style='position:relative;top:.3vw;font-size:large;text-align:center;'>Envelopes (Include/Exclude):&nbsp;</span>
                        <label class="switch">
                            <input type="checkbox" @bind=HideEnvExp>
                            <span class="slider round"></span>
                        </label>
                    </div>
                }
                <h3>Month Projected Expenses:</h3>
                <h4 class="income-bad" style="text-align:center">@Constants.Pretty(ProjectedExpense)</h4>
                <h3>Month Actual Expenses:</h3>
                <h4 class='@(ActualExpense > ProjectedExpense ? "income-bad" : "income-good")' style="text-align:center">@Constants.Pretty(ActualExpense)</h4>
                <br />
                <Chart DPs=DataPoints BarClicked=FilterDate />
            }

            <br />
            <br />
            <br />
        }

        <!-- Monthly Spending -->
        <div style="width:100%;float:left;margin-bottom:2vh;">
            <MonthlySpending OnAddConfirm=AddConfirm
            @bind-Envelopes=Envelopes
            @bind-Transactions=Transactions
            @bind-FilteredTransactions=FilteredTransactions
            @bind-Balances=Balances />
        </div>

        <br />
        <div style="display:inline-block;width:100%">
            <button class="btn btn-info" style="width:100%;align-self:center;color:black" @onclick=@(() => ToggleStash())>Stash Cash</button>
            <br style="clear:both" />
            <br style="clear:both" />
            <button class="btn btn-danger" style="width:100%;align-self:center;color:black" @onclick=@(() => ToggleCash())>Cash Out</button>
            <br />
            <br />
            <div style="display:flex;flex-direction:column;justify-content:center">
                <div style="font-size:5vw;text-align:center">
                    Total Goals:
                    <span> @Constants.Pretty(Envelopes.Sum(e => e.Goal))</span>
                </div>
                <div style="text-align:center;font-size:5vw;">
                    Total Saved:
                    <span> @Constants.Pretty(Envelopes.Sum(e => e.TotalAmount))</span>
                </div>
                <hr />
                <div style="font-size:4vw;display:flex;flex-direction:row;justify-content:space-evenly">
                    <div style="font-size:4vw;display:flex;flex-direction:column;justify-content:space-between">
                        <div style="text-align:center;">@Constants.Person1 Saved:</div>
                        <div style="text-align:center;"> @Constants.Pretty(Envelopes.Sum(e => e.Person1Amount))</div>
                    </div>
                    <div style="font-size:4vw;display:flex;flex-direction:column;justify-content:space-between">
                        <div style="text-align:center;">@Constants.Person2 Saved:</div>
                        <div style="text-align:center;"> @Constants.Pretty(Envelopes.Sum(e => e.Person2Amount))</div>
                    </div>
                </div>
            </div>
            <br />
            <div style="display:flex;flex-direction:row;flex-wrap:wrap;justify-content:center">
                @foreach (var env in Envelopes)
                {
                    <Envelope Name="@env.Name" Scale=40 Font_Size=5 Goal=@env.Goal Saved=@env.TotalAmount
                              FlipClick="true"
                              Person1Account="@(new BalanceRepoCaller().GetName(env.Person1Account))"
                              Person2Account="@(new BalanceRepoCaller().GetName(env.Person2Account))"
                              Person1Amount="@env.Person1Amount" Person2Amount="@env.Person2Amount" />
                }
            </div>
            <br />
            <br style="clear:both" />
            <br style="clear:both" />
        </div>
        <!-- Dynamic Costs -->
        <div style="width:100%;">
            <table>
                <tr>
                    <th colspan="4" style="background-color:magenta;font-size:3vw;color:white"><i>Dynamic Monthly Costs</i></th>
                </tr>
                <tr>
                    <th style="font-size:3vw;">Expense</th>
                    <th style="font-size:3vw;">Total Budget Amount</th>
                    <th style="font-size:3vw;">Left This Month</th>
                    <th style="font-size:3vw;padding:0 5px">Spend/Day</th>
                </tr>
                @foreach (var dci in DynamicCostItems)
                {
                    @if (dci.Name.Contains("EXAMPLE DATA"))
                    {
                        <tr>
                            <td style="font-size:3vw;padding:.5vw 1vw;"><i>@dci.Name</i></td>
                            <td style="font-size:3vw;">@Pretty(dci.Amount)</td>
                            <td style="font-size:3vw;">@Pretty(dci.Left)</td>
                            <td style="font-size:3vw;">@Pretty(dci.Left/DaysLeft)</td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td style="font-size:3vw;padding:.5vw 1vw;">@dci.Name</td>
                            <td style="font-size:3vw;">@Pretty(dci.Amount)</td>
                            <td style="font-size:3vw;">@Pretty(dci.Left)</td>
                            <td style="font-size:3vw;">@Pretty(dci.Left/DaysLeft)</td>
                        </tr>
                    }
                }
                <tr>
                    <td style="font-size:3vw;" colspan="4">=</td>
                </tr>
                <tr>
                    <td style="font-size:3vw;"><strong>Total</strong></td>
                    <td style="font-size:3vw;">@Pretty(DynamicCostItems.Sum(d => d.Amount))</td>
                    <td style="font-size:3vw;">@Pretty(DynamicCostItems.Sum(d => d.Left))</td>
                    <td style="font-size:3vw;">@Pretty(DynamicCostItems.Sum(d => d.Left)/DaysLeft)</td>
                </tr>
            </table>
        </div>

        <br />

        <!-- Savings Goals-->
        <MonthlyGoalTracking Mobile=true ActualDynamicAmount=@ActualDynamic
                             ActualStaticAmount=@ActualStatic
                             ActualIncomeAmount=@ActualIncome
                             EnvelopeAmount=@EnvelopeExpenses />

        <br />

        <!-- Ideal Emergency Fund-->
        <IdealEmergencyFund Mobile=true />

        <br />

        <!-- Set Monthly Costs Goals-->
        <SetMonthlyTable Trans=FilteredTransactions Mobile=true />

        <br style="clear:both" />
        <br />
    }
    @if (ViewReports)
    {
        <Reports Title="@(string.Format("{0} (By: {1})","Penis", "Deez Nuts"))"
                 Text="Story" OnClose="@CloseModal">

        </Reports>
    }
    @if (StashCashBool)
    {
        <StashCash OnClose="@CloseModal">

        </StashCash>
    }
    @if (CashOutBool)
    {
        <CashOut OnClose="@CloseModal">

        </CashOut>
    }
    @*
    @if (ShowTutorial)
    {
        <TutorialModal Mobile="mobile"
           OnClose="@CloseTutModal">

        </TutorialModal>
    }
    *@
}

@code {
    private DateTime StartDate => DateTime.Now;
    private DateTime EndDate => new DateTime(StartDate.Year,
                                             StartDate.Month,
                                             DateTime.DaysInMonth(StartDate.Year,
                                             StartDate.Month));
    private int DaysLeft => Math.Ceiling((EndDate - StartDate).TotalDays) > 0 ? (int)Math.Ceiling((EndDate - StartDate).TotalDays + 1) : 1;

    private List<Transaction> Transactions;
    private List<Transaction> FilteredTransactions;
    private List<Balance> Balances;
    private List<Security> Securities;
    private List<DynamicCostItem> DynamicCostItems;
    private double Person1NetWorth => CalculateNetWorth(Constants.Person1);
    private double Person2NetWorth => CalculateNetWorth(Constants.Person2);

    private Balance SelectedBalance;
    private bool ValidChoice = true;
    private string selectedMonth = DateTime.Now.ToString("MMMM");
    private string selectedYear = DateTime.Now.Year.ToString();
    private string SelectedMonth
    {
        get { return selectedMonth; }
        set
        {
            selectedMonth = value;
            ValidChoice = Constants.DR.IsItValidMonthYear(selectedMonth + " " + selectedYear);
            StateHasChanged();
        }

    }
    private string SelectedYear
    {
        get { return selectedYear; }
        set
        {
            selectedYear = value;
            ValidChoice = Constants.DR.IsItValidMonthYear(selectedMonth + " " + selectedYear);
            StateHasChanged();
        }
    }
    private string SelectedDownload => SelectedMonth + " " + SelectedYear;

    private bool ShowDeleteBal = false;

    private string MonthYear => (DateTime.Now.ToString("MMMM") + " " + DateTime.Now.Year.ToString());

    private string ErrorMsg = string.Empty;

    private bool ShowChart;

    private bool ShowTutorial;

    private List<string> FoundMonths => GetMonths();
    private List<string> FoundYears => GetYears();
    private List<DataPoint> DataPoints = new List<DataPoint>();

    private bool Goals;

    private bool filtered;
    private string AddConfirmClass = "collapse";

    private bool ViewReports { get; set; }
    private bool StashCashBool { get; set; }
    private bool CashOutBool { get; set; }

    private bool hideEnvExp = true;
    private bool HideEnvExp
    {
        get { return hideEnvExp; }
        set
        {
            hideEnvExp = value;
            SetDataPoints();

        }
    }

    private List<Transaction> MonthlyTransactions = new List<Transaction>();
    private double ActualStatic => MonthlyTransactions.Where(ft => ft.ExpenseType == "Static Cost").Sum(ft => ft.TotalAmount);
    private double ActualIncome => MonthlyTransactions.Where(ft => ft.ExpenseType == "Income").Sum(ft => ft.TotalAmount);
    private double ActualDynamic => DynamicCostItems.Sum(dci =>dci.Amount) - DynamicCostItems.Sum(dci => dci.Left);

    private double ProjectedExpense => Constants.StaticMonthlyCosts.Sum(ta => ta.TotalAmount) +
                                        DynamicCostItems.Sum(d => d.Amount);
    private double ActualExpense => FilteredTransactions.Where(ft => CostMoney(ft)).Sum(ft => ft.TotalAmount);
    private double EnvelopeExpenses => FilteredTransactions.Where(ft => ft.ExpenseType == "Envelope").Sum(ft => ft.TotalAmount)
                                        + FilteredTransactions.Where(ft => IsAnEnvelope(ft)).Sum(ft => ft.TotalAmount);

    private List<Balance> BalancesP1 => Balances.Where(b => b.Person == Constants.Person1 | b.Person.ToUpper() == "JOINT").ToList();
    private List<Balance> BalancesP2 => Balances.Where(b => b.Person == Constants.Person2 | b.Person.ToUpper() == "JOINT").ToList();
    private List<string> ETs => FillEts();

    private List<string> FillEts()
    {
        List<string> retStr = new List<string>();
        retStr.Add("Income");
        retStr.Add("Static Cost");
        retStr.Add("Envelope");
        retStr.Add("Equity");
        retStr.Add("Debt");
        retStr.Add("Transfer");

        foreach (var dci in Constants.DynamicCostItems)
            if (!retStr.Contains(dci.Name))
                retStr.Add(dci.Name);

        // Purposefully neglect Envelopes
        return retStr;
    }

    private bool IsAnEnvelope(Transaction t)
    {
        if (t.ExpenseType == "Envelope") return true;

        if (!ETs.Contains(t.ExpenseType))
            return true;

        return false;
    }

    private bool CostMoney(Transaction ft)
    {
        List<string> IgnoreThese = new List<string> { "Debt", "Transfer", "Equity", "Income" };

        if (HideEnvExp)
        {
            IgnoreThese.Add("Envelope");
            if (IsAnEnvelope(ft))
                return false;
        }

        foreach (var env in Envelopes)
        {
            IgnoreThese.Add(env.Name);
        }

        if (IgnoreThese.Contains(ft.ExpenseType))
            return false;

        return true;
    }

    private List<Data.Envelope> Envelopes { get; set; }

    string GoalTxt = "GOALS";

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
        CatchAll catchAll = await CatchAllRunner.Grab();
        Balances = catchAll.Balances;
        Transactions = catchAll.Transactions;
        FilteredTransactions = new List<Transaction>(Transactions);
        FilteredTransactions = FilteredTransactions.Where(t => t.MonthYear() == Constants.MonthYear()).OrderByDescending(t => t.DateOfTransaction).ToList();
        MonthlyTransactions = new List<Transaction>(FilteredTransactions);
        ErrorMsg = string.Empty;
        Balances.Sort(Constants.CompareBalance);

        Envelopes = Constants.Envelopes.OrderByDescending(e => e.TotalAmount / e.Goal).ToList();

        DynamicCostItems = new List<DynamicCostItem>(Constants.DynamicCostItems);

        string GoalsOpen = await ReadCookies("GoalsOpen");
        string TutorialSeen = await ReadCookies("TutorialSeen");

        if (string.IsNullOrEmpty(GoalsOpen) || GoalsOpen == "NO")
            Goals = false;
        else
            Goals = true;

        GoalTxt = Goals ? "GOALS (ON)" : "GOALS";

        if (string.IsNullOrEmpty(TutorialSeen))
            ShowTutorial = true;
        else
            ShowTutorial = false;

        SetDataPoints();

        StateHasChanged();
    }

    private string GoodOrBad(double money)
    {
        return money <= 0 ? "red" : "forestgreen";
    }
    private string Pretty(double num)
    {
        return Constants.Pretty(num);
    }
    private async void ShowDeleteBalBtn(Balance b)
    {
        SelectedBalance = b;
        ShowDeleteBal = true;
        await JSRuntime.InvokeAsync<bool>("TurnOffScroll");
    }
    private async void DeleteBalance(bool accepted)
    {
        if (accepted)
        {
            Balances = await BalanceRepo.RemoveAsync(SelectedBalance);
            Balances.Sort(Constants.CompareBalance);
        }
        ShowDeleteBal = false;
        await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
        StateHasChanged();
    }
    private double CalculateNetWorth(string person)
    {
        return IndexRunner.CalculateNetWorth(person, Balances);
    }

    private List<string> GetMonths()
    {
        return IndexRunner.GetMonths(false);
    }

    private List<string> GetYears()
    {
        return IndexRunner.GetYears();
    }

    private void FilterDate(string filter) { Filter(filter, true); }
    private void FilterBalance(string filter) { Filter(filter, false, true); }
    private void Filter(string filter, bool date = false, bool balance = false)
    {
        if (filtered)
            ResetFilters();

        if (date)
            FilteredTransactions = FilteredTransactions.Where(ft => ft.DateOfTransaction.ToShortDateString() == filter).ToList();
        else if (balance)
            FilteredTransactions = FilteredTransactions.Where(ft => ft.PaidWithPerson1 == filter ||
                                                                    ft.PaidWithPerson2 == filter ||
                                                                    ft.PaidOffPerson1 == filter ||
                                                                    ft.PaidOffPerson2 == filter).ToList();
        else
            FilteredTransactions = FilteredTransactions.Where(ft => ft.ExpenseType == filter).ToList();

        filtered = true;

        StateHasChanged();
    }

    private void Filter(DynamicCostItem filter)
    {
        var catcher = IndexRunner.Filter(ref filter, Transactions, FilteredTransactions, ref filtered);
        Transactions = catcher[0];
        FilteredTransactions = catcher[1];

        StateHasChanged();
    }

    private void ResetFilters(bool BtnPress = false)
    {
        FilteredTransactions = Transactions.Where(t => t.MonthYear() == Constants.MonthYear()).OrderByDescending(t => t.DateOfTransaction).ToList();
        filtered = false;

        if (BtnPress)
        {
            string FilterIndicatorTxt = " (ON)";
            for (int index = 0; index < DynamicCostItems.Count; index++)
            {
                if (DynamicCostItems[index].Name.Contains(FilterIndicatorTxt))
                {
                    DynamicCostItems[index].Name = DynamicCostItems[index].Name.Replace(FilterIndicatorTxt, "");
                }
            }
        }
    }
    private void SetDataPoints(bool UpdateState = false)
    {
        DataPoints = new List<DataPoint>();

        if (FilteredTransactions != null && FilteredTransactions.Count > 0)
        {
            Transaction tr = FilteredTransactions[0];
            DateTime PreviousDate = tr.DateOfTransaction;
            double MonthAmount = 0;

            List<string> NotExpenseOrIncome = new List<string> { "Debt", "Transfer", "Equity" };

            if (HideEnvExp)
                NotExpenseOrIncome.Add("Envelope");

            foreach (var env in Envelopes)
            {
                NotExpenseOrIncome.Add(env.Name);
            }

            string[] IncomeOrEquity = new string[] { "Income", "Equity" };

            if (IncomeOrEquity.Contains(tr.ExpenseType))
                MonthAmount = tr.TotalAmount;
            else if (!NotExpenseOrIncome.Contains(tr.ExpenseType))
                MonthAmount = HideEnvExp & IsAnEnvelope(tr) ? 0 : tr.TotalAmount * -1;

            bool lastSwitch = false; // true if there is only 1 transaction for this date, and it's the last one

            for (int index = 1; index < FilteredTransactions.Count; index++)
            {
                if (FilteredTransactions[index].DateOfTransaction.ToShortDateString() != PreviousDate.ToShortDateString())
                {
                    var newDP = new DataPoint(PreviousDate.Day.ToString(), MonthAmount);
                    newDP.Negative = newDP.Value < 0;
                    newDP.Value = Math.Abs(newDP.Value);

                    if (newDP.Value != 0)
                        DataPoints.Add(newDP);

                    lastSwitch = true;
                    PreviousDate = FilteredTransactions[index].DateOfTransaction;
                    if (IncomeOrEquity.Contains(FilteredTransactions[index].ExpenseType))
                        MonthAmount = FilteredTransactions[index].TotalAmount;
                    else if (!NotExpenseOrIncome.Contains(FilteredTransactions[index].ExpenseType))
                        MonthAmount = HideEnvExp & IsAnEnvelope(FilteredTransactions[index]) ? 0 : FilteredTransactions[index].TotalAmount * -1;
                    else
                        MonthAmount = 0;
                }
                else
                {
                    if (IncomeOrEquity.Contains(FilteredTransactions[index].ExpenseType))
                        MonthAmount += FilteredTransactions[index].TotalAmount;
                    else if (!NotExpenseOrIncome.Contains(FilteredTransactions[index].ExpenseType))
                        MonthAmount -= HideEnvExp & IsAnEnvelope(FilteredTransactions[index]) ? 0 : FilteredTransactions[index].TotalAmount;

                    lastSwitch = false;

                    if (index == FilteredTransactions.Count - 1)
                    {
                        var newDP = new DataPoint(PreviousDate.Day.ToString(), MonthAmount);
                        newDP.Negative = newDP.Value < 0;
                        newDP.Value = Math.Abs(newDP.Value);

                        if (newDP.Value != 0)
                            DataPoints.Add(newDP);
                    }
                }

            }
            if (lastSwitch)
            {
                int last = FilteredTransactions.Count - 1;
                var newDP = new DataPoint(PreviousDate.Day.ToString(), MonthAmount);
                newDP.Negative = newDP.Value < 0;
                newDP.Value = Math.Abs(newDP.Value);

                if (newDP.Value != 0)
                    DataPoints.Add(newDP);
            }
            DataPoints.Reverse();
        }

        if (UpdateState)
            StateHasChanged();
    }
    private async void DeleteConfirm()
    {
        SetDataPoints(true);
        Balances.Sort(Constants.CompareBalance);
        await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
    }
    private async void AddConfirm()
    {
        SetDataPoints();
        Balances.Sort(Constants.CompareBalance);

        AddConfirmClass = "floaty";
        await Task.Delay(3000);

        AddConfirmClass = "floaty-rev";
        StateHasChanged();
    }
    private async void CloseModal(bool accepted)
    {
        ViewReports = false;
        StashCashBool = false;
        CashOutBool = false;
        await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
    }
    private async void CloseTutModal(bool DontShowAgain)
    {
        if (DontShowAgain)
            await WriteCookieAsync("TutorialSeen", "YES", 1000);

        ShowTutorial = false;
        await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
    }
    protected async Task<string> ReadCookies(string CookieName)
    {
        string response;
        try
        {
            response = await JSRuntime.InvokeAsync<string>("ReadCookie", CookieName);
        }
        catch (Exception e)
        {
            response = null;
        }

        return response;
    }

    public async Task WriteCookieAsync(string name, string value, double days)
    {
        var test = await JSRuntime.InvokeAsync<object>("WriteCookie", name, value, days);
    }
    private void ToggleChartBtn()
    {
        ShowChart = !ShowChart;
    }
    private async void ToggleGoals()
    {
        Goals = !Goals;
        GoalTxt = Goals ? "GOALS (ON)" : "GOALS";
        await WriteCookieAsync("GoalsOpen", Goals ? "YES" : "NO", 1000);
        Envelopes = Constants.Envelopes.OrderByDescending(e => e.TotalAmount / e.Goal).ToList();
        StateHasChanged();
    }
    private async void ToggleReports()
    {
        ViewReports = !ViewReports;
        if (ViewReports)
            await JSRuntime.InvokeAsync<bool>("TurnOffScroll");
        else
            await JSRuntime.InvokeAsync<bool>("TurnOnScroll");

    }
    private async void ToggleStash()
    {
        StashCashBool = !StashCashBool;
        if (StashCashBool)
            await JSRuntime.InvokeAsync<bool>("TurnOffScroll");
        else
            await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
    }
    private async void ToggleCash()
    {
        CashOutBool = !CashOutBool;
        if (CashOutBool)
            await JSRuntime.InvokeAsync<bool>("TurnOffScroll");
        else
            await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
    }
    async Task DownloadCSV()
    {
        if (string.IsNullOrEmpty(SelectedDownload))
            return;

        string fileString = CSVBuilder.Build(await Constants.AllTransactions, SelectedDownload);

        byte[] file = System.Text.Encoding.UTF8.GetBytes(fileString);
        string FileSaveName = SelectedDownload == "All" ? "All_Transactions.csv" : SelectedDownload.Replace(" ", "_") + "_Transactions.csv";
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", FileSaveName, "text/csv", file);
    }
}