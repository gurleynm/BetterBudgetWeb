@page "/portfolio"
@using BetterBudgetWeb.Data;
@using BetterBudgetWeb.Repo;
@using BetterBudgetWeb.Shared.InputActions
@inject IJSRuntime JSRuntime

<PageTitle>Portfolio</PageTitle>

<h1>Portfolio</h1>
@if (!mobile)
{
    <div style="display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:space-between">
        <div style="width: auto; height:fit-content; max-height:80vh; overflow: auto; position: relative;border: solid gray 1px;padding:0">
            <label style="font-size:large;padding:.5vw">All Investment Accounts</label>
            @if (InvestmentAccounts != null && InvestmentAccounts.Count > 0)
            {
                @foreach (var ia in InvestmentAccounts)
                {
                    <InvestmentAccountBlock TheBalance="ia" OnClick="@(() => UpdateSelectedBalance(ia))" />
                }
            }
        </div>
        <div style="overflow:auto">
            <div>
                <InputSecurity BalanceSelected="@SelectedBalance.Id"/>
            </div>
            @if (AccountSecurities != null && AccountSecurities.Count > 0)
            {
                <table style="width:100%;">
                    <tr>
                        <th colspan="6" style="background-color:forestgreen;color:white;white-space:nowrap;padding:1vw"><i>@(SelectedBalance.Name + " Account")</i></th>
                    </tr>
                    <tr style="height:3vw">
                        <th style="cursor:pointer;width:10vw;padding:1vw;">Symbol</th>
                        <th style="cursor:pointer;width:10vw;padding:1vw;">Last Price</th>
                        <th style="cursor:pointer;width:10vw;padding:1vw;">Cost Basis</th>
                        <th style="cursor:pointer;width:10vw;padding:1vw;">Quantity</th>
                        <th style="cursor:pointer;width:10vw;padding:1vw;">Value</th>
                        <th style="cursor:pointer;width:10vw;padding:1vw;">% Gain/Loss</th>
                    </tr>
                    @foreach (var accsec in AccountSecurities)
                    {
                        <tr style="height:3vw">
                            <th style="padding:1vw;">@accsec.Name</th>
                            <th style="padding:1vw;">@Constants.Pretty(accsec.Value/accsec.NumShares)</th>
                            <th style="padding:1vw;">@Constants.Pretty(accsec.AvgCost)</th>
                            <th style="padding:1vw;">@accsec.NumShares</th>
                            <th style="padding:1vw;">@Constants.Pretty(accsec.Value)</th>
                            <th style="padding:1vw;">@(accsec.CalculateReturn() + "%")</th>
                        </tr>
                    }
                    <tr>
                        <td colspan="6" style="color:white;white-space:nowrap;padding:1vw">=</td>
                    </tr>
                    <tr style="height:3vw">
                        <th style="padding:1vw;">Total</th>
                        <th style="padding:1vw;"></th>
                        <th style="padding:1vw;"></th>
                        <th style="padding:1vw;"></th>
                        <th style="padding:1vw;">@Constants.Pretty(AccountSecurities.Sum(acs => acs.Value))</th>
                        <th style="padding:1vw;">@(CalculateReturn() + "%")</th>
                    </tr>
                </table>
            }
        </div>
        <div style="width: auto; height:fit-content; max-height:80vh; overflow: auto; position: relative;border: solid gray 1px;padding:0">
            <div>
                <span class="oi oi-reload" aria-hidden="true" style="float:right; margin:.2vw; cursor:pointer" @onclick=Reload></span>
                <label style="font-size:.8vw;margin:2.5px 0 0 0;float:right;padding:0 .2vw;"><i>@("Refreshed at " + RefreshTime)</i></label>
            </div>
            <br />
            <br />
            @if (TotalOption != null && TotalOption.Count > 0)
            {
                <div style="display:flex;justify-content:center;">
                    <label style="font-size:large">All Options</label>
                </div>
                @foreach (var sec in TotalOption)
                {
                    <SecurityBlock TheSecurity="sec" />
                }
            }
            @if (TotalStock != null && TotalStock.Count > 0)
            {
                <div style="display:flex;justify-content:center;">
                    <label style="font-size:large">All Stocks</label>
                </div>
                @foreach (var sec in TotalStock)
                {
                    <SecurityBlock TheSecurity="sec" />
                }
            }
            @if (TotalETF != null && TotalETF.Count > 0)
            {
                <div style="display:flex;justify-content:center;">
                    <label style="font-size:large">All ETFs</label>
                </div>
                @foreach (var sec in TotalETF)
                {
                    <SecurityBlock TheSecurity="sec" />
                }
            }
            @if (TotalCrypto != null && TotalCrypto.Count > 0)
            {
                <div style="display:flex;justify-content:center;">
                    <label style="font-size:large">All Crypto</label>
                </div>
                @foreach (var sec in TotalCrypto)
                {
                    <SecurityBlock TheSecurity="sec" />
                }
            }
        </div>
    </div>
}
else
{

}

@code {
    private bool mobile { get; set; }

    public List<Balance> InvestmentAccounts;
    public List<Security> Securities;
    public Balance SelectedBalance;
    public List<Security> AccountSecurities;
    public List<Security> TotalStock => Securities.Where(sec => sec.SecType.ToUpper() == "STOCK").ToList();
    public List<Security> TotalETF => Securities.Where(sec => sec.SecType.ToUpper() == "ETF").ToList();
    public List<Security> TotalOption => Securities.Where(sec => sec.SecType.ToUpper() == "CALL" || sec.SecType.ToUpper() == "PUT").ToList();
    public List<Security> TotalCrypto => Securities.Where(sec => sec.SecType.ToUpper() == "CRYPTO").ToList();
    public string RefreshTime;

    protected override async Task OnInitializedAsync()
    {
        Securities = SecurityRepo.GetSecurities();
        InvestmentAccounts = Constants.Balances.Where(bal => bal.BalanceType.ToUpper() == "STOCKS").ToList();
        SelectedBalance = InvestmentAccounts[0];
        AccountSecurities = Securities.Where(sec => sec.BalanceFrom == SelectedBalance.Id).ToList();
        RefreshTime = DateTime.Now.ToString();
        mobile = await JSRuntime.InvokeAsync<bool>("isDevice");
        await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
    }

    private void UpdateSelectedBalance(Balance bal)
    {
        SelectedBalance = bal;
        AccountSecurities = Securities.Where(sec => sec.BalanceFrom == SelectedBalance.Id).ToList();
        StateHasChanged();
    }

    private void Reload()
    {
        Securities = SecurityRepo.GetSecurities();
        RefreshTime = DateTime.Now.ToString();
        Constants.Securities = Securities;
    }

    private double CalculateReturn()
    {
        double totalIn = 0;
        double totalValue = 0;

        foreach (var acs in AccountSecurities)
        {
            totalIn += acs.AvgCost * acs.NumShares;
            totalValue += acs.Value;
        }

        double GainsLoss = (totalValue - totalIn) / totalIn * 100;

        return Math.Round(GainsLoss, 2);
    }
}
