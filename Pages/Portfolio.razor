@page "/portfolio"
@page "/portfolio/{BalanceName}"
@using BetterBudgetWeb.Data;
@using BetterBudgetWeb.Repo;
@using BetterBudgetWeb.Shared.InputActions
@using BetterBudgetWeb.Shared.DeleteActions
@inject IJSRuntime JSRuntime
@inject NavigationManager NavMan

<PageTitle>Portfolio</PageTitle>

@if (NoInvestments)
{
    <div>Please add a Stock Balance before returning to this page.</div>
}
else
{
    @if (!Constants.Mobile)
    {
        <div class="flex-c" style="flex-wrap:nowrap;justify-content:space-between">
            <div style="width: auto; height:fit-content; max-height:80vh; overflow: auto; position: relative;border: solid gray 1px;padding:0">
                <div class="tab" style="width:100%">
                    <button class="tablinks @BuyClass" @onclick="@ShowBuyTab">Buy</button>
                    <button class="tablinks @SellClass" @onclick="@ShowSellTab">Sell</button>
                </div>
                @if (ShowBuy)
                {
                    <InputSecurity BalanceSelected="@SelectedBalance.Id" OnClick="UpdateEverything" />
                }
                @if (ShowSell)
                {
                    <DeleteSecurity OnClick="UpdateEverything" SelectedBalance="@SelectedBalance" />
                }
            </div>
            <div class="flex-r" style="margin-top:1em;justify-content:space-around">
                <div style="overflow:auto;">
                    @if (AccountSecurities != null)
                    {
                        <table class="toggle-table" style="width:100%;">
                            <tr>
                                <th colspan="5" style="background-color:forestgreen;color:white;white-space:nowrap;padding:1vw"><i>@(SelectedBalance.Name + " Account")</i></th>
                            </tr>
                            <tr style="height:3vw">
                                <th style="width:10vw;padding:1vw;">
                                    <div class="flex-c" style="justify-content:space-between">
                                        <div>Symbol</div>
                                        <div>Last Price</div>
                                    </div>
                                </th>
                                <th style="width:10vw;padding:1vw;">Gain/Loss %</th>
                                <th style="width:10vw;padding:1vw;">Value</th>
                                <th style="width:10vw;padding:1vw;">Quantity<br />(% of Portfolio)</th>
                                <th style="width:10vw;padding:1vw;">Cost Basis</th>
                            </tr>
                            @foreach (var accsec in AccountSecurities)
                            {
                                <tr style="height:3vw">
                                    <td style="padding:1vw;">
                                        <div class="flex-c" style="justify-content:space-between">
                                            <div>@accsec.Name</div>
                                            <div>@Constants.Pretty(accsec.Value / accsec.NumShares)</div>
                                        </div>
                                    </td>
                                    <td style="padding:1vw;">@(accsec.CalculateReturn() + "%")</td>
                                    <td style="padding:1vw;">@Constants.Pretty(accsec.Value)</td>
                                    <td style="padding:1vw;">
                                        @Math.Round(accsec.NumShares, 2)
                                        <br />@("(" + Math.Round(accsec.Value / AccountValue * 100, 2) + "%)")
                                    </td>
                                    <td style="padding:1vw;">@Constants.Pretty(accsec.AvgCost * accsec.NumShares)</td>
                                </tr>
                            }
                            @if (SelectedBalance.Value > 0)
                            {
                                <tr>
                                    <td style="padding:1vw;">
                                        <div class="flex-c" style="justify-content:space-between">
                                            <div>Cash</div>
                                            <div>@Constants.Pretty(1)</div>
                                        </div>
                                    </td>
                                    <td style="padding:1vw;">---</td>
                                    <td style="padding:1vw;">@Constants.Pretty(SelectedBalance.Value)</td>
                                    <td style="padding:1vw;">
                                        @Constants.Pretty(SelectedBalance.Value).Trim('$')
                                        <br />@("(" + Math.Round(SelectedBalance.Value / AccountValue * 100, 2) + "%)")
                                    </td>
                                    <td style="padding:1vw;">---</td>
                                </tr>
                            }
                            <tr>
                                <td colspan="5" style="color:white;white-space:nowrap;padding:1vw">=</td>
                            </tr>
                            <tr style="height:3vw">
                                <td style="padding:1vw;">Total</td>
                                <td style="padding:1vw;">@(CalculateReturn() + "%")</td>
                                <td style="padding:1vw;">@Constants.Pretty(AccountValue)</td>
                                <td style="padding:1vw;"></td>
                                <td style="padding:1vw;">@Constants.Pretty(TotalCostBasis)</td>
                            </tr>
                        </table>
                    }
                </div>
                <div style="width: auto; height:fit-content; max-height:80vh; overflow: auto; position: relative;border: solid gray 1px;padding:0">
                    <div>
                        <span class="oi oi-reload" aria-hidden="true" style="float:right; margin:.2vw; cursor:pointer" @onclick=Reload></span>
                        <label style="font-size:.8vw;margin:2.5px 0 0 0;float:right;padding:0 .2vw;"><i>@("Refreshed at " + RefreshTime)</i></label>
                    </div>
                    @if (Constants.Token == "DEMO")
                    {
                        <div class="flex-r" style="width:100%;">
                            <label style="font-size:.8vw;margin:2.5px 0 0 0;float:right;padding:0 .2vw;"><i>(Refresh disabled in DEMO mode)</i></label>
                        </div>
                    }
                    <br />
                    <br />
                    @if (TotalOption != null && TotalOption.Count > 0)
                    {
                        <div class="flex-r">
                            <label style="font-size:large">All Options</label>
                        </div>
                        @foreach (var sec in TotalOption)
                        {
                            <SecurityBlock TheSecurity="sec" />
                        }
                    }
                    @if (TotalStock != null && TotalStock.Count > 0)
                    {
                        <div class="flex-r">
                            <label style="font-size:large">All Stocks</label>
                        </div>
                        @foreach (var sec in TotalStock)
                        {
                            <SecurityBlock TheSecurity="sec" />
                        }
                    }
                    @if (TotalETF != null && TotalETF.Count > 0)
                    {
                        <div class="flex-r">
                            <label style="font-size:large">All ETFs</label>
                        </div>
                        @foreach (var sec in TotalETF)
                        {
                            <SecurityBlock TheSecurity="sec" />
                        }
                    }
                    @if (TotalCrypto != null && TotalCrypto.Count > 0)
                    {
                        <div class="flex-r">
                            <label style="font-size:large">All Crypto</label>
                        </div>
                        @foreach (var sec in TotalCrypto)
                        {
                            <SecurityBlock TheSecurity="sec" />
                        }
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="flex-c" style="flex-wrap:nowrap;justify-content:space-between;margin-bottom:2vh">
            <div style="overflow:auto;margin-bottom:2vh;">
                <div style="border:solid gray 1px;margin-bottom:2vh;">
                    <label style="font-size:large;padding:.5vw;width:100%;text-align:center;text-decoration:underline">All Investment Accounts</label>
                    @if (InvestmentAccounts != null && InvestmentAccounts.Count > 0)
                    {
                        @foreach (var ia in InvestmentAccounts)
                        {
                            @if (SelectedBalance.Id == ia.Id)
                            {
                                <InvestmentAccountBlock TheBalance="ia" OnClick="@(() => UpdateSelectedBalance(ia))" SetClass="selected-account" />
                            }
                            else
                            {
                                <InvestmentAccountBlock TheBalance="ia" OnClick="@(() => UpdateSelectedBalance(ia))" />
                            }
                        }
                    }
                </div>
                @if (AccountSecurities != null)
                {
                    <table class="toggle-table" style="width:100%;">
                        <tr>
                            <th colspan="5" style="background-color:forestgreen;color:white;white-space:nowrap;padding:1vw"><i>@(SelectedBalance.Name + " Account")</i></th>
                        </tr>
                        <tr style="height:3vw">
                            <th style="width:fit-content;padding:1vw;">
                                <div class="flex-c" style="justify-content:space-between">
                                    <div>Symbol</div>
                                    <div>Last Price</div>
                                </div>
                            </th>
                            <th style="width:10vw;padding:1vw;">Gain/Loss %</th>
                            <th style="width:10vw;padding:1vw;">Value</th>
                            <th style="width:10vw;padding:1vw;">Cost Basis</th>
                            <th style="width:10vw;padding:1vw;">Quantity<br />(% of Portfolio)</th>
                        </tr>
                        @foreach (var accsec in AccountSecurities)
                        {
                            <tr style="height:3vw">
                                <td style="padding:1vw;">
                                    <div class="flex-c" style="justify-content:space-between">
                                        <div>@accsec.Name</div>
                                        <div>@Constants.Pretty(accsec.Value / accsec.NumShares)</div>
                                    </div>
                                </td>
                                <td style="padding:1vw;">@(accsec.CalculateReturn() + "%")</td>
                                <td style="padding:1vw;">@Constants.Pretty(accsec.Value)</td>
                                <td style="padding:1vw;">@Constants.Pretty(accsec.AvgCost * accsec.NumShares)</td>
                                <td style="padding:1vw;">
                                    @Math.Round(accsec.NumShares, 2)
                                    <br />@("(" + Math.Round(accsec.Value / AccountValue * 100, 2) + "%)")
                                </td>
                            </tr>
                        }
                        @if (SelectedBalance.Value > 0)
                        {
                            <tr>
                                <td style="padding:1vw;">
                                    <div class="flex-c" style="justify-content:space-between">
                                        <div>Cash</div>
                                        <div>@Constants.Pretty(1)</div>
                                    </div>
                                </td>
                                <td style="padding:1vw;">---</td>
                                <td style="padding:1vw;">
                                    @Constants.Pretty(SelectedBalance.Value)
                                </td>
                                <td style="padding:1vw;">---</td>
                                <td style="padding:1vw;">
                                    @Constants.Pretty(SelectedBalance.Value).Trim('$')
                                    <br />@("(" + Math.Round(SelectedBalance.Value / AccountValue * 100, 2) + "%)")
                                </td>
                            </tr>
                        }
                        <tr>
                            <td colspan="5" style="color:white;white-space:nowrap;padding:1vw">=</td>
                        </tr>
                        <tr style="height:3vw">
                            <td style="padding:1vw;">Total</td>
                            <td style="padding:1vw;">@(CalculateReturn() + "%")</td>
                            <td style="padding:1vw;">@Constants.Pretty(AccountValue)</td>
                            <td style="padding:1vw;">@Constants.Pretty(TotalCostBasis)</td>
                            <td style="padding:1vw;"></td>
                        </tr>
                    </table>
                }
            </div>

            <div style="width: auto; height:fit-content; max-height:80vh; overflow: auto; position: relative;border: solid gray 1px;padding:0">
                <div class="tab" style="width:100%">
                    <button class="tablinks @BuyClass" @onclick="@ShowBuyTab">Buy</button>
                    <button class="tablinks @SellClass" @onclick="@ShowSellTab">Sell</button>
                </div>
                @if (ShowBuy)
                {
                    <InputSecurity BalanceSelected="@SelectedBalance.Id" OnClick="UpdateEverything" />
                }
                @if (ShowSell)
                {
                    <DeleteSecurity OnClick="UpdateEverything" SelectedBalance="@SelectedBalance" />
                }
            </div>
            <br />
            <div style="width: auto; height:fit-content; max-height:80vh; overflow: auto; position: relative;border: solid gray 1px;padding:0">
                <div>
                    <span class="oi oi-reload" aria-hidden="true" style="float:right; margin:.5vw; cursor:pointer" @onclick=Reload></span>
                    <label style="font-size:2.5vw;margin:.75vw .2vw 0 0;float:right;padding:0 .2vw;"><i>@("Refreshed at " + RefreshTime)</i></label>
                </div>
                @if (Constants.Token == "DEMO")
                {
                    <div class="flex-r" style="width:100%;">
                        <label style="font-size:2.5vw;margin:2.5px 0 0 0;float:right;padding:0 .2vw;"><i>(Refresh disabled in DEMO mode)</i></label>
                    </div>
                }
                <br />
                <br />
                @if (TotalOption != null && TotalOption.Count > 0)
                {
                    <div class="flex-r">
                        <label style="font-size:large">All Options</label>
                    </div>
                    @foreach (var sec in TotalOption)
                    {
                        <SecurityBlock TheSecurity="sec" />
                    }
                }
                @if (TotalStock != null && TotalStock.Count > 0)
                {
                    <div class="flex-r">
                        <label style="font-size:large">All Stocks</label>
                    </div>
                    @foreach (var sec in TotalStock)
                    {
                        <SecurityBlock TheSecurity="sec" />
                    }
                }
                @if (TotalETF != null && TotalETF.Count > 0)
                {
                    <div class="flex-r">
                        <label style="font-size:large">All ETFs</label>
                    </div>
                    @foreach (var sec in TotalETF)
                    {
                        <SecurityBlock TheSecurity="sec" />
                    }
                }
                @if (TotalCrypto != null && TotalCrypto.Count > 0)
                {
                    <div class="flex-r">
                        <label style="font-size:large">All Crypto</label>
                    </div>
                    @foreach (var sec in TotalCrypto)
                    {
                        <SecurityBlock TheSecurity="sec" />
                    }
                }
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public string BalanceName { get; set; }

    private bool ShowBuy { get; set; } = true;
    private bool ShowSell { get; set; }

    private string BuyClass => ShowBuy ? "active" : "";
    private string SellClass => ShowSell ? "active" : "";

    public List<Balance> InvestmentAccounts;
    public List<Security> Securities;
    public Balance SelectedBalance;
    public List<Security> AccountSecurities;
    public List<Security> TotalStock => Securities.Where(sec => sec.SecType.ToUpper() == "STOCK").ToList();
    public List<Security> TotalETF => Securities.Where(sec => sec.SecType.ToUpper() == "ETF").ToList();
    public List<Security> TotalOption => Securities.Where(sec => sec.SecType.ToUpper() == "CALL" || sec.SecType.ToUpper() == "PUT").ToList();
    public List<Security> TotalCrypto => Securities.Where(sec => sec.SecType.ToUpper() == "CRYPTO").ToList();
    public string RefreshTime;
    private bool NoInvestments;
    public double AccountValue => AccountSecurities.Sum(acs => acs.Value) + SelectedBalance.Value;
    public double TotalCostBasis => AccountSecurities.Sum(ac => ac.AvgCost * ac.NumShares) + SelectedBalance.Value;

    protected override async Task OnInitializedAsync()
    {
        if (Constants.TIER_LEVEL <= Tier.BASIC_TIER)
            NavMan.NavigateTo("home");

        Securities = SecurityRepo.GetSecurities();
        InvestmentAccounts = Constants.Balances.Where(bal => bal.BalanceType.ToUpper() == "STOCKS").ToList();

        NoInvestments = InvestmentAccounts == null || InvestmentAccounts.Count == 0;

        if (NoInvestments)
            return;

        if (string.IsNullOrEmpty(BalanceName))
            SelectedBalance = InvestmentAccounts[0];
        else
        {
            var exists = InvestmentAccounts.FirstOrDefault(bal => bal.Name.ToUpper() == BalanceName.ToUpper());

            SelectedBalance = exists == null ? InvestmentAccounts[0] : exists;
        }

        AccountSecurities = Securities.Where(sec => sec.BalanceFrom == SelectedBalance.Id).ToList();
        RefreshTime = DateTime.Now.ToString();
        await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
    }

    private void ShowBuyTab()
    {
        ShowBuy = !ShowBuy;
        ShowSell = false;
    }

    private void ShowSellTab()
    {
        ShowSell = !ShowSell;
        ShowBuy = false;
    }

    private void UpdateSelectedBalance(Balance bal)
    {
        SelectedBalance = bal;
        AccountSecurities = Securities.Where(sec => sec.BalanceFrom == SelectedBalance.Id).ToList();
        StateHasChanged();
    }

    private void UpdateEverything()
    {
        Securities = SecurityRepo.GetSecurities();
        InvestmentAccounts = Constants.Balances.Where(bal => bal.BalanceType.ToUpper() == "STOCKS").ToList();
        AccountSecurities = Securities.Where(sec => sec.BalanceFrom == SelectedBalance.Id).ToList();
        Reload();
    }

    private void Reload()
    {
        @if (Constants.Token == "DEMO")
            return;

        Securities = SecurityRepo.GetSecurities();
        RefreshTime = DateTime.Now.ToString();
        Constants.Securities = Securities;
        SelectedBalance = Constants.Balances.FirstOrDefault(b => b.Id == SelectedBalance.Id);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(BalanceName))
            return;

        var exists = InvestmentAccounts.FirstOrDefault(bal => bal.Name.ToUpper() == BalanceName.ToUpper());
        if (exists == null)
            return;

        SelectedBalance = exists;
        AccountSecurities = Securities.Where(sec => sec.BalanceFrom == SelectedBalance.Id).ToList();
    }

    private double CalculateReturn()
    {
        double totalIn = 0;
        double totalValue = 0;

        foreach (var acs in AccountSecurities)
        {
            totalIn += acs.AvgCost * acs.NumShares;
            totalValue += acs.Value;
        }

        double GainsLoss = totalIn == 0 ? 0 : (totalValue - totalIn) / totalIn * 100;

        return Math.Round(GainsLoss, 2);
    }
}
