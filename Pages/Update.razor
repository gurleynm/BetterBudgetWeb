@page "/update"
@using BetterBudgetWeb.Data;
@using BetterBudgetWeb.Repo;
@using BetterBudgetWeb.Shared.InputActions
@using BetterBudgetWeb.Shared.UpdateActions
@inject IJSRuntime JSRuntime
@implements IDisposable

<GoogleAnalytic />

<PageTitle>Update</PageTitle>

@if (!Constants.Mobile)
{
    <h1 style="font-family:'CBB Default'">Update</h1>
}

<div class="tab">
    <button class="tablinks @BalClass" @onclick=@(() => ShowHideIndex(0))>Account</button>
    @if (Constants.Envelopes.Count > 0)
    {
        <button class="tablinks @EnvClass" @onclick=@(() => ShowHideIndex(1))>Goal Envelope</button>
    }
    @* @if (Constants.RelevantMonthlies.Count > 0)
    {
        <button class="tablinks @MonthlyClass" @onclick=@(() => ShowHideIndex(2))>Recurring Transactions</button>
    } *@
</div>

@if (ShowBal)
{
    <div class="tabcontent">
        <label>Select an account:</label>
        <br />
        <select @bind=SelectedBalance title="Select Balance ">
            <option value="" selected>(Choose an Account)</option>
            @foreach (var bal in Balances.OrderBy(b => b.Name))
            {
                <option value=@bal.Id>@bal.Name</option>
            }
        </select>
    </div>

    @if (!string.IsNullOrEmpty(SelectedBalance))
    {
        <InputBalance TheBalance=ThisBalance />
    }
}
else if (ShowEnv)
{
    <div class="tabcontent">
        <label>Select an envelope:</label>
        <br />
        <select @bind=SelectedEnv title="Selectn Envelope ">
            <option value="" selected>(Choose an Envelope)</option>
            @foreach (var envs in Envelopes.OrderBy(e => e.Name))
            {
                <option value=@envs.Id>@envs.Name</option>
            }
        </select>
    </div>
    @if (!string.IsNullOrEmpty(SelectedEnv))
    {
        <UpdateEnvelope Id="@selectedEnv"
                        EnvName="@NameEnv"
                        WillPayPerson1="@WillPayPerson1Env"
                        WillPayPerson2="@WillPayPerson2Env"
                        Person1Amount="@Person1AmountEnv"
                        Person2Amount="@Person2AmountEnv"
                        GoalAmount="@GoalAmountEnv"
                        UpdateCheck="@UpdateCheckEnv" />
    }
}
else if (ShowMon)
{
    <div class="tabcontent">
        <label>Select a recurring transaction:</label>
        <br />
        <select @bind=SelectedMonthly title="Select Recurring Transaction">
            <option value="" selected>(Choose a recurring transaction)</option>
            @foreach (var mon in Monthlies)
            {
                <option>@mon</option>
            }
        </select>
    </div>

    @if (!string.IsNullOrEmpty(SelectedMonthly))
    {
        <div><i>Soon</i></div>
        @* <InputBalance TheBalance=ThisMonthly /> *@
    }
}

@code {
    // index0 => Balance
    // index1 => Envelope
    // index2 => Monthly
    bool[] ShowHides = new bool[] { true, false, false };

    /* Start BALANCE */
    private string NameBal;
    private string BalanceType;
    private string APRBal;
    private string CurAmountBal;
    private string PersonBal;
    private string ColorBal = "#32A852";
    private string TColorBal = "#32A852";

    private List<Balance> Balances => Constants.Balances;
    private bool ShowBal => ShowHides[0];
    private string BalClass => ShowBal ? "active" : "";

    private Balance ThisBalance;
    private string selectedBalance;
    private string SelectedBalance
    {
        get { return selectedBalance; }
        set
        {
            selectedBalance = value;
            SetBalVals();
            StateHasChanged();
        }
    }

    private void SetBalVals()
    {
        if (string.IsNullOrEmpty(SelectedBalance))
            return;

        ThisBalance = Balances.FirstOrDefault(b => b.Id == SelectedBalance);
    }
    /* End BALANCE */

    /* Start ENVELOPE */
    private string NameEnv;
    private string WillPayPerson1Env;
    private string WillPayPerson2Env;
    private double Person1AmountEnv;
    private double Person2AmountEnv;
    private string GoalAmountEnv;
    private bool UpdateCheckEnv;

    private List<Data.Envelope> Envelopes => Constants.Envelopes;
    private bool ShowEnv => ShowHides[1];
    private string EnvClass => ShowEnv ? "active" : "";


    private string selectedEnv;
    private string SelectedEnv
    {
        get { return selectedEnv; }
        set
        {
            selectedEnv = value;
            SetEnvVals();
            StateHasChanged();
        }
    }

    private void SetEnvVals()
    {
        if (string.IsNullOrEmpty(SelectedEnv))
            return;

        var ThisEnv = Envelopes.FirstOrDefault(b => b.Id == SelectedEnv);

        if (ThisEnv != null)
        {
            NameEnv = ThisEnv.Name;
            WillPayPerson1Env = ThisEnv.Person1Account;
            WillPayPerson2Env = ThisEnv.Person2Account;
            Person1AmountEnv = Math.Round(ThisEnv.Person1Amount, 2);
            Person2AmountEnv = Math.Round(ThisEnv.Person2Amount, 2);
            GoalAmountEnv = Math.Round(ThisEnv.Goal, 2).ToString();
            UpdateCheckEnv = ThisEnv.UpdateGoal == 0 ? false : true;
        }
    }
    /* End ENVELOPE */

    /* Start Monthly */
    private List<string> Monthlies => Constants.RelevantMonthlies.OrderBy(mo => mo.Name).Select(m => m.Name).Distinct().ToList();
    private bool ShowMon => ShowHides[2];
    private string MonthlyClass => ShowMon ? "active" : "";

    private Monthly ThisMonthly;
    private string selectedMonthly;
    private string SelectedMonthly
    {
        get { return selectedMonthly; }
        set
        {
            selectedMonthly = value;
            ThisMonthly = Constants.Monthlies.FirstOrDefault(m => m.Id == selectedMonthly);
            StateHasChanged();
        }
    }

    /* End BALANCE */

    protected override async Task OnInitializedAsync()
    {
        Constants.CurPage = "Update";
        SelectedBalance = "";
        SelectedEnv = "";
        Constants.BalancesChanged += BalancesUpdated;
        Constants.EnvelopesChanged += EnvelopesUpdated;
    }

    private void ShowHideIndex(int ind)
    {
        for (int index = 0; index < ShowHides.Length; index++)
            ShowHides[index] = index == ind;
    }

    private void BalancesUpdated(object sender, List<Balance> e)
    {
        SelectedBalance = "";
        StateHasChanged();
    }

    private void EnvelopesUpdated(object sender, List<Data.Envelope> e)
    {
        SelectedEnv = Envelopes.Count > 0 ? Envelopes[0].Name : "";
        StateHasChanged();
    }

    public void Dispose()
    {
        Constants.BalancesChanged -= BalancesUpdated;
        Constants.EnvelopesChanged -= EnvelopesUpdated;
    }
}
