@page "/update"
@using BetterBudgetWeb.Data;
@using BetterBudgetWeb.Repo;
@using BetterBudgetWeb.Shared.InputActions
@using BetterBudgetWeb.Shared.UpdateActions
@inject IJSRuntime JSRuntime
@implements IDisposable

<GoogleAnalytic />

<PageTitle>Update</PageTitle>

@if (!Constants.Mobile)
{
    <h1 style="font-family:'CBB Default'">Update</h1>
}

<div class="tab">
    <button class="tablinks @BalClass" @onclick="@ShowBalance">Account</button>
    @if (Constants.Envelopes.Count > 0)
    {
        <button class="tablinks @EnvClass" @onclick="@ShowEnvelope">Goal Envelope</button>
    }
</div>

@if (ShowBal)
{
    <div class="tabcontent">
        <label>Select a Account:</label>
        <br />
        <select @bind=SelectedBalance title="Select Balance ">
            <option value="" selected>(Choose an Account)</option>
            @foreach (var bal in Balances.OrderBy(b => b.Name))
            {
                <option value=@bal.Id>@bal.Name</option>
            }
        </select>
    </div>

    @if (!string.IsNullOrEmpty(SelectedBalance))
    {
        <InputBalance Id="@SelectedBalance"
                       BalName="@NameBal"
                       APR="@APRBal"
                       Amount="@CurAmountBal"
                       BalanceType="@BalanceType"
                       Color="@ColorBal"
                       TextColor="@TColorBal"
                       Person="@PersonBal"
                       PaidThroughWork="@(BalanceType == "Stocks" && int.TryParse(APRBal,out int apr) && apr == 1)">
        </InputBalance>
    }
}
else if (ShowEnv)
{
    <div class="tabcontent">
        <label>Select an Envelope:</label>
        <br />
        <select @bind=SelectedEnv title="Selectn Envelope ">
            <option value="" selected>(Choose an Envelope)</option>
            @foreach (var envs in Envelopes.OrderBy(e => e.Name))
            {
                <option value=@envs.Id>@envs.Name</option>
            }
        </select>
    </div>
    @if (!string.IsNullOrEmpty(SelectedEnv))
    {
        <UpdateEnvelope Id="@selectedEnv"
                        EnvName="@NameEnv"
                        WillPayPerson1="@WillPayPerson1Env"
                        WillPayPerson2="@WillPayPerson2Env"
                        Person1Amount="@Person1AmountEnv"
                        Person2Amount="@Person2AmountEnv"
                        GoalAmount="@GoalAmountEnv"
                        UpdateCheck="@UpdateCheckEnv" />
    }
}

@code {
    /* Start BALANCE */
    private string NameBal;
    private string BalanceType;
    private string APRBal;
    private string CurAmountBal;
    private string PersonBal;
    private string ColorBal = "#32A852";
    private string TColorBal = "#32A852";

    private List<Balance> Balances => Constants.Balances;
    private bool ShowBal { get; set; } = true;
    private string BalClass => ShowBal ? "active" : "";

    private string selectedBalance;
    private string SelectedBalance
    {
        get { return selectedBalance; }
        set
        {
            selectedBalance = value;
            SetBalVals();
            StateHasChanged();
        }
    }

    private void ShowBalance()
    {
        ShowBal = !ShowBal;
        ShowEnv = false;
    }

    private void SetBalVals()
    {
        if (string.IsNullOrEmpty(SelectedBalance))
            return;

        Balance ThisBalance = Balances.FirstOrDefault(b => b.Id == SelectedBalance);

        if (ThisBalance != null)
        {
            NameBal = ThisBalance.Name;
            APRBal = "" + ThisBalance.APR;
            CurAmountBal = "" + ThisBalance.Value;
            BalanceType = ThisBalance.BalanceType;
            ColorBal = ThisBalance.HexColor;
            TColorBal = ThisBalance.TextColor;
            PersonBal = ThisBalance.Person;
        }
    }
    /* End BALANCE */

    /* Start ENVELOPE */
    private string NameEnv;
    private string WillPayPerson1Env;
    private string WillPayPerson2Env;
    private double Person1AmountEnv;
    private double Person2AmountEnv;
    private string GoalAmountEnv;
    private bool UpdateCheckEnv;

    private List<Data.Envelope> Envelopes => Constants.Envelopes;
    private bool ShowEnv { get; set; }
    private string EnvClass => ShowEnv ? "active" : "";


    private string selectedEnv;
    private string SelectedEnv
    {
        get { return selectedEnv; }
        set
        {
            selectedEnv = value;
            SetEnvVals();
            StateHasChanged();
        }
    }

    private void ShowEnvelope()
    {
        ShowEnv = !ShowEnv;
        ShowBal = false;
    }

    private void SetEnvVals()
    {
        if (string.IsNullOrEmpty(SelectedEnv))
            return;

        var ThisEnv = Envelopes.FirstOrDefault(b => b.Id == SelectedEnv);

        if (ThisEnv != null)
        {
            NameEnv = ThisEnv.Name;
            WillPayPerson1Env = ThisEnv.Person1Account;
            WillPayPerson2Env = ThisEnv.Person2Account;
            Person1AmountEnv = Math.Round(ThisEnv.Person1Amount, 2);
            Person2AmountEnv = Math.Round(ThisEnv.Person2Amount, 2);
            GoalAmountEnv = Math.Round(ThisEnv.Goal, 2).ToString();
            UpdateCheckEnv = ThisEnv.UpdateGoal == 0 ? false : true;
        }
    }
    /* End ENVELOPE */

    protected override async Task OnInitializedAsync()
    {
        Constants.CurPage = "Update";
        SelectedBalance = "";
        SelectedEnv = "";
        Constants.BalancesChanged += BalancesUpdated;
        Constants.EnvelopesChanged += EnvelopesUpdated;
    }

    private void BalancesUpdated(object sender, List<Balance> e)
    {
        SelectedBalance = Balances.Count > 0 ? Balances[0].Name : "";
        ShowBal = false;
        StateHasChanged();
    }

    private void EnvelopesUpdated(object sender, List<Data.Envelope> e)
    {
        SelectedEnv = Envelopes.Count > 0 ? Envelopes[0].Name : "";
        ShowEnv = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        Constants.BalancesChanged -= BalancesUpdated;
        Constants.EnvelopesChanged -= EnvelopesUpdated;
    }
}
