@using BetterBudgetWeb.Data
@using BetterBudgetWeb.MonthView
@if (Mobile)
{
    <div style="width:100%;margin:0 0 2vh 0">
        <table class="toggle-table">
            <tr>
                <th colspan="2" style="background-color:dodgerblue;color:white"><i>Savings Goals</i></th>
            </tr>
            @foreach (var sg in ThisMonthSavingsGoals)
            {
                <tr>
                    <td style="padding:.5vw 0;">@sg.Person</td>
                    <td>@Constants.Pretty(sg.Goal)</td>
                </tr>
            }
            <tr>
                <td colspan="2">=</td>
            </tr>
            <tr>
                <td><strong>Total</strong></td>
                <td>@Constants.Pretty(MonthViewConstants.SavingsGoals.Sum(s => s.Goal))</td>
            </tr>
        </table>
    </div>
}
else
{
    <div style="width:100%; margin:0 0 2vh 0">
        <table class="toggle-table">
            <tr>
                <th colspan="2" style="background-color:dodgerblue;color:white"><i>Savings Goals</i></th>
            </tr>
            @foreach (var sg in ThisMonthSavingsGoals)
            {
                <tr>
                    <td style="padding:.5vw 0;">@sg.Person</td>
                    <td>@Constants.Pretty(sg.Goal)</td>
                </tr>
            }
            <tr>
                <td colspan="2">=</td>
            </tr>
            <tr>
                <td><strong>Total</strong></td>
                <td>@Constants.Pretty(ThisMonthSavingsGoals.Sum(s => s.Goal))</td>
            </tr>
        </table>
    </div>
}

@code {
    public bool Mobile => Constants.Mobile;

    public int month { get; set; }= DateTime.Now.Month;
    public int year { get; set; } = DateTime.Now.Year;
    [Parameter]
    public int Month { get { return month; } set{ month = value;  ReDrive(); } }
    [Parameter]
    public int Year { get { return year; } set{ year = value;  ReDrive(); } }

    private List<SavingsGoal> ThisMonthSavingsGoals { get; set; } = new List<SavingsGoal>();
    private SavingsGoal Default1;
    private SavingsGoal Default2;

    protected override Task OnInitializedAsync()
    {

        Default1 = MonthViewConstants.SavingsGoals.FirstOrDefault(sg => sg.Person.Contains(Constants.Person1) && sg.Month == "All");
        Default2 = MonthViewConstants.SavingsGoals.FirstOrDefault(sg => sg.Person.Contains(Constants.Person2) && sg.Month == "All");
        ReDrive();
        return base.OnInitializedAsync();
    }

    public void ReDrive()
    {
        ThisMonthSavingsGoals = new List<SavingsGoal>();
        MonthViewConstants.SetMonthlies(Month, Year);
        SavingsGoal ThisMonthPerson1 = MonthViewConstants.SavingsGoals.FirstOrDefault(sg => sg.Person == Constants.Person1 && sg.MonthYear() == MonthViewConstants.MonthYear(Month, Year));
        SavingsGoal ThisMonthPerson2 = MonthViewConstants.SavingsGoals.FirstOrDefault(sg => sg.Person == Constants.Person2 && sg.MonthYear() == MonthViewConstants.MonthYear(Month, Year));

        if (ThisMonthPerson1 == null)
            ThisMonthSavingsGoals.Add(Default1);
        else
            ThisMonthSavingsGoals.Add(ThisMonthPerson1);

        if (ThisMonthPerson2 == null)
            ThisMonthSavingsGoals.Add(Default2);
        else
            ThisMonthSavingsGoals.Add(ThisMonthPerson2);

    }
}
