@using BetterBudgetWeb.Data
@using BetterBudgetWeb.MainMenuItems
@using BetterBudgetWeb.Repo;

<div class="chart-back-hor" style="width:100%;">
    <div class="flex-r" style="width:100%;justify-content:space-evenly">
        <div class="flex-c-start">
            <span>INCOME</span>
            <input type="number" placeholder="Income" style="width:5em;padding:0;margin:0;margin-bottom:1vh"
            @bind=ProjectedIncomeAmountStr />
        </div>
        <div class="flex-c-start">
            <span>EXPENSES</span>
            <span style="color:@Constants.GoodOrBad(-(CostAmount))">@Constants.Pretty(CostAmount)</span>
        </div>
        <div class="flex-c-start">
            <span>NET</span>
            <span style="color:@Constants.GoodOrBad(ProjectedNetAmount)">@Constants.Pretty(ProjectedNetAmount)</span>
        </div>
    </div>
    @if (Expenses != null && Expenses.Count > 0)
    {
        <div>
            <MyDoughnutChart @ref=Donut Expenses="Expenses" />
        </div>
    }
</div>

@code {
    [CascadingParameter]
    public MonthRelations MR { get; set; }

    private List<ExpenseAmount> Expenses => MR.Expenses;

    private MyDoughnutChart Donut;
    public bool Mobile => Constants.Mobile;
    private double costAmount { get; set; }
    [Parameter]
    public int Month { get; set; }
    [Parameter]
    public double CostAmount
    {
        get { return costAmount; }
        set
        {
            if (value == costAmount)
                return;

            costAmount = value;
            Donut?.Redrive(Expenses);
        }
    }

    public double incomeOverflow { get; set; }
    [Parameter]
    public double IncomeOverflow
    {
        get => incomeOverflow;
        set
        {
            if (incomeOverflow == value) return;
            incomeOverflow = value;
            IncomeOverflowChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<double> IncomeOverflowChanged { get; set; }

    public string projectedIncomeAmountStrOG { get; set; }
    public string projectedIncomeAmountStr { get; set; }
    public string ProjectedIncomeAmountStr
    {
        get { return projectedIncomeAmountStr; }
        set
        {
            if (double.TryParse(value, out double tosser))
            {
                ProjectedIncomeAmount = tosser;
                IncomeOverflow = ProjectedNetAmount;
                projectedIncomeAmountStr = value;
            }
            else
            {
                ProjectedIncomeAmount = 0;
                projectedIncomeAmountStr = "";
            }
        }
    }

    [Parameter]
    public double ProjectedIncomeAmount { get; set; }

    public double ProjectedNetAmount => ProjectedIncomeAmount - CostAmount;

    private List<SavingsGoal> ThisMonthSavingsGoals { get; set; } = new List<SavingsGoal>();

    protected override Task OnInitializedAsync()
    {
        SavingsGoal Default1 = Constants.SavingsGoals.FirstOrDefault(sg => sg.Person.Contains(Constants.Person1) && sg.Month == "All");
        SavingsGoal Default2 = Constants.SavingsGoals.FirstOrDefault(sg => sg.Person.Contains(Constants.Person2) && sg.Month == "All");

        if (Default1 == null || Default2 == null)
            return base.OnInitializedAsync();

        ThisMonthSavingsGoals.Add(Default1);
        ThisMonthSavingsGoals.Add(Default2);

        projectedIncomeAmountStrOG = ThisMonthSavingsGoals.Sum(tmsg => tmsg.Goal).ToString();
        ProjectedIncomeAmountStr = projectedIncomeAmountStrOG;

        return base.OnInitializedAsync();
    }
}
