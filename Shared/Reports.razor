@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Repo
@using BetterBudgetWeb.Runner
@using BetterBudgetWeb.Simulation
@using System.Globalization
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inject IJSRuntime jsRuntime
<style>
    option {
        color: black;
    }

    select {
        color: black;
    }

    input {
        color: black;
    }

    button {
        color: black;
    }

    td {
        padding: 0 2vw;
    }
</style>
@if (!Mobile)
{
    <div class="modal show" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true" style="background-color:rgba(0,0,0,.8);">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="width:fit-content;position: absolute;left: 50%; top: 50%;
                        transform: translate(-50%, 0%);background-image:url('https://www.publicdomainpictures.net/pictures/410000/velka/pergament-papier-hintergrund-braun.jpg');">
                <div class="modal-header">
                    <h5 class="modal-title" style="font-size:large;font-family:Papyrus;color:black;">
                        <strong>Your Reports</strong>
                    </h5>
                    <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="@ModalCancel">
                    </button>
                </div>
                <div class="modal-body" style="width:fit-content;color:black;">
                    <div style="display:flex;flex-direction:column;flex-wrap:wrap;justify-content:center;">
                        @if (SFDs != null && SFDs.Count > 0)
                        {
                            @if (Years != null && Years.Count > 1)
                            {
                                <div class="tab" style="width:100%">
                                    @foreach (var y in Years)
                                    {
                                        <button class="tablinks @y.MyClass" @onclick="() => ToggleYClasses(y.MyYear)">@y.MyYear</button>
                                    }
                                    <div class="tab" style="width:100%">
                                        @foreach (var mt in MonthTabs.Where(m => m.MyYear == Years.FirstOrDefault(ye => ye.MyClass == "active").MyYear))
                                        {
                                            <button class="tablinks @mt.MyClass" @onclick="() => ToggleClasses(mt.MyMonth)">@mt.MyMonth</button>
                                        }
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="tab" style="width:100%;">
                                    @foreach (var mt in MonthTabs)
                                    {
                                        <button class="tablinks @mt.MyClass" @onclick="() => ToggleClasses(mt.MyMonth)">@mt.MyMonth</button>
                                    }
                                    <br style="clear:both" />
                                </div>
                            }
                                <div class="tabcontent" style="display:flex;flex-direction:row; justify-content:space-between;">
                                    <table>
                                        <tr>
                                            <th>
                                                Statistic
                                            </th>
                                            <th>
                                                @Constants.Person1
                                            </th>
                                            <th>
                                                @Constants.Person2
                                            </th>
                                            <th>
                                                Total
                                            </th>
                                        </tr>
                                        <tr>
                                            <td>Transactions:</td>
                                            <td>@Person1TransCount</td>
                                            <td>@Person2TransCount</td>
                                            <td>
                                                @TotalTransCount
                                                @if (Person1TransCount + Person2TransCount > TotalTransCount)
                                                {
                                                    <br />
                                                    <span>@($"(Overlapped: {Person1TransCount + Person2TransCount - TotalTransCount})")</span>
                                                }
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                Projected Expense Total:
                                            </td>
                                            <td>@Pretty(Person1Projected)</td>
                                            <td>@Pretty(Person2Projected)</td>
                                            <td>@Pretty(TotalProjected)</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                Actual Expense Total:
                                            </td>
                                            <td class="income-bad">@Pretty(Person1Actual)</td>
                                            <td class="income-bad">@Pretty(Person2Actual)</td>
                                            <td class="income-bad">@Pretty(TotalActual)</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                Income + Added Equity Total:
                                            </td>
                                            <td class="income-good">@Pretty(Person1Income)</td>
                                            <td class="income-good">@Pretty(Person2Income)</td>
                                            <td class="income-good">@Pretty(TotalIncome)</td>
                                        </tr>
                                        <tr>
                                            <td colspan="4">=</td>
                                        </tr>
                                        <tr>
                                            <td>
                                                Net for Month:
                                            </td>
                                            <td class="@TranColor(Person1Income - Person1Actual)">@Pretty(Person1Income - Person1Actual)</td>
                                            <td class="@TranColor(Person2Income - Person2Actual)">@Pretty(Person2Income - Person2Actual)</td>
                                            <td class="@TranColor(TotalIncome - TotalActual)">@Pretty(TotalIncome - TotalActual)</td>
                                        </tr>
                                    </table>
                                    <br style="clear:both;" />
                                    <table style="margin-left:1vw;">
                                        <tr>
                                            <th colspan="4" style="background-color:magenta;color:white;"><i>Dynamic Monthly Costs</i></th>
                                        </tr>
                                        <tr>
                                            <th>Expense</th>
                                            <th>Total Budget Amount</th>
                                            <th>Spent</th>
                                            <th>Difference</th>
                                        </tr>
                                        @foreach (var sfd in SFDs)
                                        {
                                            @if (sfd.Name.Contains("EXAMPLE DATA"))
                                            {
                                                <tr>
                                                    <td style="padding:.5vw 1vw;cursor:pointer;"><i>@sfd.Name</i></td>
                                                    <td>@Pretty(sfd.Projected)</td>
                                                    <td>@Pretty(sfd.Actual)</td>
                                                    <td>@Pretty(sfd.Projected - sfd.Actual)</td>
                                                </tr>
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td style="padding:.5vw 1vw;cursor:pointer;">@sfd.Name</td>
                                                    <td>@Pretty(sfd.Projected)</td>
                                                    <td>@Pretty(sfd.Actual)</td>
                                                    <td class="@TranColor(sfd.Projected - sfd.Actual)">@Pretty(sfd.Projected - sfd.Actual)</td>
                                                </tr>
                                            }
                                        }
                                        <tr>
                                            <td colspan="4">=</td>
                                        </tr>
                                        <tr>
                                            <td><strong>Total</strong></td>
                                            <td>@Pretty(SFDs.Sum(d => d.Projected))</td>
                                            <td>@Pretty(SFDs.Sum(d => d.Actual))</td>
                                            <td class="@TranColor(SFDs.Sum(d => d.Projected) - SFDs.Sum(d => d.Actual))">@Pretty(SFDs.Sum(d => d.Projected) - SFDs.Sum(d => d.Actual))</td>
                                        </tr>
                                    </table>
                                </div>
                        }
                        else
                        {
                            <div style="display:flex;flex-direction:column;flex-wrap:wrap;justify-content:center;">
                                <div style="text-align:center;font-size:1vw">Loading...</div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="modal show" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" aria-hidden="true" style="background-color:rgba(0,0,0,.8);display: block !important;">
        <div class="modal-dialog" style="overflow-y: initial !important" role="document">
            <div class="modal-content" style="width:fit-content;absolute;left: 50%; top: 50%;
                        transform: translate(-50%, 0%);background-image:url('https://www.publicdomainpictures.net/pictures/410000/velka/pergament-papier-hintergrund-braun.jpg');">
                <div class="modal-header">
                    <h5 class="modal-title" style="font-size:large;font-family:Papyrus;color:black;">
                        <strong>Your Reports</strong>
                    </h5>
                    <button type="button" class="btn-close" data-dismiss="modal" aria-label="Close" @onclick="@ModalCancel">
                    </button>
                </div>
                <div class="modal-body" style="width:fit-content;max-height:85vh;color:black;overflow-y:scroll;">
                    @if (SFDs != null && SFDs.Count > 0)
                    {
                        @if (Years != null && Years.Count > 1)
                        {
                            <div class="tab" style="width:100%">
                                @foreach (var y in Years)
                                {
                                    <button class="tablinks @y.MyClass" @onclick="() => ToggleYClasses(y.MyYear)">@y.MyYear</button>
                                }
                                <div class="tab" style="width:100%">
                                    @foreach (var mt in MonthTabs.Where(m => m.MyYear == Years.FirstOrDefault(ye => ye.MyClass == "active").MyYear))
                                    {
                                        <button class="tablinks @mt.MyClass" @onclick="() => ToggleClasses(mt.MyMonth)">@mt.MyMonth</button>
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="tab" style="width:100%;">
                                @foreach (var mt in MonthTabs)
                                {
                                    <button class="tablinks @mt.MyClass" @onclick="() => ToggleClasses(mt.MyMonth)">@mt.MyMonth</button>
                                }
                                <br style="clear:both" />
                            </div>
                        }
                            <div style="display:flex;flex-direction:column;justify-content:space-between;">
                                <div>
                                    <table>
                                        <tr>
                                            <th style="font-size:3vw;padding:5px">
                                                Statistic
                                            </th>
                                            <th style="font-size:3vw;padding:5px">
                                                @Constants.Person1
                                            </th>
                                            <th style="font-size:3vw;padding:5px">
                                                @Constants.Person2
                                            </th>
                                            <th style="font-size:3vw;padding:5px">
                                                Total
                                            </th>
                                        </tr>
                                        <tr>
                                            <td style="font-size:3vw;padding:5px">Transactions:</td>
                                            <td style="font-size:3vw;padding:5px">@Person1TransCount</td>
                                            <td style="font-size:3vw;padding:5px">@Person2TransCount</td>
                                            <td style="font-size:3vw;padding:5px">
                                                @TotalTransCount
                                                @if (Person1TransCount + Person2TransCount > TotalTransCount)
                                                {
                                                    <br />
                                                    <span>@($"(Overlapped: {Person1TransCount + Person2TransCount - TotalTransCount})")</span>
                                                }
                                            </td>
                                        </tr>
                                        <tr>
                                            <td style="font-size:3vw;padding:5px">
                                                Projected Expense Total:
                                            </td>
                                            <td style="font-size:3vw;padding:5px">@Pretty(Person1Projected)</td>
                                            <td style="font-size:3vw;padding:5px">@Pretty(Person2Projected)</td>
                                            <td style="font-size:3vw;padding:5px">@Pretty(TotalProjected)</td>
                                        </tr>
                                        <tr>
                                            <td style="font-size:3vw;padding:5px">
                                                Actual Expense Total:
                                            </td>
                                            <td class="income-bad" style="font-size:3vw;padding:5px">@Pretty(Person1Actual)</td>
                                            <td class="income-bad" style="font-size:3vw;padding:5px">@Pretty(Person2Actual)</td>
                                            <td class="income-bad" style="font-size:3vw;padding:5px">@Pretty(TotalActual)</td>
                                        </tr>
                                        <tr>
                                            <td style="font-size:3vw;padding:5px">
                                                Income + Added Equity Total:
                                            </td>
                                            <td class="income-good" style="font-size:3vw;padding:5px">@Pretty(Person1Income)</td>
                                            <td class="income-good" style="font-size:3vw;padding:5px">@Pretty(Person2Income)</td>
                                            <td class="income-good" style="font-size:3vw;padding:5px">@Pretty(TotalIncome)</td>
                                        </tr>
                                        <tr>
                                            <td colspan="4" style="font-size:3vw;padding:5px">=</td>
                                        </tr>
                                        <tr>
                                            <td style="font-size:3vw;padding:5px">
                                                Net for Month:
                                            </td>
                                            <td class="@TranColor(Person1Income - Person1Actual)" style="font-size:3vw;padding:5px">@Pretty(Person1Income - Person1Actual)</td>
                                            <td class="@TranColor(Person2Income - Person2Actual)" style="font-size:3vw;padding:5px">@Pretty(Person2Income - Person2Actual)</td>
                                            <td class="@TranColor(TotalIncome - TotalActual)" style="font-size:3vw;padding:5px">@Pretty(TotalIncome - TotalActual)</td>
                                        </tr>
                                    </table>
                                </div>
                                <br style="clear:both;" />
                                <div>
                                    <table style="margin-left:1vw;">
                                        <tr>
                                            <th colspan="4" style="font-size:3vw;background-color:magenta;color:white;"><i>Dynamic Monthly Costs</i></th>
                                        </tr>
                                        <tr>
                                            <th style="font-size:3vw;padding:5px">Expense</th>
                                            <th style="font-size:3vw;padding:5px">Total Budget Amount</th>
                                            <th style="font-size:3vw;padding:5px">Spent</th>
                                            <th style="font-size:3vw;padding:5px">Difference</th>
                                        </tr>
                                        @foreach (var sfd in SFDs)
                                        {
                                            @if (sfd.Name.Contains("EXAMPLE DATA"))
                                            {
                                                <tr>
                                                    <td style="font-size:3vw;padding:.5vw 1vw;cursor:pointer;"><i>@sfd.Name</i></td>
                                                    <td style="font-size:3vw;padding:5px">@Pretty(sfd.Projected)</td>
                                                    <td style="font-size:3vw;padding:5px">@Pretty(sfd.Actual)</td>
                                                    <td style="font-size:3vw;padding:5px">@Pretty(sfd.Projected - sfd.Actual)</td>
                                                </tr>
                                            }
                                            else
                                            {
                                                <tr>
                                                    <td style="font-size:3vw;padding:.5vw 1vw;cursor:pointer;">@sfd.Name</td>
                                                    <td style="font-size:3vw;padding:5px">@Pretty(sfd.Projected)</td>
                                                    <td style="font-size:3vw;padding:5px">@Pretty(sfd.Actual)</td>
                                                    <td class="@TranColor(sfd.Projected - sfd.Actual)" style="font-size:3vw;padding:5px">@Pretty(sfd.Projected - sfd.Actual)</td>
                                                </tr>
                                            }
                                        }
                                        <tr>
                                            <td colspan="4" style="font-size:3vw;padding:5px">=</td>
                                        </tr>
                                        <tr>
                                            <td style="font-size:3vw;padding:5px"><strong>Total</strong></td>
                                            <td style="font-size:3vw;padding:5px">@Pretty(SFDs.Sum(d => d.Projected))</td>
                                            <td style="font-size:3vw;padding:5px">@Pretty(SFDs.Sum(d => d.Actual))</td>
                                            <td class="@TranColor(SFDs.Sum(d => d.Projected) - SFDs.Sum(d => d.Actual))" style="font-size:3vw;padding:5px">@Pretty(SFDs.Sum(d => d.Projected) - SFDs.Sum(d => d.Actual))</td>
                                        </tr>
                                    </table>
                                </div>

                            </div>
                    }
                    else
                    {
                        <span>Loading...</span>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public bool Mobile { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private List<MonthTab> MonthTabs { get; set; } = new List<MonthTab>();
    private List<YearTab> Years = new List<YearTab>();

    private List<Transaction> Trans = new List<Transaction>();

    private int Person1TransCount { get; set; }
    private int Person2TransCount { get; set; }
    private int TotalTransCount { get; set; }

    private double Person1Projected { get; set; }
    private double Person2Projected { get; set; }
    private double TotalProjected { get; set; }

    private double Person1Actual { get; set; }
    private double Person2Actual { get; set; }
    private double TotalActual { get; set; }

    private double Person1Income { get; set; }
    private double Person2Income { get; set; }
    private double TotalIncome { get; set; }

    private string SelectedMonth { get; set; }
    private string SelectedYear { get; set; }

    private List<SnapForDynamic> SFDs = new List<SnapForDynamic>();

    private List<DynamicCostItem> DCIs = new List<DynamicCostItem>();
    private List<StaticMonthlyCost> SMCs = new List<StaticMonthlyCost>();
    private List<Snapshot> snaps = new List<Snapshot>();

    protected override async Task OnInitializedAsync()
    {
        var MonthYears = IndexRunner.GetMonths(Constants.Transactions);
        if (MonthYears.Count > 0)
        {
            string[] splitter = MonthYears[MonthYears.Count - 1].Split();
            string CurYear = splitter[1];
            string ThisMonth = DateTime.Now.ToString("MMMM");

            Years.Add(new YearTab { MyYear = CurYear, MyClass = CurYear == DateTime.Now.Year.ToString() ? "active" : "" });
            MonthTabs.Add(new MonthTab { MyMonth = splitter[0], MyYear = splitter[1], MyClass = "" });

            for (int index = MonthYears.Count - 2; index >= 0; index--)
            {
                splitter = MonthYears[index].Split();

                if (splitter[1] != CurYear)
                {
                    MonthTabs.Add(new MonthTab { MyMonth = "All", MyYear = CurYear, MyClass = "" });
                    CurYear = splitter[1];
                    Years.Add(new YearTab { MyYear = CurYear, MyClass = CurYear == DateTime.Now.Year.ToString() ? "active" : "" });
                }

                MonthTabs.Add(new MonthTab { MyMonth = splitter[0], MyYear = CurYear, MyClass = "" });
            }

            MonthTabs.Add(new MonthTab { MyMonth = "All", MyYear = CurYear, MyClass = "active" });
            snaps = await SnapshotRepo.GetSnapshotsAsync();
        }

        // Highest month ia unused now. Uncomment if needed later
        /*        int highest_month = 0;
        foreach (var sn in snaps)
        {
            if (Constants.Months.IndexOf(sn.Month) >= highest_month && sn.Year == DateTime.Now.Year)
                highest_month = Constants.Months.IndexOf(sn.Month);
        }
        */

        /* Line below used to be in if that said:
         *       if ((Constants.Months.IndexOf(DateTime.Now.ToString("MMMM")) > highest_month) || (highest_month == 0 && DateTime.Now.Month == 1))
         *
         * Now: Always set Previous Month in case updates are made up to 1 month later
         */
        await SetSnapshot(DateTime.Now.AddMonths(-1));

        if (Years.Count == 1 && Years[0].MyClass != "active")
            Years[0].MyClass = "active";

        await SetSnapshot(DateTime.Now);

        await LoadTable();
    }

    private async Task LoadTable()
    {
        Trans.Clear();
        DCIs.Clear();
        SMCs.Clear();

        Dynamo dyna;
        SFDs = new List<SnapForDynamic>();
        SnapForDynamic sfd = new SnapForDynamic();


        int monthInt;
        int yearInt;

        SelectedMonth = MonthTabs.FirstOrDefault(m => m.MyClass == "active").MyMonth;
        SelectedYear = Years.FirstOrDefault(y => y.MyClass == "active").MyYear;

        if (SelectedMonth == "All")
        {
            Trans = new List<Transaction>(Constants.Transactions.Where(t => t.DateOfTransaction.Year.ToString() == SelectedYear));

            List<Snapshot> ThisYearSnaps = snaps.Where(sn => sn.Year.ToString() == SelectedYear).ToList();

            Person1TransCount = ThisYearSnaps.Sum(sn => sn.Person1Transactions);
            Person2TransCount = ThisYearSnaps.Sum(sn => sn.Person2Transactions);
            TotalTransCount = ThisYearSnaps.Sum(sn => sn.TotalTransactions);

            Person1Projected = ThisYearSnaps.Sum(sn => sn.Person1AmountProjected);
            Person2Projected = ThisYearSnaps.Sum(sn => sn.Person2AmountProjected);

            Person1Actual = ThisYearSnaps.Sum(sn => sn.Person1AmountActual);
            Person2Actual = ThisYearSnaps.Sum(sn => sn.Person2AmountActual);

            Person1Income = ThisYearSnaps.Sum(sn => sn.Person1Income);
            Person2Income = ThisYearSnaps.Sum(sn => sn.Person2Income);

            SnapForDynamic exists;

            foreach (var dn in ThisYearSnaps.Select(s => s.DynamicJSON))
            {
                dyna = (Dynamo)JsonConvert.DeserializeObject<Dynamo>(dn);
                if (!MonthTabs.Select(m => m.MyMonth).Contains(dyna.Month))
                    continue;

                foreach (JObject key in dyna.DynamicCosts)
                {
                    sfd = new SnapForDynamic
                        {
                            Name = key["Name"].ToString(),
                            Projected = double.TryParse(key["Projected"].ToString(), out double pro) ? pro : 0,
                            Actual = double.TryParse(key["Actual"].ToString(), out double act) ? act : 0
                        };

                    exists = SFDs.FirstOrDefault(s => s.Name.Trim() == sfd.Name.Trim());

                    if (exists == null)
                        SFDs.Add(sfd);
                    else
                    {
                        exists.Projected += sfd.Projected;
                        exists.Actual += sfd.Actual;
                    }
                }
            }
        }
        else
        {
            Trans = new List<Transaction>(Constants.Transactions.Where(t => t.MonthYear() == SelectedMonth + " " + SelectedYear));

            Snapshot SelSnap = snaps.FirstOrDefault(sn => sn.Month == SelectedMonth);

            Person1TransCount = SelSnap.Person1Transactions;
            Person2TransCount = SelSnap.Person2Transactions;
            TotalTransCount = SelSnap.TotalTransactions;

            Person1Projected = SelSnap.Person1AmountProjected;
            Person2Projected = SelSnap.Person2AmountProjected;

            Person1Actual = SelSnap.Person1AmountActual;
            Person2Actual = SelSnap.Person2AmountActual;

            Person1Income = SelSnap.Person1Income;
            Person2Income = SelSnap.Person2Income;

            dyna = (Dynamo)JsonConvert.DeserializeObject<Dynamo>(SelSnap.DynamicJSON);

            foreach (JObject key in dyna.DynamicCosts)
            {
                sfd = new SnapForDynamic
                    {
                        Name = key["Name"].ToString(),
                        Projected = double.TryParse(key["Projected"].ToString(), out double pro) ? pro : 0,
                        Actual = double.TryParse(key["Actual"].ToString(), out double act) ? act : 0
                    };

                SFDs.Add(sfd);
            }

            monthInt = DateTime.ParseExact(SelectedMonth, "MMMM", CultureInfo.CurrentCulture).Month;
            yearInt = int.Parse(SelectedYear);

            ReportRunner.SetMonthlies(monthInt, yearInt);

            foreach (var d in ReportRunner.DynamicCostItems)
            {
                double[] dciSums = ReportRunner.SumForDynamic(Trans, d.Name);
                d.SpentReport = dciSums[0] + dciSums[1];
            }

            DCIs = ReportRunner.DynamicCostItems;
        }

        TotalActual = Person1Actual + Person2Actual;
        TotalProjected = Person1Projected + Person2Projected;
        TotalIncome = Person1Income + Person2Income;

        StateHasChanged();
    }

    private async Task SetSnapshot(DateTime snapDate)
    {
        string thisMonth = snapDate.ToString("MMMM");
        string thisYear = snapDate.Year.ToString();

        Trans = new List<Transaction>(Constants.Transactions.Where(t => t.MonthYear() == thisMonth + " " + thisYear));

        int monthInt = snapDate.Month;
        int yearInt = snapDate.Year;
        ReportRunner.SetMonthlies(monthInt, yearInt);
        int TodayTransTotal = Trans.Count();
        int TodayTransPerson1Total = Trans.Where(t => t.Person1Amount != 0).Count();
        int TodayTransPerson2Total = Trans.Where(t => t.Person2Amount != 0).Count();

        foreach (var d in ReportRunner.DynamicCostItems)
        {
            double[] dciSums = ReportRunner.SumForDynamic(Trans, d.Name);
            d.SpentReport = dciSums[0] + dciSums[1];
        }

        var TodayDCIs = new List<DynamicCostItem>(ReportRunner.DynamicCostItems);
        var TodaySMCs = new List<StaticMonthlyCost>(ReportRunner.StaticMonthlyCosts);

        double TodayPerson1Projected = TodayDCIs.Sum(d => d.Person1Amount) + TodaySMCs.Sum(d => d.Person1Amount);
        double TodayPerson2Projected = TodayDCIs.Sum(d => d.Person2Amount) + TodaySMCs.Sum(d => d.Person2Amount);

        double TodayPerson1Actual = Trans.Where(t => !Constants.NotExpenses.Contains(t.ExpenseType)).Sum(d => d.Person1Amount);
        double TodayPerson2Actual = Trans.Where(t => !Constants.NotExpenses.Contains(t.ExpenseType)).Sum(d => d.Person2Amount);

        double TodayPerson1Income = Trans.Where(t => t.ExpenseType == "Income" || t.ExpenseType == "Equity").Sum(d => d.Person1Amount);
        double TodayPerson2Income = Trans.Where(t => t.ExpenseType == "Income" || t.ExpenseType == "Equity").Sum(d => d.Person2Amount);

        Dynamo TodayDyno = new Dynamo
            {
                Month = thisMonth,
                Year = thisYear,
                DynamicCosts = new JArray()
            };

        foreach (var dci in ReportRunner.DynamicCostItems)
        {
            dynamic jsonObject = new JObject();
            jsonObject.Name = dci.Name;
            jsonObject.Projected = dci.Person1Amount + dci.Person2Amount;
            jsonObject.Actual = dci.SpentReport;

            TodayDyno.DynamicCosts.Add(jsonObject);
        }

        var test = (string)JsonConvert.SerializeObject(TodayDyno);
        DateTime thisDateTime = new DateTime(yearInt, monthInt, 1);
        snaps = await SnapshotRepo.AddOrUpdateAsync(new Snapshot
            {
                Month = thisDateTime.ToString("MMMM"),
                Year = thisDateTime.Year,
                Person1Income = TodayPerson1Income,
                Person2Income = TodayPerson2Income,
                Person1Transactions = TodayTransPerson1Total,
                Person2Transactions = TodayTransPerson2Total,
                TotalTransactions = TodayTransTotal,
                Person1AmountProjected = TodayPerson1Projected,
                Person2AmountProjected = TodayPerson2Projected,
                Person1AmountActual = TodayPerson1Actual,
                Person2AmountActual = TodayPerson2Actual,
                DynamicJSON = test
            });

    }
    private string TranColor(double num)
    {
        if (num > 0)
            return "income-good";
        else
            return "income-bad";
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private async Task ModalDecline()
    {
        await OnClose.InvokeAsync(false);
    }

    private void ToggleClasses(string Month)
    {
        foreach (var m in MonthTabs)
        {
            if (m.MyMonth == Month)
                m.MyClass = "active";
            else
                m.MyClass = "";
        }

        LoadTable();
    }

    private void ToggleYClasses(string Year)
    {
        foreach (var y in Years)
        {
            if (y.MyYear == Year)
                y.MyClass = "active";
            else
                y.MyClass = "";
        }

        ToggleClasses("All");
        StateHasChanged();
    }
    protected async Task<string> ReadCookies(string CookieName)
    {
        string response;
        try
        {
            response = await jsRuntime.InvokeAsync<string>("ReadCookie", CookieName);
        }
        catch (Exception e)
        {
            response = null;
        }

        return response;
    }
    public async Task WriteCookieAsync(string name, string value, double days)
    {
        var test = await jsRuntime.InvokeAsync<object>("WriteCookie", name, value, days);
    }

    private string Pretty(double am)
    {
        return Constants.Pretty(am);
    }

    internal class SnapForDynamic
    {
        public string Name;
        public double Projected;
        public double Actual;
    }

    internal class Dynamo
    {
        public string Month = "";
        public string Year = "";
        public JArray DynamicCosts;
    }

    internal class MonthTab
    {
        public string MyMonth = "";
        public string MyYear = "";
        public string MyClass = "";
    }

    internal class YearTab
    {
        public string MyYear = "";
        public string MyClass = "";
    }
}
