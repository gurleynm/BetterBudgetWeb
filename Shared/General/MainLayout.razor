@using BetterBudgetWeb.Data;
@using BetterBudgetWeb.Pages
@using BetterBudgetWeb.Repo;
@using BetterBudgetWeb.Runner
@using BetterBudgetWeb.Shared.Balances
@using BetterBudgetWeb.Shared.LoginStuff
@inherits LayoutComponentBase
@inject IJSRuntime jsRuntime
@inject NavigationManager NavMan
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<style>
    body {
        color: @Constants.ColorScheme["Text"];
    }

    .toggle-table > tr:nth-child(even) {
        background-color: @Constants.ColorScheme["TableEven"];
        color: @Constants.ColorScheme["Text"];
    }

    .toggle-table > tr:nth-child(odd) {
        background-color: @Constants.ColorScheme["TableOdd"];
        color: @Constants.ColorScheme["Text"];
    }

    td, th {
        border: 1px solid #000000;
        font-size: @Constants.TestMobile("3vw;", "1vw");
        text-align: center;
    }

    table {
        font-family: arial, sans-serif;
        font-size: 1vw;
        width: 100%;
        overflow: hidden;
        border-radius: @Constants.TestMobile("5vw;","1vw");
    }

    .income-good {
        color: @Constants.ColorScheme["IncomeGood"];
    }

    .equity-good {
        color: @Constants.ColorScheme["EquityGood"];
    }

    .debt {
        color: @Constants.ColorScheme["Debt"];
    }

    /* Style the tab */
    .tab {
        overflow: hidden;
        border: 1px solid #ccc;
        background-color: @Constants.ColorScheme["Tab-Back"];
        width: 75%;
    }

        /* Style the buttons inside the tab */
        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
            font-size: 17px;
            color: @Constants.ColorScheme["Text"];
        }

            /* Change background color of buttons on hover */
            .tab button:hover {
                background-color: @Constants.ColorScheme["Tab-Hover"];
                color: black;
            }

            .tab button.active:hover {
                color: @Constants.ColorScheme["Text"];
            }

            /* Create an active/current tablink class */
            .tab button.active {
                background-color: @Constants.ColorScheme["Tab-Active"];
            }

    .arrow {
        border: solid @Constants.ColorScheme["Text"];
        border-width: 0 3px 3px 0;
        display: inline-block;
        padding: 1vh;
    }

    .spendchart-btn {
        color: @Constants.ColorScheme["Text"];
        width: 20%;
        background-color: transparent;
        outline: none;
        border: none;
    }

    .selected-account {
        background-color: @Constants.ColorScheme["Tab-Active"];
    }

    .slot-background {
        background-color: @Constants.ColorScheme["Background"];
    }

    .text-color {
        color: @Constants.ColorScheme["Text"];
    }

    /* Horizontal chart */
    .chart-hor {
        padding: 1rem;
        border-radius: 12px;
        background-color: @Constants.ColorScheme["ComponentBackground"];
        text-align: center;
        display: flex;
        justify-content: flex-start;
        flex-wrap: wrap;
        flex-direction: row;
        width: 100%;
        height: fit-content;
        border: 1px black solid;
    }

    .outer_add {
        margin: auto;
        width: 100%;
        height: fit-content;
        border: 1px solid #ececec;
        background-color: #2a2a2a;
        color: white;
        border-radius: 12px;
        margin-bottom: @Constants.TestMobile("3vw;", "1vh");
    }

    .chart-back-hor {
        width: 100%;
        padding: 1rem;
        border-radius: 12px;
        background-color: @Constants.ColorScheme["ComponentBackground"];
        text-align: center;
        display: inline-block;
        height: fit-content;
    }

    .chart-bar-hor {
        height: 1rem;
        width: 100%;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-evenly;
        cursor: pointer;
        margin: 2vh 5px;
    }

    .chart-bar-hor__fill {
        background-color: red;
        height: 1rem;
        transition: all 0.3s ease-out;
    }

    .chart-bar-hor__fill-bad {
        background-color: red;
        height: 1rem;
        transition: all 0.3s ease-out;
    }

    .chart-bar-hor__label {
        float: left;
        height: fit-content;
        font-weight: bold;
        font-size: @Constants.TestMobile("3vw;", "1vw");
        color: @Constants.ColorScheme["Text"];
        margin: 1vh;
        vertical-align: central;
    }

    .chart-bar-hor__inner {
        height: 1rem;
        width: 100%;
        border: 1px solid #313131;
        border-radius: 12px;
        background-color: @Constants.ColorScheme["IncomeGood"]; /*#c3b4f3*/
        overflow: hidden;
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
    }

    .better::placeholder {
        color: @Constants.ColorScheme["Text"];
    }

    input {
        padding: 0;
        margin: 0;
        background-color: transparent;
        color: white;
        border: none;
        border: solid white 1px;
        text-align: center;
        color: @Constants.ColorScheme["Text"];
    }

    td, option, input, label, select {
        font-size: @Constants.TestMobile("3vw;","1em");
    }

    span {
        font-size: inherit;
    }
</style>

<div class="page @theView" style='background-color:@Constants.ColorScheme["Background"]'>
    @if (NavMan.Uri.Contains("policy") || NavMan.Uri.Contains("reset") || NavMan.Uri.Contains("sign"))
    {
        @*NavMan.BaseUri == NavMan.Uri*@
        <main>
            <article class="content px-4">
                @Body
            </article>
        </main>
    }
    else if (NavMan.BaseUri == NavMan.Uri)
    {
        <LandingPage />
    }
    else if (!Constants.WeIn)
    {
        <Login />
    }
    else if (Constants.TIER_STATUS == "expired")
    {
        <main>
            <article>
                <div class="flex-c-start">
                    <div><a href="" style="color:white"><span class="oi oi-arrow-left" style="padding-right:10px" /> Back to main page</a></div>
                    <h2 style="font-family:'CBB Default';text-align:center">Like what you see? Consider subscribing!</h2>
                    <h3 style="font-family:'CBB Default';text-align:center">Your trial has ended, but we'll keep your budget for an additional 10 days while you decide.</h3>
                    <div class="flex-r" style="margin:1em 0">
                        <button class="btn btn-primary" style="color:white;background-color:indigo" @onclick=@(() => AccountDelete = true)>Cancel Account</button>
                    </div>
                    <DeleteAccountModal @bind-ShowDelete=AccountDelete />
                    <PaymentPlans />
                </div>
            </article>
        </main>
    }
    else if (Constants.TIER_STATUS == "canceled")
    {
        <main>
            <article>
                <div class="flex-c-start" style="padding:1em">
                    <div><a href="" style="color:white"><span class="oi oi-arrow-left" style="padding-right:10px" /> Back to main page</a></div>
                    <h2 style="text-align:center;font-family:'CBB Default'">
                        This login appears to be associated with an account that's been canceled. This is your last chance to keep your current budget.
                        Please, create or delete your account below:
                    </h2>
                    <div class="flex-r" style="margin:1em 0">
                        <button class="btn btn-primary" style="color:white;background-color:indigo" @onclick=@(() => AccountDelete = true)>Cancel Account</button>
                    </div>
                    <DeleteAccountModal @bind-ShowDelete=AccountDelete />
                    <PaymentPlans />
                </div>
            </article>
        </main>
    }
    else
    {
        @if (mobile)
        {
                <NavMenu />
        }
        <main style="margin-bottom:1em">
            @if (!mobile)
            {
                <div id="main-bar" class="flex-r" style="background-color:indigo;justify-content:space-between;width:100%;position:fixed;align-items:center;z-index:1;padding:0 1em">
                    <div>
                        <a href="account" style="font-size:large;font-family:'CBB Default'; text-align:center; float:left;color:white;">
                            <strong>@("Welcome " + Constants.CUR_USER_NAME + "!")</strong>
                        </a>
                    </div>
                    <ul class="ps-3 navbar-dark flex-r" style="text-align: center;height:fit-content; list-style:none; background-color:transparent;align-items:center">
                        <li>
                            <a class="navbar-brand" href="home" style="font-family:'CBB Default'; text-align:center;">
                                <span class="oi oi-lightbulb"></span> Home
                            </a>
                        </li>
                        <li>
                            <a class="navbar-brand" href="input" style="font-family:'CBB Default'; text-align:center;">
                                <span class="oi oi-plus" aria-hidden="true"></span> Input
                            </a>
                        </li>
                        @if (ShowDelete)
                        {
                            <li>
                                <a class="navbar-brand" href="delete" style="font-family:'CBB Default'; text-align:center;">
                                    <span class="oi oi-minus" aria-hidden="true"></span> Delete
                                </a>
                            </li>
                        }
                        @if (ShowUpdate)
                        {
                            <li>
                                <a class="navbar-brand" href="update" style="font-family:'CBB Default'; text-align:center;">
                                    <span class="oi oi-arrow-thick-top" aria-hidden="true"></span> Update
                                </a>
                            </li>
                        }
                        @if (ShowPortfolio)
                        {
                            <li>
                                <a class="navbar-brand" href="portfolio" style="font-family:'CBB Default'; text-align:center;">
                                    <span class="oi oi-dollar"></span> Portfolio
                                </a>
                            </li>
                        }
                        @if (ShowChart)
                        {
                            <li>
                                <a class="navbar-brand" href="chart" style="font-family:'CBB Default'; text-align:center;">
                                    <span class="glyphicon glyphicon-signal" aria-hidden="true"></span> Chart
                                </a>
                            </li>
                        }
                        @if (ShowForecast)
                        {
                            <li>
                                <a class="navbar-brand" href="forecast" style="font-family:'CBB Default'; text-align:center;">
                                    <span class="oi oi-sun"></span> Forecast
                                </a>
                            </li>
                        }
                    </ul>
                    <div>
                        <a href="account" style="font-size:large;font-family:'CBB Default'; text-align:center; float:left;color:white;">
                            <span class="oi oi-person"></span>
                            <strong>@("Manage Account")</strong>
                        </a>
                    </div>
                </div>
                <div style="position: fixed; margin-top:@HeightTopBar; top:0; bottom:0; left:0;height:auto; width:fit-content;overflow-y:auto;border: solid gray 1px;">
                    <div style="z-index:1;width: @WidthLeftBar; height:inherit; overflow: auto; position: relative;padding:0">
                        <CascadingValue Value=RunModal>
                            <CascadingValue Value=this>
                                <BalanceTray @ref=@GlobalBT />
                            </CascadingValue>
                        </CascadingValue>
                    </div>
                </div>
            }

            <article class="content px-4" style="margin-top:@HeightTopBar;@PaddingLeft">
                <CascadingValue Value=LogOff>
                    <CascadingValue Value=RunModal>
                        <CascadingValue Value=this>
                            <CascadingValue Value=GlobalBT>
                                @Body
                                @if (ShowDeleteModal)
                                {
                                    <Confirmation OnClose="@Delete" LeftBtnTxt="Cancel"
                                                  LeftBtnColor="btn-secondary"
                                                  RightBtnColor="btn-danger">
                                        <span>
                                            Do you want to delete this <strong>@SelectedTransaction.Name</strong> transaction?
                                        </span>
                                    </Confirmation>
                                }
                                else if (ShowEditModal)
                                {
                                    <EditorModalDialog Title="@(string.Format("{0} (By: {1})","Test", "Deez Nuts"))"
                                                       Text="Story"
                                                       Transact="@SelectedTransaction"
                                                       OnClose="@CloseEditModal">

                                    </EditorModalDialog>
                                }
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            </article>
        </main>
    }
    <Footer />
</div>

@code {
    private bool mobile => Constants.Mobile;

    private bool AccountDelete { get; set; }

    private string LogTitle = "Logging in";
    EventCallback LogOff => EventCallback.Factory.Create(this, SignOut);
    EventCallback<Transaction> RunModal => EventCallback.Factory.Create(this, (Transaction t) => ToggleModal(t));

    public BalanceTray GlobalBT { get; set; } = new BalanceTray();

    private double heightTopBar = 8;
    private string HeightTopBar => heightTopBar + "px";
    private double widthLeftBar = 20;
    private string WidthLeftBar => widthLeftBar + "em";
    private double widthLeftBarPlus => widthLeftBar * 1.1;
    private string WidthLeftBarPlus => widthLeftBarPlus + "em";
    private string PaddingLeft => Constants.Mobile ? "" : "padding-left:" + WidthLeftBarPlus + " !important;";

    private string theView { get; set; }

    private List<Balance> Balances = new List<Balance>();

    // Modal vars
    private Transaction SelectedTransaction { get; set; }
    private bool ShowDeleteModal { get; set; }
    private bool ShowEditModal { get; set; }


    private bool ShowDelete => Constants.Balances != null && Constants.Balances.Count > 0;
    private bool ShowUpdate => Constants.Balances != null && Constants.Balances.Count > 0;
    private bool ShowPortfolio => Constants.Balances != null && Constants.Balances.FirstOrDefault(b => b.BalanceType == "Stocks") != null;
    private bool ShowChart => Constants.Transactions != null && Constants.Transactions.Count > 0;
    private bool ShowForecast => Constants.Monthlies != null && Constants.Monthlies.Count > 0;

    public string ModalType { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        string id = Constants.Mobile ? "mobile-nav-bar" : "main-bar";
        double startH = heightTopBar;
        var holder = await jsRuntime.InvokeAsync<string>("ElementHeight", id);
        if (holder == "0")
            heightTopBar = 78;
        else{
            heightTopBar = Convert.ToDouble(holder);
            if (heightTopBar != startH)
                StateHasChanged();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Constants.Mobile = await jsRuntime.InvokeAsync<bool>("isDevice");
        }
        catch (Exception e)
        {
            Constants.Mobile = false;
        }
        theView = Constants.Mobile ? "mobile-view" : "desktop-view";

        var token = await sessionStorage.GetItemAsync<string>("token");
        if (!string.IsNullOrEmpty(token))
            StateHasChanged();

        await CheckWeIn(false);
    }

    public async Task<bool> CheckWeIn(bool countAttempt = true)
    {
        var token = await sessionStorage.GetItemAsync<string>("token");
        await sessionStorage.SetItemAsync("token", "");
        bool verified;

        if (!string.IsNullOrEmpty(token))
        {
            Constants.WeIn = await UserRepo.VerifyUserAsync(token);

            if (Constants.WeIn)
                Constants.Token = token;
        }

        // Out of token check, now see if we're in
        if (Constants.WeIn)
        {
            await Constants.Init(true);

            Balances = Constants.catchAll.Balances;
            Balances.Sort(Constants.CompareBalance);
        }

        StateHasChanged();

        return Constants.WeIn;
    }
    private async Task SignOut()
    {
        Constants.WeIn = false;
        Constants.Token = "";
        await sessionStorage.SetItemAsync("token", Constants.Token);
        await sessionStorage.SetItemAsync("CUR_USER_NAME", "");
        NavMan.NavigateTo("");
        StateHasChanged();
    }

    // Modal methods
    public async void ToggleModal(Transaction t)
    {
        switch (ModalType)
        {
            case "D":
                ToggleDelete(t);
                break;
            default:
                ToggleEdit(t);
                break;
        }
    }
    public async void ToggleDelete(Transaction t)
    {
        SelectedTransaction = new Transaction(t);
        ShowDeleteModal = !ShowDeleteModal;

        if (!ShowDeleteModal)
            await jsRuntime.InvokeAsync<bool>("TurnOffScroll");
        StateHasChanged();
    }

    public async void ToggleEdit(Transaction t)
    {
        SelectedTransaction = new Transaction(t);
        ShowEditModal = !ShowEditModal;

        if (!ShowEditModal)
            await jsRuntime.InvokeAsync<bool>("TurnOffScroll");
        StateHasChanged();
    }

    private async void CloseEditModal(bool accepted)
    {
        ShowEditModal = !ShowEditModal;
        await jsRuntime.InvokeAsync<bool>("TurnOnScroll");
    }

    private async void Delete(bool accepted)
    {
        if (accepted)
        {
            // TransactionRepo sets everything in Constants
            await TransactionRepo.RemoveAsync(SelectedTransaction.Id);
            if (!Constants.Mobile)
                GlobalBT.RefreshBalances();
        }
        ShowDeleteModal = false;
        await jsRuntime.InvokeAsync<bool>("TurnOnScroll");
        StateHasChanged();
    }
}
