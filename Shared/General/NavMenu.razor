@using BetterBudgetWeb.Data
@using System.Globalization
@inject NavigationManager NavMan
@implements IDisposable

<div id="main-bar" class="navbar-dark" style="position:fixed;top:0;padding:0;background-color:indigo;width:100%;z-index:1">
    <div class="flex-r" style="width:100%;padding:0 1em;justify-content:space-between;align-items:center">
        <img src="images/RoundLogo.webp" alt="Logo image" style="height:6.5vh;width:6.5vh;padding:0;cursor:pointer" @onclick=@(() => NavMan.NavigateTo("home")) />
        <h2 class="flex-c" style="font-family:'CBB Default'">@Constants.CurPage</h2>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>

    <div class="@NavMenuCssClass" @onclick="ToggleNavMenu" style="width:100%;height:fit-content;overflow:auto">
        <nav class="flex-column" style="justify-content:start">
            <div class="nav-item px-1">
                <NavLink class="nav-link" href="home" Match="NavLinkMatch.All" style="font-size:large">
                    <span class="oi oi-home" aria-hidden="true"></span><span>&nbsp;Home</span>
                </NavLink>
            </div>
            <div class="nav-item px-1">
                <NavLink class="nav-link" href="input" style="font-size:large">
                    <span class="oi oi-plus" aria-hidden="true"></span> Input
                </NavLink>
            </div>
            <div class="nav-item px-1">
                <NavLink class="nav-link" href="delete" style="font-size:large">
                    <span class="oi oi-minus" aria-hidden="true"></span> Delete
                </NavLink>
            </div>
            <div class="nav-item px-1">
                <NavLink class="nav-link" href="update" style="font-size:large">
                    <span class="oi oi-arrow-thick-top" aria-hidden="true"></span> Update
                </NavLink>
            </div>
            @if (Constants.TIER_LEVEL > Tier.BASIC_TIER)
            {
                        <div class="nav-item px-1 @Constants.Options(Constants.TryingItOut,"componentWrapper","")">
                            <AdvancedWrapper Bottom="false" Top="true" Class="">
                                <NavLink class="nav-link" href="portfolio" style="font-size:large">
                                    <span class="oi oi-dollar" aria-hidden="true"></span> Portfolio
                                </NavLink>
                            </AdvancedWrapper>
                        </div>
            }
            <div class="nav-item px-1">
                <NavLink class="nav-link" href="chart" style="font-size:large">
                    <span class="oi oi-bar-chart" aria-hidden="true"></span> Chart
                </NavLink>
            </div>
            @if (Constants.TIER_LEVEL > Tier.BASIC_TIER)
            {
                        <div class="nav-item px-1 @Constants.Options(Constants.TryingItOut,"componentWrapper","")">
                              <AdvancedWrapper Bottom="false" Top="true" Class="">
                            <NavLink class="nav-link" href="forecast" style="font-size:large">
                            <span class="oi oi-sun"></span> Forecast
                        </NavLink>
                            </AdvancedWrapper>
                        </div>                
            }
            <div class="nav-item px-1">
                <NavLink class="nav-link" href="Account" style="font-size:large">
                    <span class="oi oi-person"></span> Manage Account
                </NavLink>
            </div>
        </nav>
    </div>
</div>

@code {
    private bool collapseNavMenu = true;
    private string ThePageTitle => ToTitleCae(NavMan.Uri.Replace(NavMan.BaseUri, ""));
    private string ThePageTitle2 => NavMan.Uri;

    [CascadingParameter]
    public EventCallback LogOff { get; set; }

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override Task OnInitializedAsync()
    {
        Constants.CurPageChanged += CurPageUpdated;
        return base.OnInitializedAsync();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
    private string ToTitleCae(string txt)
    {
        TextInfo txtInfo = new CultureInfo("en-us", false).TextInfo;
        return txtInfo.ToTitleCase(txt);
    }

    private void CurPageUpdated(object sender, string cp)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        Constants.CurPageChanged -= CurPageUpdated;
    }
}
