@using BetterBudgetWeb.Data
@using BlazorBootstrap

@if (Plots?.Count > 0)
{
    <BlazorBootstrap.LineChart @ref="lineChart" Height="@Height" />
}

@code {
    [Parameter]
    public int? Height { get; set; }

    [Parameter]
    public List<LinePlot> Plots
    {
        get { return plots; }
        set
        {
            if (plots != value && value.Count > 0)
            {
                bool redrive = plots?.Count > 0;

                plots = value;
                if (redrive)
                    Redrive(Plots);
                //lineChart.UpdateValuesAsync(chartData);
            }
            else
                plots = value;
        }
    }
    public List<LinePlot> plots { get; set; }

    private BlazorBootstrap.LineChart lineChart = default!;
    private LineChartOptions lineChartOptions = default!;
    private ChartData chartData = default!;

    protected override void OnInitialized()
    {
        lineChartOptions = new();
        lineChartOptions.Responsive = true;
        lineChartOptions.Interaction = new Interaction { Mode = InteractionMode.Index };
        lineChartOptions.Plugins.Legend.Display = false;

        lineChartOptions.Scales.Y = new ChartAxes
            {
                Title = new ChartAxesTitle { Text = "Value ($)", Display = true, Color = "#B9AFF8" },
                Ticks = new ChartAxesTicks { Color = "#B9AFF8" }
            };

        lineChartOptions.Scales.X = new ChartAxes
            {
                Title = new ChartAxesTitle { Text = "Month", Display = false, Color = "white" },
                Ticks = new ChartAxesTicks { Color = "#00FFFF" }
            };

        lineChartOptions.Plugins.Title = new ChartPluginsTitle
            {
                Text = "Net Worth (6-month view)",
                Display = true,
                Color = Constants.ColorScheme["Text"],
                Align = "center",
                Font = new ChartFont { Size = 16, Family = "Imprint MT Shadow" }
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Plots?.Count > 0)
        {
            // pass the plugin name to enable the data labels
            await Redrive(Plots);
            await lineChart.InitializeAsync(chartData, lineChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task Redrive(List<LinePlot> thePlots)
    {
        string good = "#32CD32";
        string bad = "#FF0000";

        var labels = thePlots.Select(pl => pl.Month).ToList();
        List<double?> numbers = new List<double?>();
        foreach (var pl in thePlots)
        {
            numbers.Add(pl.Amount);
        }

        var datasets = new List<IChartDataset>();
        string genColor = thePlots.Count > 0 && thePlots[0].Amount <= thePlots.LastOrDefault()?.Amount ? good : bad;

        var dataset1 = new LineChartDataset
            {
                Label = "Net Worth",
                Data = new List<double?>(numbers),
                BackgroundColor = genColor + "15", // add a low alpha for fill
                BorderColor = genColor,
                BorderWidth = 2,
                HoverBorderWidth = 4,
                PointBackgroundColor = new List<string?> { genColor },
                PointBorderColor = new List<string?> { genColor },
                PointRadius = new List<double> { 6 }, // show points
                PointHoverRadius = new List<double> { 8 },
                PointStyle = new List<string?> { "triangle" }
            };

        if (Plots.Any(pl => !pl.certainty))
        {
            dataset1.BorderDash = new List<double> { 8 };
            dataset1.BorderColor = "#4C619A";
            dataset1.BackgroundColor = "#4C619A15";
        }

        dataset1.FillToStart();

        datasets.Add(dataset1);

        chartData = new ChartData
            {
                Labels = labels,
                Datasets = datasets
            };

        lineChartOptions.Scales.Y!.Min = double.Round((double)dataset1.Data.Min() * .99, 0);

        await Task.Delay(100);
        await lineChart.UpdateAsync(chartData, lineChartOptions);
    }
}