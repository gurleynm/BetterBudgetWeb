<div class="@(Constants.Options(ShowEye,"flex-r","flex-c-start"))" style="justify-content:start;align-items:center;">
    <input id="@Guid.NewGuid().ToString()" class="better" placeholder="@Placeholder" type="@InputType" @onkeydown="@Enter"
           @oninput="@(async (ui) => { Password = (string) ui.Value;})" />
    @if (ShowEye && ShowAny)
    {
        <i class="bi @EyeClass fs-3" style="cursor:pointer;margin-left:1em" @onclick=@(() => ShowPass = !ShowPass)></i>
    }
    else if (ShowAny)
    {
        <div class="flex-r" style="width:100%;justify-content:start;align-items:center">
            <label style="margin:1em 0;">Show Password: </label>
            <input style="margin:1em;" type="checkbox" @bind-value=ShowPass />
        </div>
    }
</div>

@code {
    [Parameter]
    public string Password
    {
        get { return password; }
        set
        {
            if (password == value)
                return;
            password = value;
            PasswordChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> PasswordChanged { get; set; }
    private string password { get; set; }

    [Parameter]
    public Action<KeyboardEventArgs> Enter { get; set; }

    [Parameter]
    public bool ShowPass
    {
        get { return showPass; }
        set
        {
            if (showPass == value)
                return;
            showPass = value;
            ShowPassChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<bool> ShowPassChanged { get; set; }

    [Parameter]
    public bool ShowAny { get; set; } = true;
    
    [Parameter]
    public bool ShowEye { get; set; }

    [Parameter]
    public string Placeholder { get; set; } = "Password";

    private string InputType => ShowPass ? "text" : "password";
    private string EyeClass => ShowPass ? "bi-eye" : "bi-eye-slash";
    private bool showPass { get; set; }
}
