@using BetterBudgetWeb.Repo
<div style="display:flex;flex-direction:column;justify-content:space-evenly; padding:1em;align-items:start">
    <div class="flex-c" style="justify-content:space-evenly;margin-bottom:1em">
        <label style="color:white;margin-right:1em">Username:</label>
        <div class="flex-c">
            <input class="better" placeholder="Username" type="text" @bind-value=Username />
            @if (!string.IsNullOrEmpty(ErrUser))
            {
                <span style="color:red">@ErrUser</span>
            }
        </div>
    </div>
    <div class="flex-c" style="justify-content:space-evenly;margin-bottom:1em">
        <label style="color:white;margin-right:1em">Email:</label>
        <div class="flex-c">
            <input class="better" placeholder="Email" type="email" @bind-value=Email />
            @if (!string.IsNullOrEmpty(ErrEmail))
            {
                <span style="color:red">@ErrEmail</span>
            }
        </div>
    </div>
    <div class="flex-c" style="justify-content:space-evenly;margin-bottom:1em">
        <label style="color:white;margin-right:1em">Password:</label>
        <div class="flex-r">
            <PasswordInput Enter="Enter" Placeholder="Password" @bind-Password=@Password ShowAny=false @bind-ShowPass=@ShowEyeIntermediate />
        </div>
    </div>
    <div class="flex-c" style="justify-content:space-evenly">
        <label style="color:white;margin-right:1em">Confirm Password:</label>
        <div class="flex-r">
            <PasswordInput Enter="Enter" Placeholder="Confirm Password" @bind-Password=@ConfirmPassword ShowEye=false @bind-ShowPass=@ShowEyeIntermediate />
        </div>
        <div style="display: flex;">
            <div style="flex-grow: 1; width: 0;">By creating an account, you agree to the Couple's Better Budget 
                <a style="text-align:center;" href="Policy.html" onclick="window.open('Policy.html',
                         'newwindow',
                         'width=300,height=250');return false;">Privacy Policy</a> and 
                <a style="text-align:center;" href="TermsOfService.html" onclick="window.open('Policy.html',
                         'newwindow',
                         'width=300,height=250');return false;">Terms of Service</a>.
            </div>
        </div>
    </div>
</div>

@code {
    private bool ShowEyeIntermediate { get; set; }

    [Parameter]
    public Action<KeyboardEventArgs> Enter { get; set; }

    [Parameter]
    public string Username
    {
        get { return username; }
        set
        {
            if (username == value) return;
            username = value;
            UsernameChanged.InvokeAsync(value);

            ErrUser = "";
            string tmpUser = username.Replace("-", "").Replace("_", "").Replace("_", ".");
            bool HasSpecChars = tmpUser.Any(c => !char.IsLetterOrDigit(c));
            if (username.Length < 6)
                ErrUser = "Username must be at least 6 characters";
            else if (HasSpecChars)
                ErrUser = "Username cannot contain special characters.";
        }
    }
    [Parameter]
    public EventCallback<string> UsernameChanged { get; set; }

    [Parameter]
    public string Email
    {
        get { return email; }
        set
        {
            if (email == value) return;
            email = value;
            EmailChanged.InvokeAsync(value);

            ErrEmail = "";
            if (!Constants.IsValidEmail(email))
                ErrEmail = "Invalid email";
        }
    }
    [Parameter]
    public EventCallback<string> EmailChanged { get; set; }

    [Parameter]
    public string Password
    {
        get { return password; }
        set
        {
            if (password == value) return;
            password = value;
            PasswordChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<string> PasswordChanged { get; set; }

    [Parameter]
    public string ConfirmPassword
    {
        get { return confirmPassword; }
        set
        {
            if (confirmPassword == value) return;
            confirmPassword = value;
            ConfirmPasswordChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<string> ConfirmPasswordChanged { get; set; }

    private string username;
    private string email;
    private string password;
    private string confirmPassword;
    private bool passValidation;

    private string ErrUser = "";
    private string ErrEmail = "";

    public async Task<bool> CheckConditions()
    {
        if (string.IsNullOrEmpty(Username))
            ErrUser = "Username must be set";

        if (string.IsNullOrEmpty(Username))
            ErrEmail = "Email must be set";

        string chk = await UserRepo.CheckUserEmail(username, email);
        if (!string.IsNullOrEmpty(chk))
        {
            if (chk == "404")
                ErrUser = "Error accessing API. Please refresh and attempt again";
            else if (chk == "Username")
                ErrUser = "Username already taken.";
            else if (chk == "Email")
                ErrEmail = "Email already taken.";
                StateHasChanged();
        }

        return string.IsNullOrEmpty(ErrUser) && string.IsNullOrEmpty(ErrEmail);
    }
}
