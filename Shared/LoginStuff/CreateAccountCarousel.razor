@if (Page == 1)
{
    <MiniPage @ref=Page1 @bind-Username=Username @bind-Email=Email @bind-Password=Password @bind-ConfirmPassword=ConfirmPassword1 />
    <PasswordRules @ref=@passwordRules1 Password="@Password" ConfirmedPassword="@ConfirmPassword1" ConfirmedRequired="true" />
    <div class="flex-r" style="justify-content:end;padding-top:1em">
        <button class="btn btn-primary" style="width:100%;font-size:large;font-family:'CBB Default';color:black;background-color:cyan" @onclick="Next">Next</button>
    </div>
}
else if (Page == 2)
{
    <div style="position:relative;top:1em;left:1em"><a @onclick="Prev" style="color:white;cursor:pointer"><span class="oi oi-arrow-left" style="padding-right:10px" /> Back to first user</a></div>
    <MiniPage @ref=Page2 @bind-Username=Username2 @bind-Email=Email2 @bind-Password=Password2 @bind-ConfirmPassword=ConfirmPassword2 />
    <PasswordRules @ref=@passwordRules2 Password="@Password2" ConfirmedPassword="@ConfirmPassword2" ConfirmedRequired="true" />
    @if (!Disabled)
    {
        <div class="flex-r" style="justify-content:space-between;padding-top:1em">
            <button class="btn btn-primary" style="width:100%;font-size:large;font-family:'CBB Default';color:black;background-color:cyan" @onclick="Next">Start 45-Day Trial</button>
        </div>
    }
    else
    {
        <LoadingDots />
    }
}

@code {
    [Parameter]
    public int Page
    {
        get { return page; }
        set
        {
            if (page == value) return;
            page = value;
            PageChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<int> PageChanged { get; set; }

    [Parameter]
    public string Email
    {
        get { return email; }
        set
        {
            if (email == value) return;
            email = value;
            EmailChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> EmailChanged { get; set; }

    [Parameter]
    public string Email2
    {
        get { return email2; }
        set
        {
            if (email2 == value) return;
            email2 = value;
            Email2Changed.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> Email2Changed { get; set; }

    [Parameter]
    public string Username
    {
        get { return username; }
        set
        {
            if (username == value) return;
            username = value;
            UsernameChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> UsernameChanged { get; set; }

    [Parameter]
    public string Username2
    {
        get { return username2; }
        set
        {
            if (username2 == value) return;
            username2 = value;
            Username2Changed.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> Username2Changed { get; set; }

    [Parameter]
    public string Password
    {
        get { return password; }
        set
        {
            if (password == value) return;
            password = value;
            PasswordChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> PasswordChanged { get; set; }

    [Parameter]
    public string Password2
    {
        get { return password2; }
        set
        {
            if (password2 == value) return;
            password2 = value;
            Password2Changed.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> Password2Changed { get; set; }

    [Parameter]
    public string ConfirmPassword1
    {
        get { return confirmPassword1; }
        set
        {
            if (confirmPassword1 == value) return;
            confirmPassword1 = value;
            ConfirmPassword1Changed.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> ConfirmPassword1Changed { get; set; }

    [Parameter]
    public string ConfirmPassword2
    {
        get { return confirmPassword2; }
        set
        {
            if (confirmPassword2 == value) return;
            confirmPassword2 = value;
            ConfirmPassword2Changed.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> ConfirmPassword2Changed { get; set; }

    [Parameter]
    public string ErrorMsg
    {
        get { return errorMsg; }
        set
        {
            if (errorMsg == value) return;
            errorMsg = value;
            ErrorMsgChanged.InvokeAsync(value);
            if (!string.IsNullOrEmpty(value))
                Disabled = false;
        }
    }

    [Parameter]
    public EventCallback<string> ErrorMsgChanged { get; set; }

    [Parameter]
    public bool CreatingAccount
    {
        get { return creatingAccount; }
        set
        {
            if (creatingAccount == value) return;
            creatingAccount = value;
            CreatingAccountChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> CreatingAccountChanged { get; set; }

    [Parameter]
    public Action<KeyboardEventArgs> Enter { get; set; }

    [Parameter]
    public Action CheckIn { get; set; }

    [Parameter]
    public bool Hide
    {
        get { return hide; }
        set
        {
            if (hide == value)
                return;
            hide = value;
            HideChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> HideChanged { get; set; }

    public bool Pass1 { get; set; }
    public bool Pass2 { get; set; }

    public PasswordRules passwordRules1 = new PasswordRules();
    public PasswordRules passwordRules2 = new PasswordRules();
    public bool hide;

    MiniPage Page1;
    MiniPage Page2;

    private void Prev()
    {
        ErrorMsg = "";

        if (Page > 1)
        {
            Page--;
            StateHasChanged();
        }
    }

    private async void Next()
    {
        ErrorMsg = "";
        bool Passed = false;
        if (Page == 1)
        {
            Passed = await Validate(Page1, passwordRules1);
        }
        else if (Page == 2)
        {
            if (Username == Username2)
            {
                ErrorMsg = "Usernames must be different";
                return;
            }
            if (Email == Email2)
            {
                ErrorMsg = "Emails must be different";
                return;
            }
            Passed = await Validate(Page2, passwordRules2);
        }

        if (Passed)
        {
            if (Page < 2)
            {
                Page++;
                StateHasChanged();
            }
            else
            {
                Disabled = true;
                Hide = true;
                StateHasChanged();
                await Task.Delay(10);
                CheckIn();
            }
        }
    }

    async Task<bool> Validate(MiniPage mp, PasswordRules pr)
    {
        if (pr == null)
            return false;
        bool PassRules = pr.CheckConditions();
        if (PassRules)
            PassRules = await mp.CheckConditions();

        return PassRules;
    }

    private int page = 1;
    private string email;
    private string email2;
    private string username;
    private string username2;
    private string password;
    private string password2;
    private string confirmPassword1;
    private string confirmPassword2;
    private string errorMsg;
    private bool creatingAccount { get; set; }

    private bool Disabled { get; set; }
}
