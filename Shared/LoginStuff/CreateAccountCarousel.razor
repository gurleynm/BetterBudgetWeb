@if (Page == 1)
{
    <div style="display:flex;flex-direction:@(Constants.Mobile ? "column" : "row");justify-content:start; padding:1em">
        <div class="flex-c">
            <label style="color:white">Username</label>
            <div class="flex-c">
                <input class="better" placeholder="Username" type="text" @onkeydown="@Enter" @oninput="@(async (ui) => { Username = (string) ui.Value;})" />
            </div>
            <br />
            <label style="color:white">Password</label>
            <div class="flex-r">
                <PasswordInput Enter="Enter" Placeholder="Password" @bind-Password=@Password />
            </div>
        </div>
        <div class="flex-c">
            <label style="color:white">Email</label>
            <div class="flex-r">
                <input class="better" placeholder="Email" type="email" @onkeydown="@Enter" @oninput="@(async (ui) => { Email = (string) ui.Value;})" />
            </div>
            <br />
            <label style="color:white">Confirm Password</label>
            <div class="flex-r">
                <PasswordInput Enter="Enter" Placeholder="Confirm Password" @bind-Password=@ConfirmPassword1 />
            </div>
        </div>
    </div>
    <PasswordRules @ref=@passwordRules1 Password="@Password" ConfirmedPassword="@ConfirmPassword1" ConfirmedRequired="true" />
    <div class="flex-r" style="justify-content:end;padding-top:1em">
        <button class="btn btn-primary" style="background-color:cyan;color:black" @onclick="Next">Next</button>
    </div>
}
else if (Page == 2)
{
    <div style="display:flex;flex-direction:@(Constants.Mobile ? "column" : "row");justify-content:start; padding:1em">
        <div class="flex-c">
            <label style="color:white">Username</label>
            <div class="flex-c">
                <input class="better" placeholder="Username" type="text" @onkeydown="@Enter" @oninput="@(async (ui) => { Username2 = (string) ui.Value;})" />
            </div>
            <br />
            <label style="color:white">Password</label>
            <div class="flex-r">
                <PasswordInput Enter="Enter" Placeholder="Password" @bind-Password=@Password2 />
            </div>
        </div>
        <div class="flex-c">
            <label style="color:white">Email</label>
            <div class="flex-r">
                <input class="better" placeholder="Email" type="email" @onkeydown="@Enter" @oninput="@(async (ui) => { Email2 = (string) ui.Value;})" />
            </div>
            <br />
            <label style="color:white">Confirm Password</label>
            <div class="flex-r">
                <PasswordInput Enter="Enter" Placeholder="Confirm Password" @bind-Password=@ConfirmPassword2 />
            </div>
        </div>
    </div>
    <PasswordRules @ref=@passwordRules2 Password="@Password" ConfirmedPassword="@ConfirmPassword1" ConfirmedRequired="true" />
    <div class="flex-r" style="justify-content:space-between;padding-top:1em">
        <button class="btn btn-primary" @onclick="@(() => Page--)" style="background-color:indigo;color:white">Previous</button>
        <button class="btn btn-primary" @onclick="ExecuteCheckIn" style="background-color:cyan;color:black">Submit</button>
    </div>
}

@code {
    [Parameter]
    public int Page
    {
        get { return page; }
        set
        {
            if (page == value) return;
            page = value;
            PageChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<int> PageChanged { get; set; }

    [Parameter]
    public string Email
    {
        get { return email; }
        set
        {
            if (email == value) return;
            email = value;
            EmailChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> EmailChanged { get; set; }

    [Parameter]
    public string Email2
    {
        get { return email2; }
        set
        {
            if (email2 == value) return;
            email2 = value;
            Email2Changed.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> Email2Changed { get; set; }

    [Parameter]
    public string Username
    {
        get { return username; }
        set
        {
            if (username == value) return;
            username = value;
            UsernameChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> UsernameChanged { get; set; }

    [Parameter]
    public string Username2
    {
        get { return username2; }
        set
        {
            if (username2 == value) return;
            username2 = value;
            Username2Changed.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> Username2Changed { get; set; }

    [Parameter]
    public string Password
    {
        get { return password; }
        set
        {
            if (password == value) return;
            password = value;
            PasswordChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> PasswordChanged { get; set; }

    [Parameter]
    public string Password2
    {
        get { return password2; }
        set
        {
            if (password2 == value) return;
            password2 = value;
            Password2Changed.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> Password2Changed { get; set; }

    [Parameter]
    public string ConfirmPassword1
    {
        get { return confirmPassword1; }
        set
        {
            if (confirmPassword1 == value) return;
            confirmPassword1 = value;
            ConfirmPassword1Changed.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> ConfirmPassword1Changed { get; set; }

    [Parameter]
    public string ConfirmPassword2
    {
        get { return confirmPassword2; }
        set
        {
            if (confirmPassword2 == value) return;
            confirmPassword2 = value;
            ConfirmPassword2Changed.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> ConfirmPassword2Changed { get; set; }

    [Parameter]
    public string ErrorMsg
    {
        get { return errorMsg; }
        set
        {
            if (errorMsg == value) return;
            errorMsg = value;
            ErrorMsgChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> ErrorMsgChanged { get; set; }

    [Parameter]
    public bool CreatingAccount
    {
        get { return creatingAccount; }
        set
        {
            if (creatingAccount == value) return;
            creatingAccount = value;
            CreatingAccountChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> CreatingAccountChanged { get; set; }

    [Parameter]
    public Action<KeyboardEventArgs> Enter { get; set; }

    [Parameter]
    public Action CheckIn { get; set; }

    [Parameter]
    public bool Hide { get; set; }

    public PasswordRules passwordRules1;
    public PasswordRules passwordRules2;

    private void Next()
    {
        bool Passed = false;
        if (Page == 1)
        {
            Passed = passwordRules1.CheckConditions();
            bool ValidEmail = IsValidEmail(email);
            if (!ValidEmail)
                ErrorMsg = "Invalid email";
            Passed = Passed && ValidEmail;
        }
        else if (Page == 2)
        {
            Passed = passwordRules2.CheckConditions();
            bool ValidEmail = IsValidEmail(email);
            if (!ValidEmail)
                ErrorMsg = "Invalid email";
            Passed = Passed && IsValidEmail(email2);
        }

        if (Passed)
            Page++;
    }

    private void ExecuteCheckIn()
    {
        CheckIn();
    }

    bool IsValidEmail(string email)
    {
        if (string.IsNullOrEmpty(email))
            return false;

        var trimmedEmail = email.Trim();

        if (trimmedEmail.EndsWith("."))
        {
            return false; // suggested by @TK-421
        }
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == trimmedEmail;
        }
        catch
        {
            return false;
        }
    }

    private int page = 1;
    private string email;
    private string email2;
    private string username;
    private string username2;
    private string password;
    private string password2;
    private string confirmPassword1;
    private string confirmPassword2;
    private string errorMsg;
    private bool creatingAccount { get; set; }
}
