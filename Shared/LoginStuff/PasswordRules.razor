<div style="color:@StartColor">Password requirements:</div>
<div style="display:flex;flex-direction:column">
    <div style="color:@Min8">- Min. 8 characters</div>
    <div style="color:@ConUpper">- Contains an uppercase character</div>
    <div style="color:@ConLower">- Contains a lowercase character</div>
    <div style="color:@ConNum">- Contains a number character</div>
    <div style="color:@ConSpec">- Contains a special character</div>
    @if (ConfirmedRequired)
    {
        <div style="color:@ConMatch">- Passwords must match</div>
    }
</div>

@code {
    [Parameter]
    public string Password { get; set; }
    [Parameter]
    public string ConfirmedPassword { get; set; }
    [Parameter]
    public bool ConfirmedRequired { get; set; }

    [Parameter]
    public bool Passed { get; set; }

    private static string StartColor => Constants.ColorScheme["TextOnSilver"];

    private string Min8 = StartColor;
    private string ConUpper = StartColor;
    private string ConLower = StartColor;
    private string ConNum = StartColor;
    private string ConSpec = StartColor;
    private string ConMatch = StartColor;

    public bool CheckConditions()
    {
        Min8 = Password.Length >= 8 ? "green" : "red";
        ConUpper = Password.Any(char.IsUpper) ? "green" : "red";
        ConLower = Password.Any(char.IsLower) ? "green" : "red";
        ConNum = Password.Any(char.IsDigit) ? "green" : "red";
        ConSpec = Password.Any(ch => !char.IsLetterOrDigit(ch)) ? "green" : "red";
        if (ConfirmedRequired)
            ConMatch = Password == ConfirmedPassword ? "green" : "red";

        StateHasChanged();

        return Min8 == "green" && ConUpper =="green" && ConLower =="green" &&
               ConNum == "green" && ConSpec == "green" && 
               (ConMatch == "green" || ConMatch == StartColor);
    }
}
