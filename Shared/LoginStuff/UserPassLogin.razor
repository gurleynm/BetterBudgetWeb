@using BetterBudgetWeb.Repo
@inject NavigationManager NavMan

<div class="flex-c" style="width:100vw;height:100%;align-items:center;padding-top:0%">
    <div style="display:block;background-color:transparent;border-radius:1vw;width:auto;padding:1em;padding-bottom:2vw">
        <div>
            <h2 style="text-align:center;color:white;font-family:'CBB Default';">@($"Welcome")</h2>
        </div>
        @if (!NavMan.BaseUri.Contains("mobile."))
        {
            @if (CreatingAccount)
            {
                <SignUpEmail />
            }
            else if (ForgotPassword)
            {
                <div class="flex-c">
                    <label style="color:white">Enter email associated with your account</label>
                    <div class="flex-r">
                        <input class="better" id="user" placeholder="Email" type="text" @onkeydown="@Enter" @oninput="@(async (ui) => { Email = (string) ui.Value;})" />
                    </div>
                    <div class="flex-r">
                        <span style="color:@errLocalColor">@errorMsgLocal</span>
                    </div>
                    <div class="flex-r">
                        <button class="btn btn-primary" @onclick=SendEmail>Submit</button>
                    </div>
                </div>
            }
            else
            {
                <div class="flex-c">
                    <label style="color:white">Username</label>
                    <div class="flex-r" style="justify-content:start">
                        <input class="better" id="user" placeholder="Username" type="text" @onkeydown="@Enter" @oninput="@(async (ui) => { Username = (string) ui.Value;})" />
                    </div>
                    <br />
                    <label style="color:white">Password</label>
                    <div class="flex-r" style="justify-content:start">
                        <PasswordInput Enter="Enter" @bind-Password=@Password ShowEye="false" />
                    </div>
                    @if (!Hide)
                    {
                        <div>
                            <a style="text-decoration:underline;color:cyan;cursor:pointer" @onclick=@(() => ForgotPassword = !ForgotPassword)>Forgot Password?</a>
                        </div>
                    }
                </div>
            }
            @if (!string.IsNullOrEmpty(ErrorMsg))
            {
                <p style="text-align:center;color:red">
                    @ErrorMsg
                </p>
            }

            @* Show Submit if ready *@
            @if (!CreatingAccount && !ForgotPassword)
            {
                @ChildContent
            }

            @if (!Hide && !NavMan.BaseUri.Contains("mobile."))
            {
                <hr />
                <div class="flex-r">
                    <span style="color:white">
                        @AccountTxt
                        <a style="text-decoration:underline;color:cyan;cursor:pointer" @onclick=@(() => CreatingAccount = !CreatingAccount)>@SignTxt</a>
                    </span>
                </div>
            }
        }
        else
        {
            <LoadingDots />
        }
    </div>
</div>

@code {
    public bool signIsUp;

    [CascadingParameter]
    public bool SignIsUp
    {
        get { return signIsUp; }
        set
        {
            if (signIsUp == value)
                return;
            signIsUp = value;

            CreatingAccount = signIsUp;
        }
    }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public Action CheckIn { get; set; }

    [Parameter]
    public string Email
    {
        get { return email; }
        set
        {
            if (email == value) return;
            email = value;
            EmailChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> EmailChanged { get; set; }

    [Parameter]
    public string Email2
    {
        get { return email2; }
        set
        {
            if (email2 == value) return;
            email2 = value;
            Email2Changed.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> Email2Changed { get; set; }

    [Parameter]
    public string Username
    {
        get { return username; }
        set
        {
            if (username == value) return;
            username = value;
            UsernameChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> UsernameChanged { get; set; }

    [Parameter]
    public string Username2
    {
        get { return username2; }
        set
        {
            if (username2 == value) return;
            username2 = value;
            Username2Changed.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> Username2Changed { get; set; }

    [Parameter]
    public string Password
    {
        get { return password; }
        set
        {
            if (password == value) return;
            password = value;
            PasswordChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> PasswordChanged { get; set; }

    [Parameter]
    public string Password2
    {
        get { return password2; }
        set
        {
            if (password2 == value) return;
            password2 = value;
            Password2Changed.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> Password2Changed { get; set; }

    [Parameter]
    public string ErrorMsg
    {
        get { return errorMsg; }
        set
        {
            if (errorMsg == value) return;
            errorMsg = value;
            ErrorMsgChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> ErrorMsgChanged { get; set; }

    [Parameter]
    public bool CreatingAccount
    {
        get { return creatingAccount; }
        set
        {
            if (creatingAccount == value) return;
            creatingAccount = value;

            if (value)
                NavMan.NavigateTo("sign/up");
            else
                NavMan.NavigateTo("sign/in");

            CreatingAccountChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> CreatingAccountChanged { get; set; }

    [Parameter]
    public Action<KeyboardEventArgs> Enter { get; set; }

    [Parameter]
    public bool Hide { get; set; }

    public bool ForgotPassword { get; set; }

    private string email;
    private string email2;
    private string username;
    private string username2;
    private string password;
    private string password2;
    private string errorMsg;
    private string errorMsgLocal;
    private string errLocalColor = "red";
    private bool creatingAccount { get; set; }

    private string AccountTxt => CreatingAccount ? "Already have an account?" : "Don't have an account?";
    private string SignTxt => CreatingAccount ? "Sign In" : "Sign Up";

    private async void SendEmail()
    {
        errLocalColor = "red";
        if (!Constants.IsValidEmail(Email))
        {
            errorMsgLocal = "Invalid email";
        }
        else
        {
            var EmailSend = await UserRepo.SendResetEmail(Email);
            if (EmailSend)
            {
                errLocalColor = "green";
                errorMsgLocal = "Email sent.";
            }
            else
            {
                errorMsgLocal = "Email not found.";
            }
            StateHasChanged();
        }
    }
}
