@using BetterBudgetWeb.Data;
@using BetterBudgetWeb.Repo;
@using BetterBudgetWeb.Runner
@using BetterBudgetWeb.Shared.Balances
@using BetterBudgetWeb.Shared.LoginStuff
@inherits LayoutComponentBase
@inject IJSRuntime jsRuntime
@inject NavigationManager NavMan
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<style>
    body {
        color: @Constants.ColorScheme["Text"];
    }

    .toggle-table > tr:nth-child(even) {
        background-color: @Constants.ColorScheme["TableEven"];
        color: @Constants.ColorScheme["Text"];
    }

    .toggle-table > tr:nth-child(odd) {
        background-color: @Constants.ColorScheme["TableOdd"];
        color: @Constants.ColorScheme["Text"];
    }

    td, th {
        border: 1px solid #000000;
        font-size: @(Constants.Mobile ? "3vw;" : "1vw");
        text-align: center;
    }

    table {
        font-family: arial, sans-serif;
        font-size: 1vw;
        width: 100%;
        overflow: hidden;
        border-radius: @(Constants.Mobile ? "5vw;" : "1vw;");
    }

    .income-good {
        color: @Constants.ColorScheme["IncomeGood"];
    }

    .equity-good {
        color: @Constants.ColorScheme["EquityGood"];
    }

    .debt {
        color: @Constants.ColorScheme["Debt"];
    }

    /* Style the tab */
    .tab {
        overflow: hidden;
        border: 1px solid #ccc;
        background-color: @Constants.ColorScheme["Tab-Back"];
        width: 75%;
    }

        /* Style the buttons inside the tab */
        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
            font-size: 17px;
            color: @Constants.ColorScheme["Text"];
        }
            /* Change background color of buttons on hover */
            .tab button:hover {
                background-color: @Constants.ColorScheme["Tab-Hover"];
                color: black;
            }

            .tab button.active:hover {
                color: @Constants.ColorScheme["Text"];
            }

            /* Create an active/current tablink class */
            .tab button.active {
                background-color: @Constants.ColorScheme["Tab-Active"];
            }

    .arrow {
        border: solid @Constants.ColorScheme["Text"];
        border-width: 0 3px 3px 0;
        display: inline-block;
        padding: 1vh;
    }

    .spendchart-btn {
        color: @Constants.ColorScheme["Text"];
        width: 20%;
        background-color: transparent;
        outline: none;
        border: none;
    }

    .selected-account {
        background-color: @Constants.ColorScheme["Tab-Active"];
    }

    .slot-background {
        background-color: @Constants.ColorScheme["Background"];
    }

    .text-color {
        color: @Constants.ColorScheme["Text"];
    }

    /* Horizontal chart */
    .chart-hor {
        padding: 1rem;
        border-radius: 12px;
        background-color: @Constants.ColorScheme["ComponentBackground"];
        text-align: center;
        display: flex;
        justify-content: flex-start;
        flex-wrap: wrap;
        flex-direction: row;
        width: 100%;
        height: fit-content;
        border: 1px black solid;
    }

    .chart-back-hor {
        width: 100%;
        padding: 1rem;
        border-radius: 12px;
        background-color: @Constants.ColorScheme["ComponentBackground"];
        text-align: center;
        display: inline-block;
        height: fit-content;
    }

    .chart-bar-hor {
        height: 1rem;
        width: 100%;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: space-evenly;
        cursor: pointer;
        margin: 2vh 5px;
    }

    .chart-bar-hor__fill {
        background-color: red;
        height: 1rem;
        transition: all 0.3s ease-out;
    }

    .chart-bar-hor__fill-bad {
        background-color: red;
        height: 1rem;
        transition: all 0.3s ease-out;
    }

    .chart-bar-hor__label {
        float: left;
        height: fit-content;
        font-weight: bold;
        font-size: @(Constants.Mobile ? "3vw;" : "1vw");
        color: @Constants.ColorScheme["Text"];
        margin: 1vh;
        vertical-align: central;
    }

    .chart-bar-hor__inner {
        height: 1rem;
        width: 100%;
        border: 1px solid #313131;
        border-radius: 12px;
        background-color: @Constants.ColorScheme["IncomeGood"]; /*#c3b4f3*/
        overflow: hidden;
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
    }

    .better::placeholder {
        color: @Constants.ColorScheme["Text"];
    }

    input {
        padding: 0;
        margin: 0;
        margin-bottom: 1vh;
        background-color: transparent;
        color: white;
        border: none;
        border: solid white 1px;
        text-align: center;
        color: @Constants.ColorScheme["Text"];
    }
</style>

<div class="page @theView" style='background-color:@Constants.ColorScheme["Background"]'>
    @if (NavMan.Uri.Contains("policy"))
    {
        <main>
            <article class="content px-4" style="padding-top:@HeightTopBar">
                <CascadingValue Value=LogOff>
                    @Body
                </CascadingValue>
            </article>
        </main>
    }
    else if (!WeIn)
    {
        <PageTitle>Enter Password</PageTitle>

        @if (mobile)
        {
            <div style="display:inline-block;width:100vw;height:100vh;">

                <UserPassLogin @ref="userpasslogin" @bind-Username=@username
                               @bind-Username2=@username2
                               @bind-Password=@password
                               @bind-ConfirmPassword=@confirmPassword
                               @bind-CreatingAccount=@CreatingAccount
                               @bind-ErrorMsg=@ErrorMsg
                               Enter=@((e) => Enter(e))
                               GrabDemo=GrabDemo>
                    <div class="flex-r" style="margin-top:2vh">
                        @if (!Disabled)
                        {
                            <button class="btn btn-primary" disabled=@Disabled @onclick="@(() => CheckWeIn())">Submit</button>
                        }
                        else
                        {
                            <div class="flex-r" style="justify-content:space-around">
                                <span style="font-size:large;margin:0 1em" class="oi oi-media-record first-dot"></span>
                                <span style="font-size:large;margin:0 1em" class="oi oi-media-record second-dot"></span>
                                <span style="font-size:large;margin:0 1em" class="oi oi-media-record third-dot"></span>
                            </div>
                        }
                    </div>
                </UserPassLogin>
            </div>
        }
        else
        {
            <UserPassLogin @ref="userpasslogin" @bind-Username=@username
                           @bind-Username2=@username2
                           @bind-Password=@password
                           @bind-ConfirmPassword=@confirmPassword
                           @bind-CreatingAccount=@CreatingAccount
                           @bind-ErrorMsg=@ErrorMsg
                           Enter=@((e) => Enter(e))
                           GrabDemo=GrabDemo>
                <div class="flex-r" style="margin-top:2vh">
                    @if (!Disabled)
                    {
                        <button class="btn btn-primary" disabled=@Disabled @onclick="@(() => CheckWeIn())">Submit</button>
                    }
                    else
                    {
                        <div class="flex-r" style="justify-content:space-around">
                            <span style="font-size:large;margin:0 1em" class="oi oi-media-record first-dot"></span>
                            <span style="font-size:large;margin:0 1em" class="oi oi-media-record second-dot"></span>
                            <span style="font-size:large;margin:0 1em" class="oi oi-media-record third-dot"></span>
                        </div>
                    }
                </div>
            </UserPassLogin>
        }
    }
    else
    {
        @if (mobile)
        {
            <div class="sidebar sticky" style="height:fit-content">
                <NavMenu />
            </div>
        }
        <main>
            @if (!mobile)
            {
                <div class="table sticky">
                    <div style="position: absolute; top:1vw; left:1vw; height:@HeightTopBar; vertical-align:middle">
                        <a href="account" style="font-size:large;font-family:'Imprint MT Shadow'; text-align:center; float:left;color:white;">
                            <strong>@("Welcome " + Constants.CUR_USER + "!")</strong>
                        </a>
                    </div>

                    <ul class="ps-3 navbar-dark" style="text-align: center;height:@HeightTopBar; list-style:none; padding-top:1vh;background-color:indigo;vertical-align:middle">

                        <li>
                            <a class="navbar-brand" href="" style="font-family:'Imprint MT Shadow'; text-align:center;">
                                <span class="oi oi-lightbulb"></span> Home
                            </a>
                        </li>
                        <li>
                            <a class="navbar-brand" href="input" style="font-family:'Imprint MT Shadow'; text-align:center;">
                                <span class="oi oi-plus" aria-hidden="true"></span> Input
                            </a>
                        </li>
                        @if (ShowDelete)
                        {
                            <li>
                                <a class="navbar-brand" href="delete" style="font-family:'Imprint MT Shadow'; text-align:center;">
                                    <span class="oi oi-minus" aria-hidden="true"></span> Delete
                                </a>
                            </li>
                        }
                        @if (ShowUpdate)
                        {
                            <li>
                                <a class="navbar-brand" href="update" style="font-family:'Imprint MT Shadow'; text-align:center;">
                                    <span class="oi oi-arrow-thick-top" aria-hidden="true"></span> Update
                                </a>
                            </li>
                        }
                        @if (ShowPortfolio)
                        {
                            <li>
                                <a class="navbar-brand" href="portfolio" style="font-family:'Imprint MT Shadow'; text-align:center;">
                                    <span class="oi oi-dollar"></span> Portfolio
                                </a>
                            </li>
                        }
                        @if (ShowChart)
                        {
                            <li>
                                <a class="navbar-brand" href="chart" style="font-family:'Imprint MT Shadow'; text-align:center;">
                                    <span class="glyphicon glyphicon-signal" aria-hidden="true"></span> Chart
                                </a>
                            </li>
                        }
                        @if (ShowForecast)
                        {
                            <li>
                                <a class="navbar-brand" href="forecast" style="font-family:'Imprint MT Shadow'; text-align:center;">
                                    <span class="oi oi-sun"></span> Forecast
                                </a>
                            </li>
                        }
                    </ul>
                    <div style="position: absolute; top:1vw; right:1vw; height:@HeightTopBar; vertical-align:middle">
                        <a href="account" style="font-size:large;font-family:'Imprint MT Shadow'; text-align:center; float:left;color:white;">
                            <span class="oi oi-person"></span>
                            <strong>@("Manage Account")</strong>
                        </a>
                    </div>
                </div>
                <div style="position: fixed; top:@HeightTopBar; left:0; width:@(WidthLeftBar);height:90vh">
                    <div style="z-index:1;width: @WidthLeftBar; height:inherit;margin-right:2vw; overflow: auto; position: relative;border: solid gray 1px;padding:0">
                        <BalanceTray @ref=@GlobalBT />
                    </div>
                </div>
            }
            <article class="content px-4" style="padding-top:@HeightTopBar;@PaddingLeft">
                <CascadingValue Value=LogOff>
                    <CascadingValue Value=GlobalBT>
                        @Body
                    </CascadingValue>
                </CascadingValue>
            </article>
        </main>
        <Footer />
    }
</div>

@code {
    private bool mobile => Constants.Mobile;

    private string LogTitle = "Logging in";
    EventCallback LogOff => EventCallback.Factory.Create(this, SignOut);

    public BalanceTray GlobalBT { get; set; } = new BalanceTray();

    private double heightTopBar = 8;
    private string HeightTopBar => heightTopBar + "vh";
    private double widthLeftBar = 20;
    private string WidthLeftBar => widthLeftBar + "em";
    private double widthLeftBarPlus => widthLeftBar * 1.1;
    private string WidthLeftBarPlus => widthLeftBarPlus + "em";
    private string PaddingLeft => Constants.Mobile ? "" : "padding-left:" + WidthLeftBarPlus + " !important;";

    private string theView { get; set; }
    private string ErrorMsg { get; set; }
    private bool WeIn { get; set; }
    private string username { get; set; }
    private string username2 { get; set; }
    private string password { get; set; }
    private string confirmPassword { get; set; }
    private bool CreatingAccount { get; set; }
    private int pwdAttempts { get; set; }

    private List<Balance> Balances = new List<Balance>();

    private UserPassLogin userpasslogin;

    private bool ShowLoading { get; set; } = false;
    private bool Disabled { get; set; } = true;

    private bool ShowDelete => Constants.Balances != null && Constants.Balances.Count > 0;
    private bool ShowUpdate => Constants.Balances != null && Constants.Balances.Count > 0;
    private bool ShowPortfolio => Constants.Balances != null && Constants.Balances.FirstOrDefault(b => b.BalanceType == "Stocks") != null;
    private bool ShowChart => Constants.Transactions != null && Constants.Transactions.Count > 0;
    private bool ShowForecast => Constants.Monthlies != null && Constants.Monthlies.Count > 0;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return base.OnAfterRenderAsync(firstRender);
    }
    protected override async Task OnInitializedAsync()
    {
        ErrorMsg = "";
        try
        {
            Constants.Mobile = await jsRuntime.InvokeAsync<bool>("isDevice");
        }
        catch (Exception e)
        {
            Constants.Mobile = false;
        }
        theView = Constants.Mobile ? "mobile-view" : "desktop-view";

        string BeenToggled = await ReadCookies("DarkModePreference");

        var token = await sessionStorage.GetItemAsync<string>("token");
        if (!string.IsNullOrEmpty(token))
        {
            ShowLoading = true;
            StateHasChanged();
        }

        await CheckWeIn(false);
    }

    private async void GrabDemo()
    {
        Disabled = true;
        Constants.Token = "DEMO";
        Constants.CUR_USER = "Optimus";
        TokenWrapper tokenWrapper = await CatchAllRunner.GrabDemo();
        await Constants.Init(true);
        NavMan.NavigateTo("");

        Balances = Constants.catchAll.Balances;
        Balances.Sort(Constants.CompareBalance);
        WeIn = true;
        StateHasChanged();
    }

    protected async Task<string> ReadCookies(string CookieName)
    {
        string response;
        try
        {
            response = await jsRuntime.InvokeAsync<string>("ReadCookie", CookieName);
        }
        catch (Exception e)
        {
            response = null;
        }

        return response;
    }

    public async Task WriteCookieAsync(string name, string value, double days)
    {
        var test = await jsRuntime.InvokeAsync<object>("WriteCookie", name, value, days);
    }

    private async void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            CheckWeIn();
    }

    public async Task<bool> CheckWeIn(bool countAttempt = true)
    {
        var token = await sessionStorage.GetItemAsync<string>("token");
        await sessionStorage.SetItemAsync("token", "");
        bool verified;

        if (string.IsNullOrEmpty(token))
        {
            if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
            {
                Disabled = false;
                return false;
            }

            if (CreatingAccount)
            {
                countAttempt = false;
                bool Passed = userpasslogin.passwordRules.CheckConditions();
                if (Passed)
                {
                    Disabled = true;
                    StateHasChanged();
                    WeIn = await UserRepo.AddUser(username, username2, password);
                    if (!WeIn)
                    {
                        ErrorMsg = "Denied. One of your usernames is already taken.";
                    }
                    else
                        ShowLoading = true;
                    StateHasChanged();
                }
                else
                    WeIn = false;
            }
            else
            {
                Disabled = true;
                ShowLoading = true;
                StateHasChanged();
                WeIn = await UserRepo.VerifyUserAsync(username, password);
            }
        }
        else
        {
            verified = await UserRepo.VerifyUserAsync(token);
            WeIn = verified;

            if (verified)
                Constants.Token = token;
        }

        if (WeIn)
        {
            ErrorMsg = "";
            await sessionStorage.SetItemAsync("token", Constants.Token);

            if (string.IsNullOrEmpty(username))
                Constants.CUR_USER = await sessionStorage.GetItemAsync<string>("cur_user");
            else
                Constants.CUR_USER = username;

            await sessionStorage.SetItemAsync("cur_user", Constants.CUR_USER);


            await Constants.Init(true);
            NavMan.NavigateTo("");

            Balances = Constants.catchAll.Balances;
            Balances.Sort(Constants.CompareBalance);
        }
        else if (countAttempt)
        {
            pwdAttempts++;
            ErrorMsg = "Incorrect Password. Attempts: " + pwdAttempts;
        }

        Disabled = false;
        ShowLoading = false;
        StateHasChanged();

        return WeIn;
    }
    private async Task SignOut()
    {
        WeIn = false;
        Disabled = false;
        Constants.Token = "";
        await sessionStorage.SetItemAsync("token", Constants.Token);
        await sessionStorage.SetItemAsync("cur_user", "");
        StateHasChanged();
    }
}
