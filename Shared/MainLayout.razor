@using BetterBudgetWeb.Data;
@using BetterBudgetWeb.Repo;
@inherits LayoutComponentBase
@inject IJSRuntime jsRuntime
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<style>
    .desktop-view {
        background-position: center center;
        background-attachment: fixed;
        background-size: cover;
        background-repeat: no-repeat;
        min-height: 100vh;
        overflow-x: hidden;
    }

    .mobile-view {
        background-position: center center;
        background-attachment: fixed;
        background-size: cover;
        height: 100vh;
        overflow-y: auto;
        overflow-x: hidden;
        background-repeat: no-repeat;
    }

    ul {
        list-style: none;
        list-style-type: none;
        margin: 0;
        padding: 0;
        overflow: hidden;
        background-color: #333;
    }

        ul#brag-top {
            text-align: center;
        }


        ul > li {
            display: inline-block;
        }

            ul > li a, .dropbtn {
                display: inline-block;
                color: white;
                text-align: center;
                padding: 14px 16px;
                text-decoration: none;
            }

                ul > li a:hover, .dropdown:hover .dropbtn {
                    background-color: purple;
                }

            ul > li.dropdown {
                display: inline-block;
            }

    .dropdown-content {
        display: none;
        position: fixed;
        background-color: #f9f9f9;
        min-width: 160px;
        margin-top: 3.5vh;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 10;
    }

        .dropdown-content a {
            color: white;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            text-align: left;
            background-color: purple;
            font-family: Papyrus;
        }

            .dropdown-content a:hover {
                background-color: midnightblue;
            }

    .table {
        display: table; /* Allow the centering to work */
        margin: 0 auto;
    }

    .dropdown:hover .dropdown-content {
        display: block;
    }

    body {
        color: @Constants.ColorScheme["Text"];
    }

    tr:nth-child(even) {
        background-color: @Constants.ColorScheme["TableEven"];
        color: @Constants.ColorScheme["Text"];
    }

    tr:nth-child(odd) {
        background-color: @Constants.ColorScheme["TableOdd"];
        color: @Constants.ColorScheme["Text"];
    }

    td, th {
        border: 1px solid #000000;
        font-size: 1vw;
        text-align: center;
    }

    table {
        font-family: arial, sans-serif;
        font-size: 1vw;
        border-collapse: collapse;
        width: 100%;
    }

    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        -webkit-transition: .4s;
        transition: .4s;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            -webkit-transition: .4s;
            transition: .4s;
        }

    input:not(:checked) + .slider {
        background-color: darkorange;
    }

    input:checked + .slider {
        background-color: #2196F3;
    }

    input:focus + .slider {
        box-shadow: 0 0 1px #2196F3;
    }

    input:checked + .slider:before {
        -webkit-transform: translateX(26px);
        -ms-transform: translateX(26px);
        transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
        border-radius: 34px;
    }

        .slider.round:before {
            border-radius: 50%;
        }

    .income-good {
        color: @Constants.ColorScheme["IncomeGood"];
    }

    .income-bad, .equity-bad {
        color: red;
    }


    .equity-good {
        color: @Constants.ColorScheme["EquityGood"];
    }

    .debt {
        color: @Constants.ColorScheme["Debt"];
    }

    /* Style the tab */
    .tab {
        overflow: hidden;
        border: 1px solid #ccc;
        background-color: @Constants.ColorScheme["Tab-Back"];
        width: 75%;
    }

        /* Style the buttons inside the tab */
        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
            font-size: 17px;
            color: @Constants.ColorScheme["Text"];
        }

            /* Change background color of buttons on hover */
            .tab button:hover {
                background-color: @Constants.ColorScheme["Tab-Hover"];
                color: black;
            }

            .tab button.active:hover {
                color: @Constants.ColorScheme["Text"];
            }

            /* Create an active/current tablink class */
            .tab button.active {
                background-color: @Constants.ColorScheme["Tab-Active"];
            }

    /* Style the tab content */
    .tabcontent {
        width: 75%;
        display: block;
        padding: 6px 12px;
        border: 1px solid #ccc;
        border-top: none;
    }

    .arrow {
        border: solid @Constants.ColorScheme["Text"];
        border-width: 0 3px 3px 0;
        display: inline-block;
        padding: 1vh;
    }

    .right {
        transform: rotate(-45deg);
        -webkit-transform: rotate(-45deg);
    }

    .down {
        transform: rotate(45deg);
        -webkit-transform: rotate(45deg);
    }

    .spendchart-btn {
        color: @Constants.ColorScheme["Text"];
        width: 20%;
        background-color: transparent;
        outline: none;
        border: none;
    }


    /* width */
    ::-webkit-scrollbar {
        width: 10px;
    }

    /* Track */
    ::-webkit-scrollbar-track {
        box-shadow: inset 0 0 5px grey;
        border-radius: 10px;
    }

    /* Handle */
    ::-webkit-scrollbar-thumb {
        background: #384152;
        border-radius: 10px;
    }

        /* Handle on hover */
        ::-webkit-scrollbar-thumb:hover {
            background: #203957;
        }
</style>

<div class="page @theView" style='background-color:@Constants.ColorScheme["Background"]'>
    @if (!WeIn)
    {
        <PageTitle>Enter Password</PageTitle>
        @if (mobile)
        {
            <div style="display:inline-block;width:100vw;height:100vh;">
                <div style="display:flex;justify-content:center;width:15%;flex-wrap:wrap;margin:1vh 50vw;transform: translate(-50%, 0%);text-align:center">
                    <h2 style="text-align:center">@("Welcome!!")</h2>
                    @if (!string.IsNullOrEmpty(ErrorMsg))
                    {
                        <span class="income-bad">@ErrorMsg</span>
                    }
                </div>
                <div style="display:flex;justify-content:center;width:100%;flex-wrap:wrap;margin:1vh 50vw;transform: translate(-50%, 0%);">
                    <input id="user" placeholder="Username" style="text-align:center;color:black;" type="text" @onkeydown="@Enter" @oninput="@(async (ui) => { username = (string) ui.Value;})" />
                    <input id="pwd" placeholder="Password" style="text-align:center;color:black;" type="password" @onkeydown="@Enter" @oninput="@(async (ui) => { password = (string) ui.Value;})" />
                </div>
                <div style="display:flex;justify-content:center;width:15%;flex-wrap:wrap;margin:1vh 50vw;transform: translate(-50%, 0%);">
                    <button class="btn btn-primary" disabled=@Disabled @onclick="@(() => CheckWeIn())">Submit</button>
                </div>
            </div>
        }
        else
        {
            <div style="display:inline-block;position: absolute;top: 50%;left: 50%;transform: translate(-50%, -50%);width:100vw">
                <div style="display:flex;justify-content:center;width:15%;flex-wrap:wrap;margin:1vh 50vw;transform: translate(-50%, 0%);">
                    <h2 style="text-align:center">@($"Welcome!!")</h2>
                </div>
                @if (!string.IsNullOrEmpty(ErrorMsg))
                {
                    <p class="income-bad" style="text-align:center">
                        @ErrorMsg
                    </p>
                }
                <div style="display:flex;justify-content:center;width:15%;flex-wrap:wrap;margin:1vh 50vw;transform: translate(-50%, 0%);">
                    <input id="user" placeholder="Username" style="text-align:center;color:black;" type="text" @onkeydown="@Enter" @oninput="@(async (ui) => { username = (string) ui.Value;})" />
                    <input id="pwd" placeholder="Password" style="text-align:center;color:black;" type="password" @onkeydown="@Enter" @oninput="@(async (ui) => { password = (string) ui.Value;})" />
                </div>
                <div style="display:flex;justify-content:center;width:15%;flex-wrap:wrap;margin:1vh 50vw;transform: translate(-50%, 0%);">
                    <button class="btn btn-primary" disabled=@Disabled @onclick="@(() => CheckWeIn())">Submit</button>
                </div>
            </div>
        }
    }
    else
    {
        @if (mobile)
        {
            <div class="sidebar">
                <NavMenu @bind-DarkMode=@DarkMode />
            </div>
        }

        <main>
            @if (!mobile)
            {
                <div class="table">
                    <div style="position: absolute; top:1vw; left:1vw; height:4vh; vertical-align:middle">
                        <a href="" style="font-size:large;font-family:Papyrus; text-align:center; float:left;color:white;">
                            <strong>@(Constants.WebWho)</strong>
                        </a>
                    </div>

                    <ul id="brag-top" class="ps-3 navbar-dark" style="height:50px; list-style:none; padding-top:1vh;background-image:linear-gradient(purple,indigo)">

                        <li>
                            <a class="navbar-brand" href="" style="font-family:Papyrus; text-align:center;">
                                <span class="oi oi-lightbulb"></span> Home
                            </a>
                        </li>
                        <li>
                            <a class="navbar-brand" href="input" style="font-family:Papyrus; text-align:center;">
                                <span class="oi oi-plus" aria-hidden="true"></span> Input
                            </a>
                        </li>
                        <li>
                            <a class="navbar-brand" href="delete" style="font-family:Papyrus; text-align:center;">
                                <span class="oi oi-minus" aria-hidden="true"></span> Delete
                            </a>
                        </li>
                        <li>
                            <a class="navbar-brand" href="update" style="font-family:Papyrus; text-align:center;">
                                <span class="oi oi-arrow-thick-top" aria-hidden="true"></span> Update
                            </a>
                        </li>
                        <li>
                            <a class="navbar-brand" href="portfolio" style="font-family:Papyrus; text-align:center;">
                                <span class="oi oi-dollar"></span> Portfolio
                            </a>
                        </li>
                        <li>
                            <a class="navbar-brand" href="chart" style="font-family:Papyrus; text-align:center;">
                                <span class="glyphicon glyphicon-signal" aria-hidden="true"></span> Chart
                            </a>
                        </li>
                        @if (Constants.Who == "Nathan")
                        {
                            <li>
                                <a class="navbar-brand" href="simulations" style="font-family:Papyrus; text-align:center;">
                                    <span class="oi oi-terminal"></span> Simulations
                                </a>
                            </li>
                        }
                    </ul>

                    <div style="position: absolute; top:.3vw; right:1vw; height:4vh; vertical-align:middle">
                        <span style="position:relative;font-size:large;top:.5vw;text-align:center;color:white;">@(Constants.DarkMode ? "Dark Mode:" : "Light Mode:")</span>
                        <label class="switch">
                            <input type="checkbox" @bind=DarkMode>
                            <span class="slider round"></span>
                        </label>
                    </div>
                </div>
            }
            <article class="content px-4">
                @Body
            </article>
        </main>
    }
</div>

@code {
    private bool mobile => Constants.Mobile;

    private string theView { get; set; }
    private string ErrorMsg { get; set; }
    private bool WeIn { get; set; }
    private string username { get; set; }
    private string password { get; set; }
    private int pwdAttempts { get; set; }
    private bool Disabled { get; set; }
    private bool darkMode { get; set; } = Constants.DarkMode;
    private bool DarkMode
    {
        get
        {
            return darkMode;
        }
        set
        {
            if (value != darkMode)
                ToggleLightDark();

            darkMode = value;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ErrorMsg = "";
        Constants.Mobile = await jsRuntime.InvokeAsync<bool>("isDevice");
        theView = Constants.Mobile ? "mobile-view" : "desktop-view";

        string BeenToggled = await ReadCookies("DarkModePreference");


        if (!string.IsNullOrEmpty(BeenToggled))
        {
            bool TryToParseBool = bool.TryParse(BeenToggled, out bool WhatToSetToDarkMode);

            if (TryToParseBool && !Constants.Nighttime())
            {
                DarkMode = WhatToSetToDarkMode;
            }

        }

        await CheckWeIn(false);
    }

    protected async Task<string> ReadCookies(string CookieName)
    {
        string response;
        try
        {
            response = await jsRuntime.InvokeAsync<string>("ReadCookie", CookieName);
        }
        catch (Exception e)
        {
            response = null;
        }

        return response;
    }

    public async Task WriteCookieAsync(string name, string value, double days)
    {
        var test = await jsRuntime.InvokeAsync<object>("WriteCookie", name, value, days);
    }

    private async void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            CheckWeIn();
    }

    private async void ToggleLightDark()
    {
        Constants.DarkMode = !Constants.DarkMode;
        Constants.DetermineDarkLight();
        await WriteCookieAsync("DarkModePreference", Constants.DarkMode.ToString(), 10);
        StateHasChanged();
    }

    public async Task<bool> CheckWeIn(bool countAttempt = true)
    {
        // var tmpPass = await sessionStorage.GetItemAsync<string>("NoNo");
        // var tmpUser = await sessionStorage.GetItemAsync<string>("user");

        // if (tmpPass == null)
        //     tmpPass = Constants.SHA256(password);
        if (string.IsNullOrEmpty(username) | string.IsNullOrEmpty(password))
            return false;

        Disabled = true;

        User theUser = await UserRepo.VerifyUserAsync(username, password);
        WeIn = theUser != null;

        if (WeIn)
        {
            ErrorMsg = "";
            // await sessionStorage.SetItemAsync("NoNo", tmpPass);

            Constants.Who = theUser.Name;

            await Constants.Init(true);
        }
        else if (countAttempt)
        {
            pwdAttempts++;
            ErrorMsg = "Incorrect Password. Attempts: " + pwdAttempts;
        }

        Disabled = false;
        StateHasChanged();

        return WeIn;
    }
}
