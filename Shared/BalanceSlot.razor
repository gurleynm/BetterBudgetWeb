@using BetterBudgetWeb.Data;
@using BetterBudgetWeb.MainMenuItems
@using BetterBudgetWeb.Repo;
@using BetterBudgetWeb.Runner;
@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

<style>
    .selected-account {
        background-color: @Constants.ColorScheme["Tab-Active"];
    }
</style>

<hr style="margin:0" />
<div class="@SetClass" style="display:flex;flex-direction:row;flex-wrap:wrap;justify-content:space-between;padding:0; margin: 0;cursor:pointer;
                                width:@(Constants.Mobile ? "90%" :"100%");border: 1px gray solid;
                                    background-color:@TheBalance.HexColor;color:@TheBalance.TextColor" @onclick=Clicked>
    <div style="align-self:flex-start">
        <div style="display:flex;flex-direction:column;justify-content:space-between;padding:0 0 0 .5vw; margin: 0">
            <label style="cursor:pointer;font-size:medium;align-self:flex-start;margin:0;"><strong>@TheBalance.Name</strong></label>
            <label style="cursor:pointer;font-size:medium;align-self:flex-start;margin:0;"><strong>@("(" + TheBalance.Person + ")")</strong></label>
        </div>
    </div>
    <div style="align-self:flex-end;padding:0; margin: 0;background-color:@Constants.ColorScheme["Background"];width:35%">
        <div style="display:flex;flex-direction:column;justify-content:space-between;padding:0 .5vw 0 0; margin: 0">
            <label class="@ColorClass()" style="cursor:pointer;font-size:medium;align-self:flex-end;margin:0">@Constants.Pretty(Amount)</label>
            <br />
        </div>
    </div>
</div>
@if (Show)
{
    <MonthlySpending OnDeleteConfirm=@CloseModal OnEditConfirm=@CloseModal TheBalance=@TheBalance  />
}

<hr style="margin:0" />


@code {
    [Parameter]
    public Balance TheBalance { get; set; } = new Balance();
    [Parameter]
    public EventCallback<Balance> OnClick { get; set; }
    [Parameter]
    public bool IncludeGoals { get; set; }
    [Parameter]
    public string SetClass { get; set; }

    [Parameter]
    public EventCallback<bool> OnDeleteConfirm { get; set; }

    [Parameter]
    public EventCallback<bool> OnEditConfirm { get; set; }

    private List<Transaction> FilteredTransactions => Constants.catchAll.Transactions.Where(t =>
                                t.MonthYear() == Constants.MonthYear() && ThisBalance(t)).OrderByDescending(t => t.DateOfTransaction).ToList();

    public double Amount => GetAmount();
    private bool Show { get; set; }

    private string ColorClass()
    {
        int LoanMultiplier = TheBalance.BalanceType == "Loan" ? -1 : 1;

        return TheBalance.Value * LoanMultiplier < 0 ? "income-bad" : "income-good";
    }

    private string Pretty(double num)
    {
        return Constants.Pretty(num);
    }

    private async void Clicked()
    {
        if (TheBalance.BalanceType == "Stocks")
        {
            Constants.AccountIndexStr = TheBalance.Name;
            NavManager.NavigateTo("/portfolio");
        }
        else
        {
            Show = !Show;
            //await OnClick.InvokeAsync(TheBalance);
        }
    }
    private bool ThisBalance(Transaction t)
    {
        return t.PaidWithPerson1 == TheBalance.Name ||
                t.PaidWithPerson2 == TheBalance.Name ||
                t.PaidOffPerson1 == TheBalance.Name ||
                t.PaidOffPerson2 == TheBalance.Name;
    }

    private async void CloseModal(bool accepted)
    {
        await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
        if (accepted)
        {
            await OnEditConfirm.InvokeAsync(accepted);
            StateHasChanged();
        }
    }

    private async void Delete(bool accepted)
    {
        await JSRuntime.InvokeAsync<bool>("TurnOnScroll");
        if (accepted)
        {
            await OnDeleteConfirm.InvokeAsync(accepted);
        }

        StateHasChanged();
    }
    private double GetAmount()
    {
        double amount = TheBalance.Value;

        if (-1 <= amount && amount < 0)
            amount = 0;

        if (IncludeGoals)
        {
            amount = TheBalance.GetValueWithGoals();
        }

        if (TheBalance.BalanceType == "Stocks")
        {
            try
            {
                var Securities = Constants.Securities.Where(sec => sec.BalanceFrom.ToUpper() == TheBalance.Id.ToUpper())?.ToList();
                amount += Securities == null ? 0 : Securities.Sum(s => s.Value);
            }
            catch (Exception e) { }
        }

        double returnStr = amount;
        string testStr = amount.ToString();

        if (testStr == "-0")
            returnStr = 0;

        return returnStr;
    }
}
