@using BetterBudgetWeb.Data;

@if (!Mobile)
{
    @if (Balances != null)
    {
        <FancySelect @bind-Value="PaidWith" Style="margin:1vh 0 1vh 0;border:none;color:white">
            <option selected value="@string.Empty" disabled>@Balance1Header</option>
            @foreach (var pay in Balances)
            {
                <option style="background-color:@pay.HexColor;color:@pay.TextColor">@pay.Name</option>
            }
            <option value="NONE">Did not pay</option>
        </FancySelect>
    }
}
else
{
    @if (Balances != null)
    {
        <FancySelect @bind-Value="PaidWith" Style="margin:1vh 0 1vh 0;border:none;color:white">
            <option selected value="@string.Empty" disabled>@Balance1Header</option>
            @foreach (var pay in Balances)
            {
                <option style="background-color:@pay.HexColor;color:@pay.TextColor">@pay.Name</option>
            }
            <option value="NONE">Did not pay</option>
        </FancySelect>
    }
}

@code {
    public bool Mobile => Constants.Mobile;

    [Parameter]
    public string Person { get; set; } = "";

    private string paidWith;

    [Parameter]
    public string PaidWith
    {
        get => paidWith;
        set
        {
            if (paidWith == value) return;
            paidWith = value;
            PaidWithChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> PaidWithChanged { get; set; }

    private List<Balance> Balances;
    private List<Data.Envelope> Envelopes;

    private string Envelope1Header = "-- Envelopes --";
    private string Balance1Header = "-- Payment --";
    private string Envelope2Header = "-- Envelopes --";
    private string Balance2Header = "-- Payment --";

    protected override Task OnInitializedAsync()
    {
        var Person1Envelopes = Constants.Envelopes.Where(e => e.Person1Amount > 0).ToList();
        var Person2Envelopes = Constants.Envelopes.Where(e => e.Person2Amount > 0).ToList();

        var Person1Balances = Constants.Balances.Where(b => ValidPaymentBalance(b, Constants.Person1)).OrderBy(ba => ba.Name).ToList();
        var Person2Balances = Constants.Balances.Where(b => ValidPaymentBalance(b, Constants.Person2)).OrderBy(ba => ba.Name).ToList();

        int maxP1B = Person1Balances.Count == 0 ? 0 : Person1Balances.OrderByDescending(s => s.Name.Length).FirstOrDefault().Name.Length;
        int maxP1E = Person1Envelopes.Count > 0 ? Person1Envelopes.OrderByDescending(s => s.Name.Length).FirstOrDefault().Name.Length : 0;
        int maxP1 = Math.Max(maxP1B, maxP1E);

        if (maxP1 > Envelope1Header.Length)
        {
            Envelope1Header = "Envelopes ".PadRight(maxP1, '-');

            Balance1Header = "Payment ".PadRight(maxP1, '-');
        }

        int maxP2B = Person2Balances.Count == 0 ? 0 : Person2Balances.OrderByDescending(s => s.Name.Length).FirstOrDefault().Name.Length;
        int maxP2E = Person2Envelopes.Count > 0 ? Person2Envelopes.OrderByDescending(s => s.Name.Length).FirstOrDefault().Name.Length : 0;
        int maxP2 = Math.Max(maxP2B, maxP2E);

        if (maxP2 > Envelope2Header.Length)
        {
            Envelope2Header = "Envelopes ".PadRight(maxP2, '-');

            Balance2Header = "Payment ".PadRight(maxP2, '-');
        }

        if (Person == Constants.Person1)
        {
            Balances = new List<Balance>(Person1Balances);
            Envelopes = new List<Data.Envelope>(Person1Envelopes);
        }
        else if (Person == Constants.Person2)
        {
            Balances = new List<Balance>(Person2Balances);
            Envelopes = new List<Data.Envelope>(Person2Envelopes);
        }
        else
        {
            Balances = new List<Balance>(Constants.Balances.Where(b => ValidPaymentBalance(b)).OrderBy(e => e.Name).ToList());
            Envelopes = new List<Data.Envelope>(Constants.Envelopes).OrderBy(e => e.Name).ToList();
        }

        return base.OnInitializedAsync();
    }

    private bool ValidPaymentBalance(Balance b, string person)
    {
        return (b.Person == person || b.Person.ToUpper() == "JOINT");
    }

    private bool ValidPaymentBalance(Balance b)
    {
        return true;
    }
}
