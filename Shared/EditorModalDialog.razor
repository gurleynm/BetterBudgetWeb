@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Repo

@if (!Mobile)
{
    <Confirmation Title="Editting Transaction" OnClose="ModalCancel"
                  LeftBtnClick="ModalCancel" LeftBtnTxt="Close" LeftBtnColor="btn-secondary"
                  RightBtnClick="ModalAccept" RightBtnTxt="Accept" RightBtnColor="btn-success">
        <EditForm Model="@Transact">
            <table class="toggle-table" style="border-radius:0">
                <tr>
                    <td>
                        <label>Date</label>
                    </td>
                    <td>
                        <label>Expense Type</label>
                    </td>
                    <td>
                        <label>Name</label>
                    </td>
                    <td>
                        <label>@(Person1)</label>
                    </td>
                    <td>
                        <label>@(Person2)</label>
                    </td>
                    <td>
                        <label>Total</label>
                    </td>
                </tr>
                <tr>
                    <td style="padding:1vw">
                        <input class="custom-input" type="date" @bind-value="Transact.DateOfTransaction" style="color-scheme:dark" />
                    </td>
                    <td style="padding:1vw">
                        <ExpenseTypeInput @bind-NewExpense=@Transact.ExpenseType />
                    </td>
                    <td style="padding:1vw">
                        <input class="custom-input" type="text" @bind-value="Transact.Name" style="width:fit-content" />
                    </td>
                    <td style="padding:1vw">
                        <input class="custom-input" type="number" @bind=@Transact.Person1Amount>
                        <PaymentInput @bind-PaidWith="@Transact.PaidWithPerson1" Person="@Person1" />
                    </td>
                    <td style="padding:1vw">
                        <input class="custom-input" type="number" @bind=@Transact.Person2Amount>
                        <PaymentInput @bind-PaidWith="@Transact.PaidWithPerson2" Person="@Person2" />
                    </td>
                    <td style="padding:1vw">
                        <label>@Transact.TotalAmount</label>
                    </td>
                </tr>
            </table>
        </EditForm>
        <p style="color:red">@ErrorMsg</p>
    </Confirmation>
}
else
{
    <Confirmation Title="Editting Transaction" OnClose="ModalCancel"
                  LeftBtnClick="ModalCancel"
                  RightBtnClick="ModalAccept" RightBtnTxt="Accept" RightBtnColor="btn-success">
        <EditForm Model="@Transact">
            <table class="side-to-side spaced-table" style="border-radius:0;width:100%">
                <tr>
                    <td style="padding:1em 0">
                        <label>Name</label>
                    </td>
                    <td>
                        <input class="custom-input" type="text" @bind-value="Transact.Name" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label>Date</label>
                    </td>
                    <td>
                        <input class="custom-input" type="date" @bind-value="Transact.DateOfTransaction" style="color-scheme:dark" />
                    </td>
                </tr>
                <tr>
                    <td style="padding:1em 0">
                        <label>Expense Type</label>
                    </td>
                    <td>
                        <ExpenseTypeInput @bind-NewExpense=@Transact.ExpenseType />
                    </td>
                </tr>
                <tr>
                    <td style="padding:1em 0">
                        <label>@(Person1 + " Values")</label>
                    </td>
                    <td>
                        <input class="custom-input" type="number" @bind=@Transact.Person1Amount>
                        <br />
                        <PaymentInput @bind-PaidWith="@Transact.PaidWithPerson1" Person="@Person1" />
                    </td>
                </tr>
                <tr>
                    <td style="padding:1em 0">
                        <label>@(Person2 + " Values")</label>
                    </td>
                    <td>
                        <input class="custom-input" type="number" @bind=@Transact.Person2Amount>
                        <br />
                        <PaymentInput @bind-PaidWith="@Transact.PaidWithPerson2" Person="@Person2" />
                    </td>
                </tr>
                <tr>
                    <td style="padding:1em 0">
                        <label>Total</label>
                    </td>
                    <td>
                        <label>@Transact.TotalAmount</label>
                    </td>
                </tr>
            </table>
        </EditForm>
        <p style="color:red">@ErrorMsg</p>
    </Confirmation>
}

@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public Transaction Transact { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    string Person1 = Constants.Person1;
    string Person2 = Constants.Person2;

    public List<Data.Envelope> Person1Envelopes;
    public List<Data.Envelope> Person2Envelopes;

    public List<Balance> Person1Balances;
    public List<Balance> Person2Balances;

    private string Envelope1Header = "-- Envelopes --";
    private string Balance1Header = "-- Payment --";
    private string Envelope2Header = "-- Envelopes --";
    private string Balance2Header = "-- Payment --";

    private string errorMsg = "";
    private string ErrorMsg
    {
        get { return errorMsg; }
        set
        {
            errorMsg = value;
            StateHasChanged();
        }
    }

    public bool Mobile => Constants.Mobile;

    private bool Disabled;

    protected override Task OnInitializedAsync()
    {
        if (Constants.Balances.Any(b => b.Name == Transact.PaidWithPerson1 && b.Person == Constants.Person2) ||
            Constants.Balances.Any(b => b.Name == Transact.PaidWithPerson2 && b.Person == Constants.Person1))
        {
            Person1 = Constants.Person2;
            Person2 = Constants.Person1;
        }

        Person1Balances = Constants.Balances.Where(b => b.Person == Person1 || b.Person.ToUpper() == "JOINT").OrderBy(ba => ba.Name).ToList();
        Person2Balances = Constants.Balances.Where(b => b.Person == Person2 || b.Person.ToUpper() == "JOINT").OrderBy(ba => ba.Name).ToList();

        return base.OnInitializedAsync();
    }

    private Task ModalCancel()
    {
        Disabled = true;
        return OnClose.InvokeAsync(false);
    }

    private async Task ModalDecline()
    {
        Disabled = true;
        await OnClose.InvokeAsync(false);
    }

    private async Task ModalAccept()
    {
        ErrorMsg = "";
        Disabled = true;
        string badType = "Envelope";
        if (Transact.ExpenseType == "Envelope")
        {
            if (!string.IsNullOrEmpty(Transact.PaidWithPerson1) &&
                Transact.PaidWithPerson1 != "none" &&
                !Person1Envelopes.Select(e => e.Name).Contains(Transact.PaidWithPerson1))
                Transact.PaidWithPerson1 = "";

            if (!string.IsNullOrEmpty(Transact.PaidWithPerson2) &&
                Transact.PaidWithPerson2 != "none" &&
                !Person2Envelopes.Select(e => e.Name).Contains(Transact.PaidWithPerson2))
                Transact.PaidWithPerson2 = "";
            badType = "n Envelope";
        }
        else
        {
            if (!string.IsNullOrEmpty(Transact.PaidWithPerson1) &&
                Transact.PaidWithPerson1 != "none" &&
                !Person1Balances.Select(e => e.Name).Contains(Transact.PaidWithPerson1))
                Transact.PaidWithPerson1 = "";

            if (!string.IsNullOrEmpty(Transact.PaidWithPerson2) &&
                Transact.PaidWithPerson2 != "none" &&
                !Person2Balances.Select(e => e.Name).Contains(Transact.PaidWithPerson2))
                Transact.PaidWithPerson2 = "";
            badType = " Payment";
        }

        if (string.IsNullOrEmpty(Transact.PaidWithPerson1) && string.IsNullOrEmpty(Transact.PaidWithPerson2))
        {
            Disabled = false;
            ErrorMsg = "Enter a" + badType + " value for at least 1 person.";
            return;
        }

        await TransactionRepo.AddOrUpdateAsync(Transact);
        await OnClose.InvokeAsync(true);
    }
}