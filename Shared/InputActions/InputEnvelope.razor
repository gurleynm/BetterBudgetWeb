@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Repo

@if (Mobile)
{
    <br style="clear:both" />
    @if (!string.IsNullOrEmpty(EnvName) && !string.IsNullOrEmpty(Amount))
    {
        <div style="width:90vw;height:fit-content;">
            <h1 style="text-align:center;">Envelope Preview:</h1>
            <div class="flex-r">
                <Envelope Name="@EnvName" Scale=80 Font_Size=9 Goal="@(double.TryParse(Amount, out double attempt0) ? attempt0 : 0)" />
            </div>
        </div>
    }
    <br />
    <div style="position:relative;">
        <div style="float:left; margin-right:10vw;">
            <label>Envelope Name:</label>
            <br />
            <input class="custom-input" type="text" placeholder="Envelope Name" @bind=EnvName @oninput="@(async (ui) => { EnvName = (string)ui.Value; })" />
        </div>
        <br style="clear:both" />
        <br style="clear:both" />
        <div style="float:left; margin-right:10vw;">
            <label>Goal Amount:</label>
            <br />
            <input class="custom-input" type="number" placeholder="Goal Amount" @bind=Amount @oninput="@(async (ui) => { Amount = (string)ui.Value; })" />
        </div>
        <br style="clear:both" />
        <br style="clear:both" />
        <div>
            <label>@($"{Constants.Person1} Will Pay With:")</label>
            <br />
            <FancySelect @bind-Value="WillPayPerson1" Style="">
                <option value="Debt">Paying off Debt</option>
                <option value="@string.Empty" selected disabled="disabled">@($"(Select How {Constants.Person1} Will Pay)")</option>
                @if (Balances != null)
                {
                    @foreach (var pay in Balances.Where(b => b.Person == Constants.Person1 || b.Person.ToUpper() == "JOINT"))
                    {
                        <option style="background-color:@pay.HexColor;color:@pay.TextColor" value="@pay.Id">@pay.Name</option>
                    }
                }
                <option value="NONE">Will Not Contribute</option>
            </FancySelect>
        </div>
        <br style="clear:both" />
        <br style="clear:both" />
        <div>
            <label>@($"{Constants.Person2} Will Pay With:")</label>
            <br />
            <FancySelect @bind-Value="WillPayPerson2" Style="">
                <option value="@string.Empty" selected disabled="disabled">@($"(Select How {Constants.Person2} Will Pay)")</option>
                @if (Balances != null)
                {
                    @foreach (var pay in Balances.Where(b => b.Person == Constants.Person2 || b.Person.ToUpper() == "JOINT"))
                    {
                        <option style="background-color:@pay.HexColor;color:@pay.TextColor" value="@pay.Id">@pay.Name</option>
                    }
                }
                <option value="NONE">Will Not Contribute</option>
            </FancySelect>
        </div>
        <br style="clear:both" />
        <br />
        <div style="float:left; margin-right:10vw;">
            <label>Update this with Charges:</label>
            <br />
            <input class="custom-input" @bind="UpdateCheck" type="checkbox" />
        </div>
        <br style="clear:both" />
        <br />
        @if (!string.IsNullOrEmpty(ErrorMsg))
        {
            <p style="color:@ErrorColor">@ErrorMsg</p>
        }
        <button class="btn btn-primary" disabled=@Disabled @onclick=Submit>Submit</button>
        <br />
        <br />
        <br />
        <br />
    </div>
}
else
{
    <div class="tabcontent">
        <div class="flex-r-100">
            <div class="flex-r" style="justify-content:space-between;align-items:start;flex-wrap:wrap;width:75%;padding-right:5%">
                <div class="flex-r-100" style="justify-content:space-between;align-items:start;">
                    <div>
                        <label>Envelope Saving Goal:</label>
                        <br />
                        <input class="custom-input" type="text" placeholder="Envelope Name" @bind=EnvName @oninput="@(async (ui) => { EnvName = (string)ui.Value; })" />
                    </div>
                    <div>
                        <label>Goal Amount:</label>
                        <br />
                        <input class="custom-input" type="number" placeholder="Goal Amount" @bind=Amount @oninput="@(async (ui) => { Amount = (string)ui.Value; })" />
                    </div>
                    <div class="flex-r" style="align-items:baseline">
                        <label style="margin-right:2px">Update this with Charges:</label>
                        <input @bind="UpdateCheck" type="checkbox" />
                    </div>
                </div>
                <div class="flex-r-100" style="justify-content:space-evenly;align-items:start;">
                    <div>
                        <label>@($"{Constants.Person1} Will Pay With:")</label>
                        <br />
                        <FancySelect @bind-Value="WillPayPerson1" Style="">
                            <option value="@string.Empty" selected disabled="disabled">@($"(Select How {Constants.Person1} Will Pay)")</option>
                            @if (Balances != null)
                            {
                                @foreach (var pay in Balances.Where(b => b.Person == Constants.Person1 || b.Person.ToUpper() == "JOINT"))
                                {
                                    <option style="background-color:@pay.HexColor;color:@pay.TextColor" value="@pay.Id">@pay.Name</option>
                                }
                            }
                            <option value="NONE">Will Not Contribute</option>
                        </FancySelect>
                    </div>
                    <div>
                        <label>@($"{Constants.Person2} Will Pay With:")</label>
                        <br />
                        <FancySelect @bind-Value="WillPayPerson2" Style="">
                            <option value="@string.Empty" selected disabled="disabled">@($"(Select How {Constants.Person2} Will Pay)")</option>
                            @if (Balances != null)
                            {
                                @foreach (var pay in Balances.Where(b => b.Person == Constants.Person2 || b.Person.ToUpper() == "JOINT"))
                                {
                                    <option style="background-color:@pay.HexColor;color:@pay.TextColor" value="@pay.Id">@pay.Name</option>
                                }
                            }
                            <option value="NONE">Will Not Contribute</option>
                        </FancySelect>
                    </div>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(EnvName) && !string.IsNullOrEmpty(Amount))
            {
                <div class="flex-r" style="width:25%;flex-wrap:wrap">
                    <h1 style="text-align:center;">Envelope Preview:</h1>
                    <div>
                        <Envelope Name="@EnvName" Scale=15 Font_Size=2 Goal="@(double.TryParse(Amount, out double attempt0) ? attempt0 : 0)" />
                    </div>
                </div>
            }
        </div>
        <br style="clear:both" />
        <br />
        @if (!string.IsNullOrEmpty(ErrorMsg))
        {
            <p style="color:@ErrorColor">@ErrorMsg</p>
        }
        <button class="btn btn-primary" disabled=@Disabled @onclick=Submit>Submit</button>
    </div>
    <br />
    <br />
    <br />
    <br />
}

@code {
    [Parameter]
    public string EnvName { get; set; }
    [Parameter]
    public string WillPayPerson1 { get; set; }
    [Parameter]
    public string WillPayPerson2 { get; set; }
    [Parameter]
    public string Amount { get; set; }
    [Parameter]
    public bool UpdateCheck { get; set; } = true;

    public bool Mobile => Constants.Mobile;


    private List<Balance> Balances => Constants.Balances;
    private List<Data.Envelope> Envelopes { get; set; }

    private string ErrorMsg { get; set; } = string.Empty;
    private string ErrorColor { get; set; } = "red";

    private bool Disabled;

    protected override async Task OnInitializedAsync()
    {
        Envelopes = await EnvelopeRepo.GetEnvelopesAsync();
    }

    public async void Submit()
    {
        Disabled = true;
        ErrorMsg = string.Empty;
        ErrorColor = "red";
        bool tpAmount = double.TryParse(Amount, out double am);

        ErrorMsg += string.IsNullOrEmpty(EnvName) ? "Envelope Name must be set. " : "";
        ErrorMsg += !tpAmount ? "Amount must be a number. " : "";
        ErrorMsg += string.IsNullOrEmpty(WillPayPerson1) ? $"Must set {Constants.Person1} account to pay with. " : "";
        ErrorMsg += string.IsNullOrEmpty(WillPayPerson2) ? $"Must set {Constants.Person2} account to pay with. " : "";
        ErrorMsg += Envelopes.FirstOrDefault(e => e.Name == EnvName) != null ? "Already have a goal with this name. " : "";

        if (string.IsNullOrEmpty(ErrorMsg))
        {
            Envelopes = await EnvelopeRepo.AddOrUpdateAsync(new Data.Envelope
            {
                Name = EnvName,
                Goal = am,
                Person1Account = WillPayPerson1,
                Person2Account = WillPayPerson2,
                Person1Amount = 0,
                Person2Amount = 0,
                UpdateGoal = UpdateCheck ? 1 : 0
            });

            Constants.Envelopes = new List<Data.Envelope>(Envelopes);

            ErrorColor = "green";
            ErrorMsg = EnvName + " envelope was added!";

            EnvName = string.Empty;
            Amount = string.Empty;
            WillPayPerson1 = string.Empty;
            WillPayPerson2 = string.Empty;
        }

        Disabled = false;
        StateHasChanged();
    }
}
