@using BetterBudgetWeb.Data;
@using BetterBudgetWeb.Repo

@if (Mobile)
{
    @if (!string.IsNullOrEmpty(BalanceSelected))
    {
        <div class="flex-c-start" style="padding:1em">
            <div class="flex-r-100" style="align-items:center;padding:1em">
                <label style="padding-right:1em">Security Name:</label>
                <input type="text" placeholder="Security Name" style="text-transform:uppercase" @bind-value="@Name" @oninput="@(async (ui) => { Name = ((string)ui.Value).ToUpper();})" />
            </div>
            <div class="flex-r-100" style="align-items:center;padding:1em">
                <label style="padding-right:1em">Security Type:</label>
                <select class="custom-select" @bind="SecType" title="Type of Balance is required ">
                    <option value="Stock" selected>Stock</option>
                    <option value="ETF">ETF</option>
                    @*<option value="Call">Call Option</option>
                      <option value="Put">Put Option</option>*@
                    <option value="Crypto">Crypto</option>
                </select>
            </div>
            <div class="flex-r-100" style="align-items:center;padding:1em">
                <label style="padding-right:1em">Number of Shares:</label>
                <input type="number" style="width:20vw" placeholder="#" @bind-value="@NumShares" @oninput="@(async (ui) => { NumShares = (string) ui.Value;})" />
            </div>
            <div class="flex-r-100" style="align-items:center;padding:1em">
                <label style="padding-right:1em">Share Price at Sale:</label>
                <input type="number" style="width:23vw" placeholder="Cost" @bind-value="@AvgCost" @oninput="@(async (ui) => { AvgCost = (string) ui.Value;})" />
            </div>
            <div class="flex-r-100">
                <button class="btn btn-secondary" style="margin:auto 0" disabled=@Disabled @onclick=Submit>
                    @("Buy in " + ChosenBalance.Name
                        )
                </button>
            </div>
        </div>
    }
    <br style="clear:both" />
    <br />
    @if (!string.IsNullOrEmpty(ErrorMsg))
    {
        <p style="margin:0 2vw 2vh 2vh;overflow-wrap:normal;color:@ErrorColor">@ErrorMsg</p>
    }
}
else
{
    @if (!string.IsNullOrEmpty(BalanceSelected))
    {
        <div class="flex-r" style="padding-top:1em">
            <div class="flex-c-start" style="margin: 0 1vw;">
                <label>Security Name:</label>
                <input type="text" placeholder="Name" style="text-transform:uppercase;width:6vw"
                       @bind-value="@Name" @oninput="@(async (ui) => { Name = ((string)ui.Value).ToUpper();})" />
            </div>
            <div class="flex-c-start" style="margin:0 1vw;">
                <label>Security Type:</label>
                <select class="custom-select" @bind="SecType" title="Type of Balance is required ">
                    <option value="Stock" selected>Stock</option>
                    <option value="ETF">ETF</option>
                    @*<option value="Call">Call Option</option>
            <option value="Put">Put Option</option>*@
                    <option value="Crypto">Crypto</option>
                </select>
            </div>
            @if (@SecType == "Call" || @SecType == "Put")
            {
                <div class="flex-c-start" style="margin: 0 1vw;">
                    <label>Strike Price:</label>
                    <br />
                    <input type="number" style="width:7vw" placeholder="Strike Price" @bind-value="@StrikePrice" @oninput="@(async (ui) => { StrikePrice = (string) ui.Value;})" />
                </div>
                <div>
                    <label>Expiration Date:</label>
                    <br />
                    <input type="date" @bind="@ExpirationDate" />
                </div>
                <br style="clear:both" />
            }
            <div class="flex-c-start" style="margin: 0 1vw;">
                <label># of Shares:</label>
                <input type="number" style="width:7vw" placeholder="#" @bind-value="@NumShares" @oninput="@(async (ui) => { NumShares = (string) ui.Value;})" />
            </div>
            <div class="flex-c-start" style="margin: 0 1vw;">
                <label>Cost Per Share:</label>
                <input type="number" style="width:8vw" placeholder="Cost" @bind-value="@AvgCost" @oninput="@(async (ui) => { AvgCost = (string) ui.Value;})" />
            </div>
            @if (@ChosenBalance.Person?.ToUpper() == "JOINT")
            {
                <div class="flex-c-start" style="margin: 0 1vw;">
                    <label>Person:</label>
                    <br />
                    <select class="custom-select" @bind="Person" title="Person's Balance ">
                        <option value="@Constants.Person1" selected>@Constants.Person1</option>
                        <option value="@Constants.Person2">@Constants.Person2</option>
                    </select>
                </div>
            }
            <div class="flex-c">
                <button class="btn btn-secondary" style="margin: 0 1vw;width:fit-content;height:fit-content" disabled=@Disabled @onclick=Submit>
                    @("Buy in " + ChosenBalance.Name
                        )
                </button>
            </div>
        </div>
    }
    @if (!string.IsNullOrEmpty(ErrorMsg))
    {
        <p style="margin:0 1vw;overflow-wrap:normal;color:@ErrorColor">@ErrorMsg</p>
    }

    <br />
    <br />
}
@code {
    [Parameter]
    public EventCallback OnClick { get; set; }

    private string balanceSelected { get; set; }
    [Parameter]
    public string BalanceSelected
    {
        get { return balanceSelected; }
        set
        {
            if (balanceSelected == value)
                return;

            ErrorMsg = "";
            balanceSelected = value;
            if (value == null)
            {
                NumericAmountToTrade = -1;
                return;
            }

            if (Balances.Count == 0)
                Balances = Constants.Balances.Where(b => b.BalanceType == "Stocks").ToList();


            var BalanceFrom = Balances.FirstOrDefault(bal => bal.Id == value);

            if (BalanceFrom == null)
                return;

            Person = BalanceFrom.Person.ToUpper() == "JOINT" ? Constants.Person1 : BalanceFrom.Person;
            NumericAmountToTrade = BalanceFrom.APR == 0 ? BalanceFrom.Value : double.MaxValue;
        }
    }
    private Balance ChosenBalance => Balances.FirstOrDefault(b => b.Id == BalanceSelected) ?? new Balance();
    public string Name { get; set; }
    public string NumShares { get; set; }
    public string AvgCost { get; set; }
    public string StrikePrice { get; set; }
    public DateTime ExpirationDate { get; set; } = DateTime.Now;
    public string SecType { get; set; } = "Stock";
    public double NumericAmountToTrade = -1;

    public bool Mobile => Constants.Mobile;

    public string Person { get; set; }

    private string ErrorMsg { get; set; } = string.Empty;
    private string ErrorColor { get; set; } = "red";

    private List<Balance> Balances = new List<Balance>();

    private bool Disabled;

    protected override Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(balanceSelected))
        {
            Balances = Constants.Balances.Where(b => b.BalanceType == "Stocks").ToList();

            if (Balances.Count > 0)
                NumericAmountToTrade = Balances[0].APR == 0 ? Balances[0].Value : double.MaxValue;
            else
                NumericAmountToTrade = 0;

            Person = ChosenBalance.Person?.ToUpper() == "JOINT" ? Constants.Person1 : ChosenBalance.Person;
        }
        return base.OnInitializedAsync();
    }

    public async void Submit()
    {
        Disabled = true;
        ErrorMsg = string.Empty;
        ErrorColor = "red";

        ErrorMsg += string.IsNullOrEmpty(Name) ? "Security Name must be set. " : "";
        ErrorMsg += !double.TryParse(NumShares, out double tp) || tp < 0 ? "Enter a valid number of shares. " : "";
        ErrorMsg += !double.TryParse(AvgCost, out double tp2) || tp2 < 0 ? "Enter a valid number for your cost per share. " : "";
        ErrorMsg += (SecType == "Put" || SecType == "Call") && (!double.TryParse(StrikePrice, out double tp1) || tp1 < 0) ? "Enter a valid strike price. " : "";
        ErrorMsg += (SecType == "Put" || SecType == "Call") && DateTime.Now.CompareTo(ExpirationDate) > 0 ? "Pick a valid expiration date. " : "";
        ErrorMsg += tp * tp2 > NumericAmountToTrade ? "Exceeds amount available to trade by " + Constants.Pretty(tp * tp2 - NumericAmountToTrade) + ". " : "";

        if (string.IsNullOrEmpty(ErrorMsg))
        {
            await SecurityRepo.AddOrUpdateAsync(new Data.Security
                {
                    Name = Name,
                    Person = Person,
                    NumShares = double.TryParse(NumShares, out double toss) ? toss : 0,
                    AvgCost = double.TryParse(AvgCost, out double toss2) ? toss2 : 0,
                    SecType = SecType,
                    StrikePrice = double.TryParse(StrikePrice, out double toss1) ? toss1 : 0,
                    DateOfSecurity = ExpirationDate,
                    BalanceFrom = BalanceSelected
                });

            ErrorColor = "green";
            ErrorMsg = Name + " was added!";

            Balances = Constants.Balances.Where(b => b.BalanceType == "Stocks").ToList();

            Name = string.Empty;
            NumShares = "";
            AvgCost = "";
            StrikePrice = "";
            SecType = "Stock";
            Person = Constants.Person1;
        }

        Disabled = false;
        StateHasChanged();
        OnClick.InvokeAsync();
    }
}
