@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Repo
@using BetterBudgetWeb.Shared.Balances

@if (Mobile)
{

    <br style="clear:both" />
    <div class="flex-c-start" style="width:90vw;height:fit-content;align-items:center;border:solid silver 1px">
        <h1 style="text-align:center;">Account Preview:</h1>
        <BalanceSlot TheBalance="@(new Balance {Name = BalName, APR = double.TryParse(APR, out double a) ? a : 0, HexColor = Color, TextColor=TextColor,
                                    Value = double.TryParse(Amount, out double v) ? v : 0, BalanceType =  BalanceType})" IsPreview="true" />
        <div class="flex-r" style="justify-content:space-around;">
            <div class="flex-r" style="justify-content:flex-start;padding:1em;align-self:start">
                <label style="margin-right:1em">Color:</label>
                <input type="color" @bind=Color />
            </div>
            <div class="flex-r" style="justify-content:flex-start;padding:1em">
                <label style="margin-right:1em">Text Color:</label>
                <select class="custom-select" @bind=TextColor title="Type of Account is required ">
                    <option value="white" selected>White</option>
                    <option value="black">Black</option>
                </select>
            </div>
        </div>
    </div>
    <br />
    <div class="flex-c-start" style="position:relative;flex-wrap:wrap;justify-content:space-around;align-items:start">
        <div class="flex-c">
            <label style="margin-right:1em">Account Name:</label>
            <input type="text" placeholder="Account Name" @bind=BalName @oninput="@(async (ui) => { BalName = (string) ui.Value;})" />
        </div>
        <div class="flex-c">
            <label style="margin-right:1em">Initial Amount:</label>
            <input type="number" placeholder="Initial Amount" @bind=Amount @oninput="@(async (ui) => { Amount = (string) ui.Value;})" />
        </div>
        <div class="flex-c" style="padding:1em 0">
            <label style="margin-right:1em">Expense Type:</label>
            <select class="custom-select" @bind=BalanceType title="Type of Account is required ">
                <option value="Select" selected disabled="disabled">(Choose Account Type)</option>
                <option value="Equity">Equity</option>
                <option value="Loan">Credit Card/Loan</option>
                <option value="Income">Savings/Checkings/Income</option>
                <option value="Stocks">Stocks/Options/Securities</option>
            </select>
        </div>
        @if (BalanceType != "Stocks")
        {
            <div class="flex-c">
                <label style="margin-right:1em">APR:</label>
                <input type="number" placeholder="APR (optional)" @bind=APR @oninput="@(async (ui) => { APR = (string) ui.Value;})" />
            </div>
        }
        else
        {
            <div style="float:left; margin-right:10vw;">
                <label>Paid Through Work:</label>
                <br />
                <input @bind="PaidThroughWork" type="checkbox" />
            </div>
        }
        <div class="flex-r" style="justify-content:flex-start;padding:1em">
            <label style="margin-right:1em">Person:</label>
            <select class="custom-select" @bind="Person" title="Person's Account ">
                <option value="@Constants.Person1" selected>@Constants.Person1</option>
                <option value="@Constants.Person2">@Constants.Person2</option>
                <option value="Joint">Joint</option>
            </select>
        </div>
        <br style="clear:both" />
        <br />
        @if (!string.IsNullOrEmpty(ErrorMsg))
        {
            <p style="color:@ErrorColor">@ErrorMsg</p>
        }
        <div class="flex-r" style="width:100%;">
            <button class="btn btn-secondary" disabled=@Disabled @onclick=Submit>Submit</button>
        </div>
        <br />
        <br />
        <br />
        <br />
    </div>
}
else
{
    <div class="tabcontent flex-c-start" style="flex-wrap:wrap">
        <div class="flex-r" style="justify-content:space-between;align-items:start;width:100%">
            <div class="flex-c" style="justify-content:space-around">
                <label>Account Name:</label>
                <input type="text" placeholder="Account Name" @bind=BalName @oninput="@(async (ui) => { BalName = (string) ui.Value;})" />
            </div>
            <div class="flex-c" style="justify-content:space-around">
                <label>Initial Amount:</label>
                <input type="number" placeholder="Initial Amount" @bind=Amount @oninput="@(async (ui) => { Amount = (string) ui.Value;})" />
            </div>
            <div class="flex-c-start">
                <label>Expense Type:</label>
                <select class="custom-select" @bind=BalanceType title="Type of Account is required ">
                    <option value="Select" selected disabled="disabled">(Choose Account Type)</option>
                    <option value="Equity">Equity</option>
                    <option value="Loan">Credit Card/Loan</option>
                    <option value="Income">Savings/Checkings/Income</option>
                    <option value="Stocks">Stocks/Options/Securities</option>
                </select>
            </div>
        </div>
        <div class="flex-r" style="justify-content:space-between">
            <div class="flex-c-start">
                <label>Person:</label>
                <select class="custom-select" @bind="Person" title="Person's Account ">
                    <option value="@Constants.Person1" selected>@Constants.Person1</option>
                    <option value="@Constants.Person2">@Constants.Person2</option>
                    <option value="Joint">Joint</option>
                </select>
            </div>
            @if (BalanceType != "Stocks")
            {
                <div class="flex-c" style="justify-content:space-around">
                    <label>APR:</label>
                    <input type="number" placeholder="APR (optional)" @bind=APR @oninput="@(async (ui) => { APR = (string) ui.Value;})" />
                </div>
            }
            else
            {
                <div class="flex-r" style="align-items:baseline;align-self:center">
                    <label style="padding-right:1em">Paid Through Work:</label>
                    <input @bind="PaidThroughWork" type="checkbox" />
                </div>
            }
            <div class="flex-c-start">
                <label>Text Color:</label>
                <select class="custom-select" @bind=TextColor title="Type of Account is required ">
                    <option value="white" selected>White</option>
                    <option value="black">Black</option>
                </select>
            </div>
            <div class="flex-c-start">
                <label>Color:</label>
                <input type="color" @bind=Color />
            </div>
        </div>
        <div style="position:absolute; width:18vw;height:80vh;right:1vw;top:15vh;">
            <h1 style="text-align:center;">Account Preview:</h1>
            <BalanceSlot TheBalance="@(new Balance {Name = BalName, APR = double.TryParse(APR, out double a) ? a : 0, HexColor = Color, TextColor=TextColor,
                                    Value = double.TryParse(Amount, out double v) ? v : 0, BalanceType = BalanceType})" IsPreview="true" />
        </div>
        <br style="clear:both" />
        <br />
        @if (!string.IsNullOrEmpty(ErrorMsg))
        {
            <p style="color:@ErrorColor">@ErrorMsg</p>
        }
        <div class="flex-r" style="width:100%;justify-content:flex-start">
        <button class="btn btn-secondary" disabled=@Disabled @onclick=Submit>Submit</button>
        </div>
    </div>
    <br />
    <br />
    <br />
    <br />
}

@code {
    [Parameter]
    public string BalName { get; set; }
    [Parameter]
    public string APR { get; set; }
    [Parameter]
    public string Amount { get; set; }
    [Parameter]
    public string BalanceType { get; set; }
    [Parameter]
    public string Color { get; set; } = "#32A852";
    [Parameter]
    public bool PaidThroughWork { get; set; }

    public bool Mobile => Constants.Mobile;


    public string TextColor { get; set; } = "white";
    public string Person { get; set; } = Constants.Person1;

    private string ErrorMsg { get; set; } = string.Empty;
    private string ErrorColor { get; set; } = "red";

    private bool Disabled;

    public async void Submit()
    {
        Disabled = true;
        ErrorMsg = string.Empty;
        ErrorColor = "red";
        bool tpAmount = double.TryParse(Amount, out double am);
        bool tpAPR = double.TryParse(APR, out double apr);
        var c = Color;

        ErrorMsg += string.IsNullOrEmpty(BalName) ? "Account Name must be set. " : "";
        ErrorMsg += string.IsNullOrEmpty(BalanceType) ? "Please select an expense type. " : "";
        ErrorMsg += !tpAmount ? "Amount must be a number. " : "";
        ErrorMsg += !string.IsNullOrEmpty(APR) && !tpAPR ? "APR must be a number. " : "";
        ErrorMsg += string.IsNullOrEmpty(Color) ? "Color must be set." : "";

        if (string.IsNullOrEmpty(ErrorMsg))
        {
            if (BalanceType == "Stocks")
                apr = PaidThroughWork ? 1 : 0;

            await BalanceRepo.AddOrUpdateAsync(new Balance(BalName, am, BalanceType, apr, Color, TextColor, Person));

            ErrorColor = "green";
            ErrorMsg = BalName + " account was added!";

            BalName = string.Empty;
            APR = string.Empty;
            Amount = string.Empty;
            BalanceType = string.Empty;
            Color = "#32A852";
        }

        Disabled = false;
        StateHasChanged();
    }
}
