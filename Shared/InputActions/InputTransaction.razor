@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Repo
<style>
    .food {
        background-color: deeppink;
    }

    .gas {
        background-color: coral;
    }

    .fun {
        background-color: green;
    }

    option {
        color: black;
    }

    select {
        color: black;
    }

    input {
        color: black;
    }
</style>
@if (Mobile)
{
    <div style="width:fit-content">
        @if (Constants.Presets != null && Constants.Presets.Count > 0)
        {
            <br style="clear:both" />
            <div style="border: 2px solid green; width:90vw;height:fit-content;right:1vw;top:15vh;">
                <h1 style="text-align:center">Presets:</h1>
                <div style="display:table;justify-content:flex-start;align-content:flex-start;flex-wrap:wrap">
                    <div style="display:flex;justify-content:flex-start;align-content:flex-start;flex-wrap:wrap">
                        @foreach (var pre in Constants.Presets.Where(p => p.ExpenseType == "Grocery" || p.ExpenseType == "Eating Out"))
                        {
                            <button class="btn btn-primary" style="margin-left:1vw;margin-bottom:1vh;background-color:@pre.HexColor;color:@pre.TextColor;" @onclick='@(() => Preset(@pre.Name))'>@pre.Name</button>
                        }
                    </div>
                    <br />
                    <div style="display:flex;justify-content:flex-start;align-content:flex-start;flex-wrap:wrap">
                        @foreach (var pre in Constants.Presets.Where(p => p.ExpenseType == "Debt"))
                        {
                            <button class="btn btn-primary" style="margin-left:1vw;margin-bottom:1vh;background-color:@pre.HexColor;color:@pre.TextColor;" @onclick='@(() => Preset(@pre.Name))'>@pre.Name</button>
                        }
                    </div>
                    <br />
                    <div style="display:flex;justify-content:flex-start;align-content:flex-start;flex-wrap:wrap">
                        @foreach (var pre in Constants.Presets.Where(p => p.ExpenseType == "Gas"))
                        {
                            <button class="btn btn-primary" style="margin-left:1vw;margin-bottom:1vh;background-color:@pre.HexColor;color:@pre.TextColor;" @onclick='@(() => Preset(@pre.Name))'>@pre.Name</button>
                        }
                    </div>
                    <br />
                    <div style="display:flex;justify-content:flex-start;align-content:flex-start;flex-wrap:wrap">
                        @foreach (var pre in Constants.Presets.Where(p => p.ExpenseType == "Static Cost"))
                        {
                            <button class="btn btn-primary" style="margin-left:1vw;margin-bottom:1vh;background-color:@pre.HexColor;color:@pre.TextColor;" @onclick='@(() => Preset(@pre.Name))'>@pre.Name</button>
                        }
                    </div>
                    <div style="display:flex;justify-content:flex-start;align-content:flex-start;flex-wrap:wrap">
                        @foreach (var pre in Constants.Presets.Where(p => p.ExpenseType != "Eating Out" && p.ExpenseType != "Grovery" && p.ExpenseType != "Debt" && p.ExpenseType != "Gas" && p.ExpenseType != "Static Cost"))
                        {
                            <button class="btn btn-primary" style="margin-left:1vw;margin-bottom:1vh;background-color:@pre.HexColor;color:@pre.TextColor;" @onclick='@(() => Preset(@pre.Name))'>@pre.Name</button>
                        }
                    </div>
                </div>
            </div>
        }
        <br />
        <br />
        <div style="position:relative;">
            <div>
                <label>Transaction:</label>
                <br />
                <input type="text" placeholder="Name of Transaction" @bind-value="@TransactionName" @oninput="@(async (ui) => { TransactionName = (string) ui.Value;})" />
            </div>
            <br />
            <div>
                <label>Expense Type:</label>
                <br />
                <select class="custom-select" style="margin:1vh 0 1vh 0;" @bind="ExpenseType" title="Pick an Expense Type ">
                    <option value="@string.Empty" selected disabled="disabled">Expense</option>
                    @foreach (var et in ExpenseTypes)
                    {
                        @if (et.Contains("- Others -") || et.Contains("-- Dynamic Costs --"))
                        {
                            <option value="et" disabled>@et</option>
                        }
                        else
                        {
                            @if (et == "Paying Off Debt")
                            {
                                <option value="Debt">@et</option>
                            }
                            else
                            {
                                @if (et == "Transfer Between Accounts")
                                {
                                    <option value="Transfer">@et</option>
                                }
                                else
                                {
                                    <option value="@et">@et</option>
                                }
                            }
                        }
                    }
                </select>
            </div>
            @if (ExpenseType == "Debt")
            {
                <br />
                <div>
                    <label>@($"{Constants.Person1} Paying With:")</label>
                    <br />
                    <select class="custom-select" @bind="PaidWithPerson1" title="Paid For is required ">
                        <option value="@string.Empty" selected disabled="disabled">@($"(Choose {Constants.Person1}'s Account)")</option>
                        @if (ExpenseType == "Equity")
                        {
                            @if (Person1BalancesEquities != null)
                            {
                                @foreach (var pay in Person1BalancesEquities)
                                {
                                    <option value="@pay.Id">@pay.Name</option>
                                }
                            }
                        }
                        else
                        {
                            @if (Person1Balances != null)
                            {
                                @foreach (var pay in Person1Balances)
                                {
                                    <option value="@pay.Id">@pay.Name</option>
                                }
                            }
                        }
                        <option value="NONE">Did not pay</option>
                    </select>
                </div>
                <br />
                <div>
                    <label>@($"{Constants.Person1} Paying Off:")</label>
                    <br />
                    <select class="custom-select" @bind="PaidOffPerson1" title="Paid Off is required ">
                        <option value="@string.Empty" selected disabled="disabled">(Choose What You Paid Off)</option>
                        @if (Person1BalancesLoans != null)
                        {
                            @foreach (var pay in Person1BalancesLoans)
                            {
                                <option value="@pay.Id">@pay.Name</option>
                            }
                        }
                    </select>
                </div>
                <br />
                <div>
                    <label>@($"{Constants.Person1} Amount:")</label>
                    <br />
                    <input type="text" placeholder="Amount" @bind-value="@Person1Amount" @oninput="@(async (ui) => { Person1Amount = (string) ui.Value;})" />
                </div>
                <br />
                <br />
                <div>
                    <label>@($"{Constants.Person2} Paying With:")</label>
                    <br />
                    <select class="custom-select" @bind="PaidWithPerson2" title="Paid For is required ">
                        <option value="@string.Empty" selected disabled="disabled">@($"(Choose {Constants.Person2}'s Account)")</option>
                        @if (ExpenseType == "Equity")
                        {
                            @if (Person2BalancesEquities != null)
                            {
                                @foreach (var pay in Person2BalancesEquities)
                                {
                                    <option value="@pay.Id">@pay.Name</option>
                                }
                            }
                        }
                        else
                        {
                            @if (Person2Balances != null)
                            {
                                @foreach (var pay in Person2Balances)
                                {
                                    <option value="@pay.Id">@pay.Name</option>
                                }
                            }
                        }
                        <option value="NONE">Did not pay</option>
                    </select>
                </div>
                <br />
                <div>
                    <label><strong>@($"{Constants.Person2} Paying Off:")</strong></label>
                    <br />
                    <select class="custom-select" @bind="PaidOffPerson2" title="Paid Off is required ">
                        <option value="@string.Empty" selected disabled="disabled">(Choose What You Paid Off)</option>
                        @if (Person2BalancesLoans != null)
                        {
                            @foreach (var pay in Person2BalancesLoans)
                            {
                                <option value="@pay.Id">@pay.Name</option>
                            }
                        }
                    </select>
                </div>
                <br />
                <div>
                    <label>@($"{Constants.Person2} Amount:")</label>
                    <br />
                    <input type="text" placeholder="Amount" @bind-value="@Person2Amount" @oninput="@(async (ui) => { Person2Amount = (string) ui.Value;})" />
                </div>
            }
            else
            {
                @if (ExpenseType == "Transfer")
                {
                    <br />
                    <div>
                        <label>@($"{Constants.Person1} Transferring From:")</label>
                        <br />
                        <select class="custom-select" @bind="PaidWithPerson1" title="Transfer account is required ">
                            <option value="@string.Empty" selected disabled="disabled">(Choose What You Are Transferring From)</option>
                            @if (Person1BalancesNotLoans != null)
                            {
                                @foreach (var pay in Person1BalancesNotLoans)
                                {
                                    <option value="@pay.Id">@pay.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <br />
                    <div>
                        <label>@($"{Constants.Person1} Transferring To:")</label>
                        <br />
                        <select class="custom-select" @bind="PaidOffPerson1" title="Transfer account is required ">
                            <option value="@string.Empty" selected disabled="disabled">(Choose What You Are Transferring To)</option>
                            @if (Person1BalancesNotLoans != null)
                            {
                                @foreach (var pay in Person1BalancesNotLoans)
                                {
                                    <option value="@pay.Id">@pay.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <br />
                    <div>
                        <label>@($"{Constants.Person1} Amount:")</label>
                        <br />
                        <input type="text" placeholder="Amount" @bind-value="@Person1Amount" @oninput="@(async (ui) => { Person1Amount = (string) ui.Value;})" />
                    </div>
                    <br />
                    <br />
                    <div>
                        <label>@($"{Constants.Person2} Transferring From:")</label>
                        <br />
                        <select class="custom-select" @bind="PaidWithPerson2" title="Transfer account required ">
                            <option value="@string.Empty" selected disabled="disabled">(Choose What You Are Transferring From)</option>
                            @if (Person2BalancesNotLoans != null)
                            {
                                @foreach (var pay in Person2BalancesNotLoans)
                                {
                                    <option value="@pay.Id">@pay.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <br />
                    <div>
                        <label>@($"{Constants.Person2} Transferring To:")</label>
                        <br />
                        <select class="custom-select" @bind="PaidOffPerson2" title="Transfer account required ">
                            <option value="@string.Empty" selected disabled="disabled">(Choose What You Are Transferring To)</option>
                            @if (Person2BalancesNotLoans != null)
                            {
                                @foreach (var pay in Person2BalancesNotLoans)
                                {
                                    <option value="@pay.Id">@pay.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <br />
                    <div>
                        <label>@($"{Constants.Person2} Amount:")</label>
                        <br />
                        <input type="text" placeholder="Amount" @bind-value="@Person2Amount" @oninput="@(async (ui) => { Person2Amount = (string) ui.Value;})" />
                    </div>
                }
                else
                {
                    <br />
                    <div>
                        @if (ExpenseType == "Income" || ExpenseType == "Equity")
                        {
                            <label>@($"{Constants.Person1} was Paid Into:")</label>
                        }
                        else
                        {
                            <label>@($"{Constants.Person1} Paid With:")</label>

                        }
                        <br />
                        <select class="custom-select" @bind="PaidWithPerson1" title="Paid For is required ">
                            <option value="@string.Empty" selected disabled="disabled">@($"(Choose {Constants.Person1}'s Account)")</option>
                            @if (ExpenseType == "Equity")
                            {
                                @if (Person1BalancesEquities != null)
                                {
                                    @foreach (var pay in Person1BalancesEquities)
                                    {
                                        <option value="@pay.Id">@pay.Name</option>
                                    }
                                }
                            }
                            else
                            {
                                @if (Person1Balances != null)
                                {
                                    @foreach (var pay in Person1Balances)
                                    {
                                        <option value="@pay.Id">@pay.Name</option>
                                    }
                                }
                            }
                            <option value="NONE">Did not pay</option>
                        </select>
                    </div>
                    <br />
                    <div>
                        <label>@($"{Constants.Person1} Amount:")</label>
                        <br />
                        <input type="text" placeholder="Amount" @bind-value="@Person1Amount" @oninput="@(async (ui) => { Person1Amount = (string) ui.Value;})" />
                    </div>
                    <br />
                    <div>
                        @if (ExpenseType == "Income" || ExpenseType == "Equity")
                        {
                            <label>@($"{Constants.Person2} was Paid Into:")</label>
                        }
                        else
                        {
                            <label>@($"{Constants.Person2} Paid With:")</label>

                        }
                        <br />
                        <select class="custom-select" @bind="PaidWithPerson2" title="Paid For is required ">
                            <option value="@string.Empty" selected disabled="disabled">@($"(Choose {Constants.Person2}'s Account)")</option>
                            @if (ExpenseType == "Equity")
                            {
                                @if (Person2BalancesEquities != null)
                                {
                                    @foreach (var pay in Person2BalancesEquities)
                                    {
                                        <option value="@pay.Id">@pay.Name</option>
                                    }
                                }
                            }
                            else
                            {
                                @if (Person2Balances != null)
                                {
                                    @foreach (var pay in Person2Balances)
                                    {
                                        <option value="@pay.Id">@pay.Name</option>
                                    }
                                }
                            }
                            <option value="NONE">Did not pay</option>
                        </select>
                    </div>
                    <br />
                    <div>
                        <label>@($"{Constants.Person2} Amount:")</label>
                        <br />
                        <input type="text" placeholder="Amount" @bind-value="@Person2Amount" @oninput="@(async (ui) => { Person2Amount = (string) ui.Value;})" />
                    </div>
                }
            }
            <br style="clear:both" />
            <br style="clear:both" />
            <br style="clear:both" />
            <div style="margin-bottom:2vh;">
                <button class="btn btn-secondary" style="float:left" disabled=@Disabled @onclick="Submit">Submit</button>
            </div>
            <br />
            @if (!string.IsNullOrEmpty(ErrorMsg))
            {
                <p style="color:@ErrorColor">@ErrorMsg</p>
            }
        </div>
    </div>
}
else
{
    <div class="tabcontent">
        <div style="float:left; margin-right:10vw;">
            <label>Transaction:</label>
            <br />
            <input type="text" placeholder="Name of Transaction" @bind-value="@TransactionName" @oninput="@(async (ui) => { TransactionName = (string) ui.Value;})" />
        </div>
        <div style="float:left; margin-right:12vw;">
            <label>Expense Type:</label>
            <br />
            <select class="custom-select" style="width:6vw;margin:1vh 0 1vh 0;" @bind="ExpenseType" title="Pick an Expense Type ">
                <option value="@string.Empty" selected disabled="disabled">Expense</option>
                @foreach (var et in ExpenseTypes)
                {
                    @if (et.Contains("- Others -") || et.Contains("-- Dynamic Costs --"))
                    {
                        <option value="et" disabled>@et</option>
                    }
                    else
                    {
                        @if (et == "Paying Off Debt")
                        {
                            <option value="Debt">@et</option>
                        }
                        else
                        {
                            @if (et == "Transfer Between Accounts")
                            {
                                <option value="Transfer">@et</option>
                            }
                            else
                            {
                                <option value="@et">@et</option>
                            }
                        }
                    }
                }
            </select>
        </div>
        <br style="clear:both;" />
        <br />
        <div style="float:left; margin-right:9.1vw;">
            @if (ExpenseType == "Income" || ExpenseType == "Equity")
            {
                <label>@($"{Constants.Person1} was Paid Into:")</label>
            }
            else
            {
                @if (ExpenseType == "Transfer")
                {
                    <label>@($"{Constants.Person1} Transferring From:")</label>
                }
                else
                {
                    <label>@($"{Constants.Person1} Paid With:")</label>
                }
            }
            <br />
            <select class="custom-select" @bind="PaidWithPerson1" title="Paid For is required ">
                <option value="@string.Empty" selected disabled="disabled">@($"(Choose {Constants.Person1}'s Account)")</option>
                @if (ExpenseType == "Equity")
                {
                    @if (Person1BalancesEquities != null)
                    {
                        @foreach (var pay in Person1BalancesEquities)
                        {
                            <option value="@pay.Id">@pay.Name</option>
                        }
                    }
                }
                else
                {
                    @if (Person1Balances != null)
                    {
                        @foreach (var pay in Person1Balances)
                        {
                            <option value="@pay.Id">@pay.Name</option>
                        }
                    }
                }
                <option value="NONE">Did not pay</option>
            </select>
        </div>
        <div style="float:left; margin-right:5.6vw;">
            @if (ExpenseType == "Income" || ExpenseType == "Equity")
            {
                <label>@($"{Constants.Person2} was Paid Into:")</label>
            }
            else
            {
                @if (ExpenseType == "Transfer")
                {
                    <label>@($"{Constants.Person2} Transferring From:")</label>
                }
                else
                {
                    <label>@($"{Constants.Person2} Paid With:")</label>
                }
            }
            <br />
            <select class="custom-select" @bind="PaidWithPerson2" title="Paid For is required ">
                <option value="@string.Empty" selected disabled="disabled">@($"(Choose {Constants.Person2}'s Account)")</option>
                @if (ExpenseType == "Equity")
                {
                    @if (Person1BalancesEquities != null)
                    {
                        @foreach (var pay in Person1BalancesEquities)
                        {
                            <option value="@pay.Id">@pay.Name</option>
                        }
                    }
                }
                else
                {
                    @if (Person1Balances != null)
                    {
                        @foreach (var pay in Person1Balances)
                        {
                            <option value="@pay.Id">@pay.Name</option>
                        }
                    }
                }
                <option value="NONE">Did not pay</option>
            </select>
        </div>
        <br style="clear:both;" />
        <br />
        @if (ExpenseType == "Debt")
        {
            <div style="float:left;margin-right:10vw;">
                <div style="float:left;">
                    <label><strong>@($"{Constants.Person1} Paying Off:")</strong></label>
                    <br />
                    <select class="custom-select" @bind="PaidOffPerson1" title="Paid Off is required ">
                        <option value="@string.Empty" selected disabled="disabled">@($"(Choose {Constants.Person1}'s Account 2)")</option>
                        @if (Person1BalancesLoans != null)
                        {
                            @foreach (var pay in Person1BalancesLoans)
                            {
                                <option value="@pay.Id">@pay.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div style="float:left;">
                <strong>@($"{Constants.Person2} Paying Off:")</strong>
                <br />
                <select class="custom-select" @bind="PaidOffPerson2" title="Paid Off is required ">
                    <option value="@string.Empty" selected disabled="disabled">@($"(Choose {Constants.Person2}'s Account 2)")</option>
                    @if (Person2BalancesLoans != null)
                    {
                        @foreach (var pay in Person2BalancesLoans)
                        {
                            <option value="@pay.Id">@pay.Name</option>
                        }
                    }
                </select>
            </div>
            <br style="clear:both;" />
            <br style="clear:both;" />
        }
        @if (ExpenseType == "Transfer")
        {
            <div style="float:left;margin-right:10vw;">
                <div style="float:left;">
                    <label><strong>@($"{Constants.Person1} Transferring To:")</strong></label>
                    <br />
                    <select class="custom-select" @bind="PaidOffPerson1" title="Transferring account is required ">
                        <option value="@string.Empty" selected disabled="disabled">@($"(Choose {Constants.Person1}'s Account 2)")</option>
                        @if (Person1BalancesNotLoans != null)
                        {
                            @foreach (var pay in Person1BalancesNotLoans)
                            {
                                <option value="@pay.Id">@pay.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div style="float:left;">
                <label><strong>@($"{Constants.Person2} Transferring To:")</strong></label>
                <br />
                <select class="custom-select" @bind="PaidOffPerson2" title="Transferring account is required ">
                    <option value="@string.Empty" selected disabled="disabled">@($"(Choose {Constants.Person2}'s Account 2)")</option>
                    @if (Person2BalancesNotLoans != null)
                    {
                        @foreach (var pay in Person2BalancesNotLoans)
                        {
                            <option value="@pay.Id">@pay.Name</option>
                        }
                    }
                </select>
            </div>
            <br style="clear:both;" />
            <br style="clear:both;" />
        }
        <div style="float:left;margin-right:10vw;">
            <label>@($"{Constants.Person1} Amount:")</label>
            <br />
            <input type="text" placeholder="Amount" @bind-value="@Person1Amount" @oninput="@(async (ui) => { Person1Amount = (string) ui.Value;})" />
        </div>
        <div>
            <label>@($"{Constants.Person2} Amount:")</label>
            <br />
            <input type="text" placeholder="Amount" @bind-value="@Person2Amount" @oninput="@(async (ui) => { Person2Amount = (string) ui.Value;})" />
        </div>
        <br style="clear:both;" />

        @if (Constants.Presets != null && Constants.Presets.Count > 0)
        {
            <div style="position:absolute;border: 2px solid green; width:20vw;height:80vh;right:1vw;top:15vh;">
                <h1 style="text-align:center">Presets:</h1>
                <div style="display:table;justify-content:flex-start;align-content:flex-start;flex-wrap:wrap">
                    <div style="display:flex;justify-content:flex-start;align-content:flex-start;flex-wrap:wrap">
                        @foreach (var pre in Constants.Presets.Where(p => p.ExpenseType == "Grocery" || p.ExpenseType == "Eating Out"))
                        {
                            <button class="btn btn-primary" style="margin-left:1vw;margin-bottom:1vh;background-color:@pre.HexColor;color:@pre.TextColor;" @onclick='@(() => Preset(@pre.Name))'>@pre.Name</button>
                        }
                    </div>
                    <br />
                    <div style="display:flex;justify-content:flex-start;align-content:flex-start;flex-wrap:wrap">
                        @foreach (var pre in Constants.Presets.Where(p => p.ExpenseType == "Debt"))
                        {
                            <button class="btn btn-primary" style="margin-left:1vw;margin-bottom:1vh;background-color:@pre.HexColor;color:@pre.TextColor;" @onclick='@(() => Preset(@pre.Name))'>@pre.Name</button>
                        }
                    </div>
                    <br />
                    <div style="display:flex;justify-content:flex-start;align-content:flex-start;flex-wrap:wrap">
                        @foreach (var pre in Constants.Presets.Where(p => p.ExpenseType == "Gas"))
                        {
                            <button class="btn btn-primary" style="margin-left:1vw;margin-bottom:1vh;background-color:@pre.HexColor;color:@pre.TextColor;" @onclick='@(() => Preset(@pre.Name))'>@pre.Name</button>
                        }
                    </div>
                    <br />
                    <div style="display:flex;justify-content:flex-start;align-content:flex-start;flex-wrap:wrap">
                        @foreach (var pre in Constants.Presets.Where(p => p.ExpenseType == "Static Cost"))
                        {
                            <button class="btn btn-primary" style="margin-left:1vw;margin-bottom:1vh;background-color:@pre.HexColor;color:@pre.TextColor;" @onclick='@(() => Preset(@pre.Name))'>@pre.Name</button>
                        }
                    </div>
                    <div style="display:flex;justify-content:flex-start;align-content:flex-start;flex-wrap:wrap">
                        @foreach (var pre in Constants.Presets.Where(p => p.ExpenseType != "Eating Out" && p.ExpenseType != "Grocery" && p.ExpenseType != "Debt" && p.ExpenseType != "Gas" && p.ExpenseType != "Static Cost"))
                        {
                            <button class="btn btn-primary" style="margin-left:1vw;margin-bottom:1vh;background-color:@pre.HexColor;color:@pre.TextColor;" @onclick='@(() => Preset(@pre.Name))'>@pre.Name</button>
                        }
                    </div>
                </div>

                @if (Presets != null)
                {
                    <div style="position:absolute;bottom:1vw;left:1vh;">
                        <span>Delete Preset:</span>
                        <select @bind="@SelectedPreset">
                            <option selected disabled value='@("NONE")'>(Select Preset)</option>
                            @foreach (var pre in Presets)
                            {
                                <option value="@pre.Id">@pre.Name</option>
                            }
                        </select>
                        <button class="btn btn-danger" @onclick="DeletePreset">Delete</button>
                    </div>
                }
            </div>
        }
        <br style="clear:both" />
        @if (!string.IsNullOrEmpty(TransactionName))
        {
            <div style="float:right; margin-right:1vw;display:inline-block;">
                <div style="display:flex;justify-content:end">
                    <label style="float:left;margin-right:1vw">Text Color:</label>
                    <input @bind="TextColor" type="color" />
                </div>
                <br />
                <div style="display:flex;justify-content:end">
                    <label style="float:left;margin-right:1vw">Color:</label>
                    <input @bind=Hex type="color" />
                </div>
            </div>
        }
        <br style="clear:both" />
        <br style="clear:both" />
        <div style="margin-bottom:2vh;">
            <button class="btn btn-secondary" style="float:left;" disabled=@Disabled @onclick="Submit">Submit</button>
            @if (!string.IsNullOrEmpty(TransactionName))
            {
                <button class="btn btn-primary" style="float:right;background-color:@Hex;color:@TextColor;" @onclick="AddPreset">
                    <span>Add Preset For:</span>
                    <br />
                    <span>@TransactionName</span>
                </button>
            }
        </div>
        <br />
        @if (!string.IsNullOrEmpty(ErrorMsg))
        {
            <p style="color:@ErrorColor">@ErrorMsg</p>
        }
    </div>
}
<br />
<br />

@code {
    [Parameter]
    public string TransactionName { get; set; }
    [Parameter]
    public string ExpenseType { get; set; }
    [Parameter]
    public string PaidOffPerson1 { get; set; }
    [Parameter]
    public string PaidOffPerson2 { get; set; }
    [Parameter]
    public string PaidWithPerson1 { get; set; }
    [Parameter]
    public string PaidWithPerson2 { get; set; }
    [Parameter]
    public string Person1Amount { get; set; }
    [Parameter]
    public string Person2Amount { get; set; }
    [Parameter]
    public bool Mobile { get; set; }
    [Parameter]
    public Action<string> Preset { get; set; }
    public List<Preset> Presets { get; set; }

    public string SelectedPreset { get; set; }

    private string Hex { get; set; } = "#28A745";
    private string TextColor { get; set; } = "#FFFFFF";

    private List<Balance> Balances => Constants.Balances;
    private List<Balance> Person1Balances => Constants.Balances.Where(b => b.Person == Constants.Person1 || b.Person.ToUpper() == "JOINT").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person1BalancesLoans => Constants.Balances.Where(b => (b.Person == Constants.Person1 || b.Person.ToUpper() == "JOINT") && b.BalanceType == "Loan").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person1BalancesNotLoans => Constants.Balances.Where(b => (b.Person == Constants.Person1 || b.Person.ToUpper() == "JOINT") && b.BalanceType != "Loan").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person1BalancesIncomes => Constants.Balances.Where(b => (b.Person == Constants.Person1 || b.Person.ToUpper() == "JOINT") && b.BalanceType == "Income").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person1BalancesEquities => Constants.Balances.Where(b => (b.Person == Constants.Person1 || b.Person.ToUpper() == "JOINT") && b.BalanceType == "Equity").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person2Balances => Constants.Balances.Where(b => b.Person == Constants.Person2 || b.Person.ToUpper() == "JOINT").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person2BalancesLoans => Constants.Balances.Where(b => (b.Person == Constants.Person2 || b.Person.ToUpper() == "JOINT") && b.BalanceType == "Loan").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person2BalancesNotLoans => Constants.Balances.Where(b => (b.Person == Constants.Person2 || b.Person.ToUpper() == "JOINT") && b.BalanceType != "Loan").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person2BalancesIncomes => Constants.Balances.Where(b => (b.Person == Constants.Person2 || b.Person.ToUpper() == "JOINT") && b.BalanceType == "Income").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person2BalancesEquities => Constants.Balances.Where(b => (b.Person == Constants.Person2 || b.Person.ToUpper() == "JOINT") && b.BalanceType == "Equity").OrderBy(p1b => p1b.Name).ToList();

    private string ErrorMsg { get; set; } = string.Empty;
    private string ErrorColor { get; set; } = "red";

    private List<string> ExpenseTypes { get; set; } = new List<string>();

    private bool Disabled;

    protected override Task OnInitializedAsync()
    {
        Presets = new List<Preset>(Constants.Presets);
        Presets.Sort();

        List<string> dcis = new List<string>();
        List<string> others = new List<string>();

        foreach (var dci in Constants.DynamicCostItems)
            dcis.Add(dci.Name);

        others.Add("Static Cost");
        others.Add("Income");
        others.Add("Equity");
        others.Add("Transfer Between Accounts");
        others.Add("Paying Off Debt");


        dcis.Sort();

        others.Sort();
        others.Add("Other");
        string DynaText = "-- Dynamic Costs --";

        int longestDCI = dcis.OrderByDescending(s => s.Length).First().Length;
        int longestOther = others.OrderByDescending(s => s.Length).First().Length;
        int longestOfEach = Math.Max(longestDCI, longestOther);

        if (longestOfEach > DynaText.Length)
            ExpenseTypes.Add(Constants.CENTER(DynaText, longestOfEach, '-'));
        else if (longestOfEach > 0)
            ExpenseTypes.Add(DynaText);

        foreach (var str in dcis)
            ExpenseTypes.Add(str);

        ExpenseTypes.Add(Constants.CENTER(" Others ", DynaText.Length, '-'));

        foreach (var str in others)
            ExpenseTypes.Add(str);


        return base.OnInitializedAsync();
    }

    public async void DeletePreset()
    {
        Preset exists = Presets.FirstOrDefault(p => p.Id == SelectedPreset);

        if (exists != null)
            Presets = await PresetRepo.RemoveAsync(exists);

        SelectedPreset = "NONE";
        StateHasChanged();
    }

    public async void Submit()
    {
        Disabled = true;
        ErrorMsg = string.Empty;
        ErrorColor = "red";
        bool tpNAmount = double.TryParse(Person1Amount, out double nam);
        bool tpLAmount = double.TryParse(Person2Amount, out double lam);

        ErrorMsg += string.IsNullOrEmpty(TransactionName) ? "Transaction Name must be set. " : "";
        ErrorMsg += string.IsNullOrEmpty(ExpenseType) ? "Please select an expense type. " : "";
        ErrorMsg += !string.IsNullOrEmpty(PaidWithPerson1) && PaidWithPerson1 != "NONE" && !tpNAmount ? $"{Constants.Person1} Amount must be a number. " : "";
        ErrorMsg += !string.IsNullOrEmpty(PaidWithPerson2) && PaidWithPerson2 != "NONE" && !tpLAmount ? $"{Constants.Person2} Amount must be a number. " : "";
        //ErrorMsg += !string.IsNullOrEmpty(ExpenseType) && ExpenseType == "Debt" ? "APR must be a number. " : "";
        //ErrorMsg += string.IsNullOrEmpty(Color) ? "Color must be set." : "";

        if (string.IsNullOrEmpty(ErrorMsg))
        {
            BalanceRepoCaller brc = new BalanceRepoCaller();
            var nt = new Transaction(TransactionName, ExpenseType, nam, lam, brc.GetName(PaidWithPerson1), BalanceRepo.GetName(PaidWithPerson2), BalanceRepo.GetName(PaidOffPerson1), BalanceRepo.GetName(PaidOffPerson2));
            nt.DateOfTransaction = DateTime.Now;
            var tr = await TransactionRepo.AddOrUpdateAsync(nt);

            ErrorColor = "green";
            ErrorMsg = TransactionName + " transaction was added!";

            TransactionName = string.Empty;
            Person1Amount = string.Empty;
            Person2Amount = string.Empty;
            ExpenseType = string.Empty;
            PaidOffPerson2 = string.Empty;
            PaidOffPerson1 = string.Empty;
            PaidWithPerson2 = string.Empty;
            PaidWithPerson1 = string.Empty;
        }

        Disabled = false;
        StateHasChanged();
    }
    public async void AddPreset()
    {
        ErrorMsg = string.Empty;
        ErrorColor = "red";
        bool tpNAmount = double.TryParse(Person1Amount, out double nam);
        bool tpLAmount = double.TryParse(Person2Amount, out double lam);

        ErrorMsg += string.IsNullOrEmpty(TransactionName) ? "Transaction Name must be set. " : "";
        ErrorMsg += string.IsNullOrEmpty(ExpenseType) ? "Please select an expense type. " : "";
        ErrorMsg += !string.IsNullOrEmpty(PaidWithPerson1) && PaidWithPerson1 != "NONE" && !tpNAmount ? $"{Constants.Person1} Amount must be a number. " : "";
        ErrorMsg += !string.IsNullOrEmpty(PaidWithPerson2) && PaidWithPerson2 != "NONE" && !tpLAmount ? $"{Constants.Person2} Amount must be a number. " : "";

        if (string.IsNullOrEmpty(ErrorMsg))
        {
            Presets = await PresetRepo.AddOrUpdateAsync(new Preset(TransactionName, ExpenseType, nam, lam, BalanceRepo.GetName(PaidWithPerson1), BalanceRepo.GetName(PaidWithPerson2), BalanceRepo.GetName(PaidOffPerson1), BalanceRepo.GetName(PaidOffPerson2), Hex, TextColor));

            Presets.Sort();

            ErrorColor = "green";
            ErrorMsg = TransactionName + " preset was added!";

            TransactionName = string.Empty;
            Person1Amount = string.Empty;
            Person2Amount = string.Empty;
            ExpenseType = string.Empty;
            PaidOffPerson2 = string.Empty;
            PaidOffPerson1 = string.Empty;
            PaidWithPerson2 = string.Empty;
            PaidWithPerson1 = string.Empty;
        }

        Disabled = false;
        StateHasChanged();
    }
}
