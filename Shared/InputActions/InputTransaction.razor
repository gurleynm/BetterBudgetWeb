@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Repo
@using BetterBudgetWeb.Shared.PresetSections
@inject IJSRuntime JSRuntime

<div class="tabcontent" style="border-color:cyan">
    <div class="flex-c">
        <div class="flex-r" style="justify-content:space-between;align-items:start;width:100%">
            <div class="flex-c-start transaction-container" style="width:100%">
                <div class="tab flex-r" style="width:100%;flex-wrap:wrap">
                    <button class="tablinks tab-btn @ExpenseTabClass" @onclick=@(() => TabToggle("Expense"))>Expense</button>
                    <button class="tablinks tab-btn @IncomeTabClass" @onclick=@(() => TabToggle("Income"))>Income</button>
                    <button class="tablinks tab-btn @TransferTabClass" @onclick=@(() => TabToggle("Transfer"))>Transfer/Pay Debt</button>
                </div>
                @if (Presets != null && Presets.Count > 0 && Constants.TIER_LEVEL > Tier.BASIC_TIER)
                {
                    <AdvancedWrapper Left="true" Top="true">
                        <div class="flex-r-100" style="flex-wrap:wrap;margin-top:1em">
                            @foreach (var pre in LocalET.OrderBy(p => p.Name))
                            {
                                <div>
                                    <button class="btn btn-primary" style="margin-left:1vw;margin-bottom:1vh;background-color:@pre.HexColor;color:@pre.TextColor;" @onclick="@(() => Preset(@pre))">@pre.Name</button>
                                </div>
                            }
                        </div>
                    </AdvancedWrapper>
                }

                <div class="flex-r-100" style="flex-wrap:wrap">
                    @if (Constants.Mobile)
                    {
                        <div class="flex-c-start">
                            <div class="flex-c-start input-transaction-block">
                                <h2>@Constants.Pretty(double.TryParse(Person1Amount, out double p1a) && double.TryParse(Person2Amount, out double p2a) ? p1a + p2a : 0)</h2>

                                <PopTray Id="trans-name" ShowWorth=@(TabDictionary["Expense"] || TabDictionary["Income"] || ExpenseType == "Debt") ShowButton=false StartOpen=true>
                                    <input type="text" placeholder="Name (e.g. Groceries)" @bind-value="@TransactionName" />
                                </PopTray>

                                <PopTray Id="exp-drop" ShowWorth=@TabDictionary["Expense"] StartOpen=true ShowButton=false>
                                    <FancySelect @bind-Value="ExpenseType">
                                        <option value="@string.Empty" selected disabled="disabled">(Select Expense)</option>
                                        @foreach (var et in ExpenseTypes)
                                        {
                                            @if (et.Contains("- Others -") || et.Contains("-- Dynamic Costs --") || et.Contains("-- Envelopes --"))
                                            {
                                                <option value="et" disabled>@et</option>
                                            }
                                            else
                                            {
                                                <option value="@et">@et</option>
                                            }
                                        }
                                    </FancySelect>
                                </PopTray>

                                <PopTray Id="exp-drop-transfer" ShowWorth=@(TabDictionary["Transfer"]) ShowButton=false>
                                    <FancySelect @bind-Value="ExpenseType">
                                        <option>Transfer</option>
                                        <option value="Debt">Paying off Debt</option>
                                    </FancySelect>
                                </PopTray>
                                <input type="date" placeholder="Date" @bind-value="@TransactionDate" style="margin:1em 0" />
                            </div>
                        </div>
                    }
                    <div class="flex-c-start">
                        <div class="flex-c-start input-transaction-block">
                            <h2 style="margin:0;align-self:start">@Constants.Person1</h2>
                            @if (Person1Balances != null)
                            {
                                <FancySelect @bind-Value="PaidWithPerson1">
                                    <option value="">@(TabDictionary["Expense"] ? "(Select Payment Method)" : "(Select Account)")</option>
                                    @foreach (var pay in Person1Balances)
                                    {
                                        <option style="background-color:@pay.HexColor;color:@pay.TextColor" value="@pay.Id">@pay.Name</option>
                                    }
                                    <option value="NONE">Did not pay</option>
                                </FancySelect>
                                <PopTray Id="transfer-p1" ShowWorth=@TabDictionary["Transfer"] ShowButton=false>
                                    <h4 style="margin:0">@(ExpenseType == "Transfer" ? "Transferring to..." : "Paying off...")</h4>
                                    <FancySelect @bind-Value="PaidOffPerson1">
                                        <option value="">(Select Account)</option>
                                        @foreach (var pay in Person1Balances)
                                        {
                                            <option style="background-color:@pay.HexColor;color:@pay.TextColor" value="@pay.Id">@pay.Name</option>
                                        }
                                        <option value="NONE">Did not pay</option>
                                    </FancySelect>
                                </PopTray>
                            }
                            <div class="flex-r-100" style="margin:1em 0">
                                <input type="number" placeholder="Amount" @bind-value="@Person1Amount" @oninput="@(async (ui) => { Person1Amount = (string)ui.Value; })" />
                            </div>
                        </div>
                        <div class="flex-c-start input-transaction-block">
                            <h2 style="margin:0;align-self:start">@Constants.Person2</h2>
                            @if (Person2Balances != null)
                            {
                                <FancySelect @bind-Value="PaidWithPerson2">
                                    <option value="">@(TabDictionary["Expense"] ? "(Select Payment Method)" : "(Select Account)")</option>
                                    @foreach (var pay in Person2Balances)
                                    {
                                        <option style="background-color:@pay.HexColor;color:@pay.TextColor" value="@pay.Id">@pay.Name</option>
                                    }
                                    <option value="NONE">Did not pay</option>
                                </FancySelect>


                                <PopTray Id="transfer-p2" ShowWorth=@TabDictionary["Transfer"] ShowButton=false>
                                    <div class="fade-in flex-c-start">
                                        <h4 style="margin:0">@(ExpenseType == "Transfer" ? "Transferring to..." : "Paying off...")</h4>
                                        <FancySelect @bind-Value="PaidOffPerson2">
                                            <option value="">(Select Account)</option>
                                            @foreach (var pay in Person2Balances)
                                            {
                                                <option style="background-color:@pay.HexColor;color:@pay.TextColor" value="@pay.Id">@pay.Name</option>
                                            }
                                            <option value="NONE">Did not pay</option>
                                        </FancySelect>
                                    </div>
                                </PopTray>
                            }
                            <div class="flex-r-100" style="margin:1em 0">
                                <input type="number" placeholder="Amount" @bind-value="@Person2Amount" @oninput="@(async (ui) => { Person2Amount = (string)ui.Value; })" />
                            </div>
                        </div>
                    </div>
                    @if (!Constants.Mobile)
                    {
                        <div class="flex-c-start">
                            <div class="flex-c-start input-transaction-block">
                                <h2>@Constants.Pretty(double.TryParse(Person1Amount, out double p1a) && double.TryParse(Person2Amount, out double p2a) ? p1a + p2a : 0)</h2>

                                <PopTray Id="trans-name" ShowWorth=@(TabDictionary["Expense"] || TabDictionary["Income"] || ExpenseType == "Debt") ShowButton=false StartOpen=true>
                                    <input type="text" placeholder="Name (e.g. Groceries)" @bind-value="@TransactionName" @oninput="@(async (ui) => { TransactionName = (string)ui.Value; })" />
                                </PopTray>

                                <PopTray Id="exp-drop" ShowWorth=@TabDictionary["Expense"] StartOpen=true ShowButton=false>
                                    <FancySelect @bind-Value="ExpenseType">
                                        <option value="@string.Empty" selected disabled="disabled">(Select Expense)</option>
                                        @foreach (var et in ExpenseTypes)
                                        {
                                            @if (et.Contains("- Others -") || et.Contains("-- Dynamic Costs --") || et.Contains("-- Envelopes --"))
                                            {
                                                <option value="et" disabled>@et</option>
                                            }
                                            else
                                            {
                                                <option value="@et">@et</option>
                                            }
                                        }
                                    </FancySelect>
                                </PopTray>

                                <PopTray Id="exp-drop-transfer" ShowWorth=@(TabDictionary["Transfer"]) ShowButton=false>
                                    <FancySelect @bind-Value="ExpenseType">
                                        <option>Transfer</option>
                                        <option value="Debt">Paying off Debt</option>
                                    </FancySelect>
                                </PopTray>
                                <input type="date" placeholder="Date" @bind-value="@TransactionDate" style="margin:1em 0" />
                            </div>
                            <button class="btn btn-grad" disabled=@Disabled @onclick="Submit">Record</button>
                            @if (!string.IsNullOrEmpty(TransactionName))
                            {
                                <div class="flex-r-100" style="justify-content:space-between;align-items:center">
                                    <FancySelect @bind-Value="TextColor" Style="width:fit-content">
                                        <option value="#FFFFFF">White</option>
                                        <option value="#000000">Black</option>
                                    </FancySelect>
                                    <input @bind=Hex type="color" />
                                </div>
                                <button class="btn btn-primary" style="background-color:@Hex;" @onclick="AddPreset">
                                    <span style="color:@TextColor;">Add Preset For:</span>
                                    <br />
                                    <span style="color:@TextColor;">@TransactionName</span>
                                </button>
                            }
                        </div>
                    }
                    else
                    {
                        <button class="btn btn-grad" disabled=@Disabled @onclick="Submit">Record</button>
                        @if (!string.IsNullOrEmpty(TransactionName))
                        {
                            <div class="flex-r-100" style="justify-content:space-between;align-items:center">
                                <FancySelect @bind-Value="TextColor" Style="width:fit-content">
                                    <option value="#FFFFFF">White</option>
                                    <option value="#000000">Black</option>
                                </FancySelect>
                                <input @bind=Hex type="color" />
                            </div>
                            <button class="btn btn-primary" style="background-color:@Hex;" @onclick="AddPreset">
                                <span style="color:@TextColor;">Add Preset For:</span>
                                <br />
                                <span style="color:@TextColor;">@TransactionName</span>
                            </button>
                        }
                    }
                </div>
            </div>
        </div>
        <br />
        @if (!string.IsNullOrEmpty(ErrorMsg))
        {
            <p id="errormsg" style="color:@ErrorColor">@ErrorMsg</p>
        }
    </div>
</div>
<br />
<br />

@code {
    [Parameter]
    public string ParentId { get; set; } = "";

    bool ShowAddPreset => !string.IsNullOrEmpty(TransactionName) && Constants.TIER_LEVEL > Tier.BASIC_TIER;

    public string transactionName = "";
    public string TransactionName
    {
        get { return transactionName; }
        set
        {
            if (transactionName == value)
                return;

            transactionName = value;
            if (ShowAddPreset)
            {
                JSRuntime.InvokeAsync<object>("resizeTray", ParentId);
            }
        }
    }

    public DateTime TransactionDate { get; set; } = DateTime.Now;
    public string expenseType { get; set; } = "";
    public string ExpenseType
    {
        get { return expenseType; }
        set
        {
            expenseType = value;
            JSRuntime.InvokeAsync<object>("resizeTray", ParentId);
            StateHasChanged();
        }
    }
    public string PaidOffPerson1 { get; set; } = "";
    public string PaidOffPerson2 { get; set; } = "";
    public string PaidWithPerson1 { get; set; } = "";
    public string PaidWithPerson2 { get; set; } = "";
    public string Person1Amount { get; set; } = "0";
    public string Person2Amount { get; set; } = "0";
    public string Hex { get; set; } = "#28A745";
    public string TextColor { get; set; } = "#FFFFFF";

    string SelectedTab = "Expense";
    string ExpenseTabClass = "active";
    string IncomeTabClass = "";
    string TransferTabClass = "";

    private List<Preset> LocalET => Constants.Presets.Where(p => ExpenseTypesForPresets[SelectedTab].Contains(p.ExpenseType))?.ToList();

    private List<Preset> Presets => Constants.Presets;
    public List<Preset> PresetsForDel { get; set; }

    public bool Mobile => Constants.Mobile;

    public string SelectedPreset { get; set; }

    private List<Balance> Balances => Constants.Balances;
    private List<Balance> Person1Balances => Constants.Balances.Where(b => b.Person == Constants.Person1 || b.Person.ToUpper() == "JOINT").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person1BalancesLoans => Constants.Balances.Where(b => (b.Person == Constants.Person1 || b.Person.ToUpper() == "JOINT") && b.BalanceType == "Loan").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person1BalancesNotLoans => Constants.Balances.Where(b => (b.Person == Constants.Person1 || b.Person.ToUpper() == "JOINT") && b.BalanceType != "Loan").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person1BalancesIncomes => Constants.Balances.Where(b => (b.Person == Constants.Person1 || b.Person.ToUpper() == "JOINT") && b.BalanceType == "Income").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person1BalancesSecurities => Constants.Balances.Where(b => (b.Person == Constants.Person1 || b.Person.ToUpper() == "JOINT") && b.BalanceType == "Stocks").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person1BalancesEquities => Constants.Balances.Where(b => (b.Person == Constants.Person1 || b.Person.ToUpper() == "JOINT") && b.BalanceType == "Equity").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person2Balances => Constants.Balances.Where(b => b.Person == Constants.Person2 || b.Person.ToUpper() == "JOINT").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person2BalancesLoans => Constants.Balances.Where(b => (b.Person == Constants.Person2 || b.Person.ToUpper() == "JOINT") && b.BalanceType == "Loan").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person2BalancesNotLoans => Constants.Balances.Where(b => (b.Person == Constants.Person2 || b.Person.ToUpper() == "JOINT") && b.BalanceType != "Loan").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person2BalancesIncomes => Constants.Balances.Where(b => (b.Person == Constants.Person2 || b.Person.ToUpper() == "JOINT") && b.BalanceType == "Income").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person2BalancesSecurities => Constants.Balances.Where(b => (b.Person == Constants.Person2 || b.Person.ToUpper() == "JOINT") && b.BalanceType == "Stocks").OrderBy(p1b => p1b.Name).ToList();
    private List<Balance> Person2BalancesEquities => Constants.Balances.Where(b => (b.Person == Constants.Person2 || b.Person.ToUpper() == "JOINT") && b.BalanceType == "Equity").OrderBy(p1b => p1b.Name).ToList();

    private string ErrorMsg { get; set; } = string.Empty;
    private string ErrorColor { get; set; } = "red";

    private List<string> ExpenseTypes { get; set; } = new List<string>();
    private Dictionary<string, List<string>> ExpenseTypesForPresets { get; set; } = new Dictionary<string, List<string>>();

    private bool Disabled;
    Dictionary<string, bool> TabDictionary = new();

    protected override Task OnInitializedAsync()
    {
        TabDictionary = new() { { "Expense", true }, { "Income", false }, { "Transfer", false } };
        PresetsForDel = new List<Preset>(Presets);

        foreach (var smc in Constants.StaticMonthlyCosts)
        {
            if (Presets.Count(p => p.Name == smc.Name && p.ExpenseType == "1-Time Charge") == 0)
                if (!smc.Name.Contains("(EXAMPLE DATA)"))
                    Presets.Add(new Data.Preset(smc, "#058001", "#FFFFFF"));
        }

        Presets.Sort();
        PresetsForDel.Sort();

        List<string> dcis = new List<string>();
        List<string> others = new List<string>();

        foreach (var dci in Constants.DynamicCostItems)
            if (!dci.Name.Contains("(EXAMPLE DATA)"))
                dcis.Add(dci.Name);

        others.Add("1-Time Charge");
        others.Add("Equity");

        dcis.Sort();

        others.Sort();
        others.Add("Other");
        string DynaText = "-- Dynamic Costs --";

        int longestDCI = dcis.Count == 0 ? 0 : dcis.OrderByDescending(s => s.Length).FirstOrDefault().Length;
        int longestOther = others.OrderByDescending(s => s.Length).FirstOrDefault().Length;
        int longestOfEach = Math.Max(longestDCI, longestOther);

        if (dcis.Count > 0)
        {
            if (longestOfEach > DynaText.Length)
                ExpenseTypes.Add(Constants.CENTER(DynaText, longestOfEach, '-'));
            else if (longestOfEach > 0)
                ExpenseTypes.Add(DynaText);

            foreach (var str in dcis)
                ExpenseTypes.Add(str);
        }


        // Add Envelopes
        var Person1Envelopes = Constants.Envelopes.Where(e => e.Person1Amount > 0).ToList();
        var Person2Envelopes = Constants.Envelopes.Where(e => e.Person2Amount > 0).ToList();
        var TempEnv = new List<string>();

        foreach (var p1e in Person1Envelopes)
            TempEnv.Add(p1e.Name);

        foreach (var p2e in Person2Envelopes)
            if (!TempEnv.Contains(p2e.Name))
                TempEnv.Add(p2e.Name);

        TempEnv.Sort();

        if (TempEnv.Count > 0)
        {
            ExpenseTypes.Add(Constants.CENTER(" Envelopes ", longestOfEach, '-'));
            foreach (var d in TempEnv)
                ExpenseTypes.Add(d);
        }

        if (ExpenseTypes.Count > 0)
        {
            ExpenseTypes.Add(Constants.CENTER(" Others ", DynaText.Length, '-'));
        }

        foreach (var str in others)
            ExpenseTypes.Add(str);

        // TODO: Update handling for multi-tab + preset support
        ExpenseTypesForPresets["Expense"] = new(ExpenseTypes);
        ExpenseTypesForPresets["Income"] = new List<string>() { "Income" };
        ExpenseTypesForPresets["Transfer"] = new List<string>() { "Debt" };

        return base.OnInitializedAsync();
    }

    void TabToggle(string index)
    {
        foreach (string key in TabDictionary.Keys)
            TabDictionary[key] = index == key;

        ExpenseTabClass = TabDictionary["Expense"] ? "active" : "";
        IncomeTabClass = TabDictionary["Income"] ? "active" : "";
        TransferTabClass = TabDictionary["Transfer"] ? "active" : "";

        if (TabDictionary["Expense"])
            ExpenseType = "";
        else if (TabDictionary["Transfer"])
            ExpenseType = "Transfer";
        else
            ExpenseType = "Income";

        SelectedTab = index;
    }

    public async void Submit()
    {
        Disabled = true;
        ErrorMsg = string.Empty;
        ErrorColor = "red";
        bool tp1Amount = double.TryParse(Person1Amount, out double nam);
        bool tp2Amount = double.TryParse(Person2Amount, out double lam);

        tp1Amount = tp1Amount && nam != 0;
        tp2Amount = tp2Amount && lam != 0;

        if (TabDictionary["Income"])
            ExpenseType = "Income";
        else if (TabDictionary["Transfer"])
            ExpenseType = "Transfer";

        ErrorMsg += string.IsNullOrEmpty(TransactionName) && ExpenseType != "Transfer" ? "Transaction Name must be set. " : "";
        ErrorMsg += string.IsNullOrEmpty(ExpenseType) ? "Please select an expense type. " : "";

        bool Amount1NumChk = !string.IsNullOrEmpty(PaidWithPerson1) && PaidWithPerson1 != "NONE" && !tp1Amount;
        bool Amount2NumChk = !string.IsNullOrEmpty(PaidWithPerson2) && PaidWithPerson2 != "NONE" && !tp2Amount;
        bool BothEmpty = string.IsNullOrEmpty(PaidWithPerson1) && string.IsNullOrEmpty(PaidWithPerson2);

        bool AmountUnfillPaidWith1 = tp1Amount && string.IsNullOrEmpty(PaidWithPerson1);
        bool AmountUnfillPaidWith2 = tp2Amount && string.IsNullOrEmpty(PaidWithPerson2);

        ErrorMsg += Amount1NumChk ? $"{Constants.Person1} Amount must be a number. " : "";
        ErrorMsg += Amount2NumChk ? $"{Constants.Person2} Amount must be a number. " : "";
        ErrorMsg += BothEmpty ? $"At least one person must pay. " : "";

        ErrorMsg += AmountUnfillPaidWith1 ? $"{Constants.Person1} paid with value must be set if their amount is non-zero. " : "";
        ErrorMsg += AmountUnfillPaidWith2 ? $"{Constants.Person2} paid with value must be set if their amount is non-zero. " : "";

        //ErrorMsg += !string.IsNullOrEmpty(ExpenseType) && ExpenseType == "Debt" ? "APR must be a number. " : "";
        //ErrorMsg += string.IsNullOrEmpty(Color) ? "Color must be set." : "";

        if (string.IsNullOrEmpty(ErrorMsg))
        {
            string TransName;

            if (ExpenseType == "Transfer")
            {
                TransName = "Transfer to ";

                if (!string.IsNullOrEmpty(PaidOffPerson1))
                {
                    if (!string.IsNullOrEmpty(PaidOffPerson2))
                    {
                        TransName += BalanceRepo.GetName(PaidOffPerson1) + "," + BalanceRepo.GetName(PaidOffPerson2);
                    }
                    else
                        TransName += BalanceRepo.GetName(PaidOffPerson1);
                }
                else if (!string.IsNullOrEmpty(PaidOffPerson2))
                    TransName += BalanceRepo.GetName(PaidOffPerson2);
            }
            else
                TransName = TransactionName;

            var nt = new Transaction(TransName, ExpenseType, nam, lam, BalanceRepo.GetName(PaidWithPerson1), BalanceRepo.GetName(PaidWithPerson2), BalanceRepo.GetName(PaidOffPerson1), BalanceRepo.GetName(PaidOffPerson2));
            nt.DateOfTransaction = TransactionDate;
            var tr = await TransactionRepo.AddOrUpdateAsync(nt);

            ErrorColor = "green";
            ErrorMsg = TransName + " transaction was added!";

            TransactionName = string.Empty;
            Person1Amount = string.Empty;
            Person2Amount = string.Empty;
            ExpenseType = string.Empty;
            PaidOffPerson2 = string.Empty;
            PaidOffPerson1 = string.Empty;
            PaidWithPerson2 = string.Empty;
            PaidWithPerson1 = string.Empty;
        }

        Disabled = false;
        await JSRuntime.InvokeAsync<object>("resizeTray", ParentId);
        await JSRuntime.InvokeAsync<string>("ScrollToEnd", "errormsg");
        StateHasChanged();
    }
    public async void AddPreset()
    {
        ErrorMsg = string.Empty;
        ErrorColor = "red";
        bool tpNAmount = double.TryParse(Person1Amount, out double nam);
        bool tpLAmount = double.TryParse(Person2Amount, out double lam);

        ErrorMsg += string.IsNullOrEmpty(TransactionName) ? "Transaction Name must be set. " : "";
        ErrorMsg += string.IsNullOrEmpty(ExpenseType) ? "Please select an expense type. " : "";
        ErrorMsg += !string.IsNullOrEmpty(PaidWithPerson1) && PaidWithPerson1 != "NONE" && !tpNAmount ? $"{Constants.Person1} Amount must be a number. " : "";
        ErrorMsg += !string.IsNullOrEmpty(PaidWithPerson2) && PaidWithPerson2 != "NONE" && !tpLAmount ? $"{Constants.Person2} Amount must be a number. " : "";

        if (string.IsNullOrEmpty(ErrorMsg))
        {
            await PresetRepo.AddOrUpdateAsync(new Preset(TransactionName, ExpenseType, nam, lam, PaidWithPerson1, PaidWithPerson2, PaidOffPerson1, PaidOffPerson2, Hex, TextColor));
            PresetsForDel = new List<Preset>(Presets);

            Presets.Sort();
            PresetsForDel.Sort();

            foreach (var smc in Constants.StaticMonthlyCosts)
            {
                if (Presets.Count(p => p.Name == smc.Name && p.ExpenseType == "1-Time Charge") == 0)
                    if (!smc.Name.Contains("(EXAMPLE DATA)"))
                        Presets.Add(new Data.Preset(smc, "#058001", "#FFFFFF"));
            }

            ErrorColor = "green";
            ErrorMsg = TransactionName + " preset was added!";

            TransactionName = string.Empty;
            Person1Amount = string.Empty;
            Person2Amount = string.Empty;
            ExpenseType = string.Empty;
            PaidOffPerson2 = string.Empty;
            PaidOffPerson1 = string.Empty;
            PaidWithPerson2 = string.Empty;
            PaidWithPerson1 = string.Empty;
        }

        await JSRuntime.InvokeAsync<string>("ScrollToEnd", "errormsg");
        Disabled = false;
        StateHasChanged();
    }
    private async void Preset(Preset pre)
    {
        // 0 - Trans Name
        // 1 - ExpenseType
        // 2 - Paid With Person1
        // 3 - Paid With Person2
        // 4 - Person1Amount
        // 5 - Person2Amount
        // 6 - Paid Off Person1
        // 7 - Paid Off Person2
        // 8 - Text Color
        // 9 - Background Color

        string[] vals = Constants.HandlePresets(pre.Id);

        if (vals.All(v => string.IsNullOrEmpty(v)))
        {
            TransactionName = pre.Name;
            ExpenseType = "1-Time Charge";
            Person1Amount = pre.Person1Amount.ToString();
            Person2Amount = pre.Person2Amount.ToString();
        }
        else
        {
            TransactionName = vals[0];
            ExpenseType = vals[1];
            PaidWithPerson1 = vals[2];
            PaidWithPerson2 = vals[3];
            Person1Amount = vals[4];
            Person2Amount = vals[5];
            PaidOffPerson1 = vals[6];
            PaidOffPerson2 = vals[7];
            TextColor = vals[8];
            Hex = vals[9];
        }
        await JSRuntime.InvokeAsync<string>("ScrollTo", "tran-name");
        await JSRuntime.InvokeAsync<object>("resizeTray", ParentId);
        StateHasChanged();
    }
}
