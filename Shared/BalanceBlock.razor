@using System.Globalization
@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Repo
@inject NavigationManager NavManager

<style>
    .btn-danger {
        transition: 0.3s;
    }
</style>

<div class="bal-block" style="display:flex;justify-content:center;margin-right:1vw;margin-bottom:1vw;" @onmouseover=MouseOver @onmouseout=MouseOut>
    <div style="z-index:2;display:flex;justify-content:flex-end; flex-direction:column;flex-wrap:wrap; border-radius:5px;width:@(FontSize*5 + "vw;");
    background-color:@(string.IsNullOrEmpty(Color) ? "#32A852" : Color);color:@TextColor;padding:0">
        <h1 style="flex-grow:4;cursor:pointer;text-align:center;font-size:@(FontSize + "vw;")" @onclick=Clicked>
            @(string.IsNullOrEmpty(BalName) ? "Savings" : BalName)
            <br />
            Balance
        </h1>
        @if (double.TryParse(APR, out double apr) && apr > 0 && TheBalance.BalanceType != "Stocks")
        {
            <h4 style="text-align:center; font-size:@(FontSize/2 + "vw");margin:0px;color:@TextColor">@(string.Format("(APR: {0}%)", Math.Round(apr, 2)))</h4>
        }
        <hr style="margin-top:0vw;color:@TextColor" />
        <h2 style="text-align:center;font-size:@(FontSize/1.5 + "vw");margin-bottom:1vh;color:@TextColor">
            @(
                double.TryParse(Amount, out double AM) ? AM.ToString("C", CultureInfo.CurrentCulture) : ".00"
                )
        </h2>
        <button class="btn btn-danger" style="vertical-align:80%;float:right;opacity:@(ShowDelete ? OpacityValue : 0);" disabled="@(!ShowDelete)" @onclick=Delete>Remove</button>
    </div>
</div>

@code {
    [Parameter]
    public Balance TheBalance { get; set; }
    [Parameter]
    public bool IncludeGoals { get; set; }

    [Parameter]
    public double FontSize { get; set; } = 2;
    [Parameter]
    public EventCallback<string> OnClick { get; set; }
    [Parameter]
    public EventCallback<bool> OnDelete { get; set; }

    public bool Mobile => Constants.Mobile;

    private double OpacityValue = 0;

    void MouseOut() => ChangeOpactiy(0);

    void MouseOver() => ChangeOpactiy(1);

    public string BalName => TheBalance.Name;
    public string Color => TheBalance.HexColor;
    public string TextColor => TheBalance.TextColor;
    public string APR => TheBalance.APR.ToString();
    public string Amount => GetAmount();

    public bool ShowDelete => OnDelete.HasDelegate;
    private void ChangeOpactiy(double opc)
    {
        OpacityValue = OnDelete.HasDelegate ? opc : 0;
        StateHasChanged();
    }

    private string GetAmount()
    {
        double amount = TheBalance.Value;

        if (-1 <= amount && amount < 0)
            amount = 0;

        if (IncludeGoals)
        {
            amount = TheBalance.GetValueWithGoals();
        }

        if (TheBalance.BalanceType == "Stocks")
        {
            try
            {
                var Securities = Constants.Securities.Where(sec => sec.BalanceFrom.ToUpper() == TheBalance.Id.ToUpper())?.ToList();
                amount += Securities == null ? 0 : Securities.Sum(s => s.Value);
            }
            catch (Exception e) { }
        }

        string returnStr = amount.ToString();

        if (returnStr == "-0")
            returnStr = "0";

        return returnStr;
    }

    private async void Clicked()
    {
        if (TheBalance.BalanceType == "Stocks")
        {
            Constants.AccountIndexStr = TheBalance.Name;
            NavManager.NavigateTo("/portfolio");
        }
        else
            await OnClick.InvokeAsync(TheBalance.Name);
    }
    private Task Delete()
    {
        return OnDelete.InvokeAsync(true);
    }
}
