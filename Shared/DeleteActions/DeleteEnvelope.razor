@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Repo
<div class="tabcontent">
    <div style="float:left;margin-right:10vw;">
        <label>Envelope Name:</label>
        <br />
        <FancySelect @bind-Value="Name">
            <option value="@string.Empty" selected disabled="disabled">(Select Goal)</option>
            @foreach (var env in Envelopes.OrderBy(e => e.Name))
            {
                <option value="@env.Name">@env.Name</option>
            }
        </FancySelect>
    </div>

    <br style="clear:both" />
    <br style="clear:both" />
    <button class="btn btn-primary" disabled=@Disabled @onclick="Submit">Submit</button>
    <br />

    @if (!string.IsNullOrEmpty(ErrorMsg))
    {
        <p style="color:@ErrorColor">@ErrorMsg</p>
    }
</div>
<br />

@code {
    private List<Data.Envelope> Envelopes => Constants.Envelopes;

    private string name;
    string Name { get; set; }

    private string ErrorMsg { get; set; } = string.Empty;
    private string ErrorColor { get; set; } = "red";

    private bool Disabled;

    protected override async Task OnInitializedAsync()
    {

    }

    public async Task Submit()
    {
        Disabled = true;
        ErrorMsg = string.Empty;
        ErrorColor = "red";

        if (string.IsNullOrEmpty(Name))
            ErrorMsg += "Please select a goal envelopes.\n";

        if (string.IsNullOrEmpty(ErrorMsg))
        {
            var ChosenOne = Envelopes.FirstOrDefault(e => e.Name == Name);

            await EnvelopeRepo.RemoveAsync(ChosenOne);
            Constants.Envelopes = new List<Data.Envelope>(Envelopes);

            ErrorColor = "green";
            ErrorMsg = $"Goal Envelope called '{Name}' was deleted!";

            Name = string.Empty;
        }

        Disabled = false;
        StateHasChanged();
    }
}