@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Repo
<div class="tabcontent">
    <div>
        <label>Preset Name:</label>
        <br />
        <select @bind="Id">
            <option value="@string.Empty" selected disabled="disabled">(Select Preset)</option>
            @foreach (var pres in Presets.OrderBy(e => e.Name))
            {
                <option value="@pres.Id">@pres.Name</option>
            }
        </select>
    </div>
    @if (ChosenOne != null)
    {
        <div >
            <table class="toggle-table mini-table ">
                <tr>
                    <th>Name</th>
                    <th>@ChosenOne.Name</th>
                </tr>
                @if (ChosenOne.Person1Amount != 0)
                {
                    <tr>
                        <td>@(Constants.Person1 + " Payment Method")</td>
                        <td>@BalanceRepo.GetNameFromId(ChosenOne.PaidWithPerson1)</td>
                    </tr>
                    @if (!string.IsNullOrEmpty(ChosenOne.PaidOffPerson1))
                    {
                        <tr>
                            <td>@(Constants.Person1 + " Transfer to/Pays Off")</td>
                            <td>@BalanceRepo.GetNameFromId(ChosenOne.PaidOffPerson1)</td>
                        </tr>
                    }
                    <tr>
                        <td>Amount</td>
                        <td>@ChosenOne.Person1Amount</td>
                    </tr>
                }

                @if (ChosenOne.Person2Amount != 0)
                {
                    <tr>
                        <td>@(Constants.Person2 + " Payment Method")</td>
                        <td>@BalanceRepo.GetNameFromId(ChosenOne.PaidWithPerson2)</td>
                    </tr>
                    @if (!string.IsNullOrEmpty(ChosenOne.PaidOffPerson2))
                    {
                        <tr>
                            <td>@(Constants.Person2 + " Transfer to/Pays Off")</td>
                            <td>@BalanceRepo.GetNameFromId(ChosenOne.PaidOffPerson2)</td>
                        </tr>
                    }
                    <tr>
                        <td>Amount</td>
                        <td>@ChosenOne.Person2Amount</td>
                    </tr>
                }
            </table>
        </div>
    }
    <br style="clear:both" />
    <br style="clear:both" />
    <button class="btn btn-secondary" disabled=@Disabled @onclick="Submit">Submit</button>
    <br />

    @if (!string.IsNullOrEmpty(ErrorMsg))
    {
        <p style="color:@ErrorColor">@ErrorMsg</p>
    }
</div>
<br />

@code {
    private List<Preset> Presets => Constants.Presets;

    private string name;
    string id;
    string Id
    {
        get { return id; }
        set
        {
            id = value;
            ChosenOne = Presets.FirstOrDefault(e => e.Id == Id);
        }
    }

    private string ErrorMsg { get; set; } = string.Empty;
    private string ErrorColor { get; set; } = "red";

    private bool Disabled;
    Preset ChosenOne = null;

    protected override async Task OnInitializedAsync()
    {

    }

    public async Task Submit()
    {
        Disabled = true;
        ErrorMsg = string.Empty;
        ErrorColor = "red";

        if (string.IsNullOrEmpty(Id))
            ErrorMsg += "Please select a preset.\n";

        if (string.IsNullOrEmpty(ErrorMsg))
        {
            if (ChosenOne != null)
            {
                await PresetRepo.RemoveAsync(ChosenOne);
                Constants.Presets = new List<Preset>(Presets);

                ErrorColor = "green";
                ErrorMsg = $"Preset called '{ChosenOne.Name}' was deleted!";
            }

            Id = string.Empty;
            ChosenOne = null;
        }

        Disabled = false;
        StateHasChanged();
    }
}