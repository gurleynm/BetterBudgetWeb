@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Repo

@if (Mobile)
{
    <div style="float:left; margin:auto 0;width:100%;">
        @if (!DeleteIsSet)
        {
            <div class="flex-c-start" style="padding:1em">
                <div class="flex-r-100" style="align-items:center;padding:1em">
                    <label style="padding-right:1em">Security Name:</label>
                    <FancySelect @bind-Value="SecID" Style="">
                        <option value="@string.Empty" selected disabled="disabled">(Select Security)</option>
                        @if (Securities != null)
                        {
                            @foreach (var sec in Securities)
                            {
                                <option value="@sec.Id">@sec.Name</option>
                            }
                        }
                    </FancySelect>
                </div>
                <div class="flex-r-100" style="align-items:center;padding:1em">
                    <label style="padding-right:1em">Number of Shares:</label>
                    <input class="custom-input" type="number" style="min-width:23vw" placeholder="# of Shares" @bind-value="@NumShares" @oninput="@(async (ui) => { NumShares = (string)ui.Value; })" />
                </div>
                <div class="flex-r-100" style="align-items:center;padding:1em">
                    <label style="padding-right:1em">Share Price at Sale:</label>
                    <input class="custom-input" type="number" style="min-width:23vw" placeholder="Price/Share" @bind-value="@SalePrice" @oninput="@(async (ui) => { SalePrice = (string)ui.Value; })" />
                </div>
                <div class="flex-r-100">
                    <button class="btn btn-success" style="margin:0 2vw;" disabled=@Disabled @onclick=Sell>Sell</button>
                </div>
            </div>
        }
        else
        {
            <div style="float:left;  margin: 0 2vw 2vh 2vw;">
                <div style="float:left; margin: 0 2vw;padding:1vh 0 0 0;">
                    <label>Security Name:</label>
                </div>
                <div style="float:left; margin: 0 2vw;">
                    <FancySelect @bind-Value="SecID" Style="">
                        <option value="@string.Empty" selected disabled="disabled">(Select Security)</option>
                        @if (Securities != null)
                        {
                            @foreach (var sec in Securities)
                            {
                                <option value="@sec.Id">@sec.Name</option>
                            }
                        }
                    </FancySelect>
                    <button class="btn btn-danger" style="margin:0 2vw;" disabled=@Disabled @onclick=Delete>Delete</button>
                </div>
            </div>
        }
    </div>
    @if (!string.IsNullOrEmpty(ErrorMsg))
    {
        <br />
        <p style="color:@ErrorColor">@ErrorMsg</p>
        <br />
    }
}
else
{
    <div class="flex-c" style="margin:1vw 1vw;">
        @* <div class="flex-r" style="align-items:center;">
    <label style="margin:0 1vw">Sell</label>
    <label class="switch">
    <input type="checkbox" @bind=DeleteIsSet>
    <span class="slider round" style="background-color:@GetColor();color:aqua"></span>
    </label>
    <label style="margin:0 1vw">Delete</label>
    </div> *@
        <div class="flex-r">
            <div class="flex-c-start" style="margin:0 1vw;">
                <label>Security Name:</label>
                <FancySelect @bind-Value="SecID" Style="">
                    <option value="@string.Empty" selected disabled="disabled">(Select Security)</option>
                    @if (Securities != null)
                    {
                        @foreach (var sec in Securities)
                        {
                            <option value="@sec.Id">@sec.Name</option>
                        }
                    }
                </FancySelect>
            </div>
            @if (!DeleteIsSet)
            {
                <div class="flex-c-start" style="margin:0 1vw;">
                    <label>Number of Shares:</label>
                    <input class="custom-input" type="number" style="width:7vw" placeholder="# of Shares" @bind-value="@NumShares" @oninput="@(async (ui) => { NumShares = (string) ui.Value;})" />
                </div>
                <div class="flex-c-start" style="margin:0 1vw;">
                    <label>Share Price at Sale:</label>
                    <input class="custom-input" type="number" style="width:8vw" placeholder="Price/Share" @bind-value="@SalePrice" @oninput="@(async (ui) => { SalePrice = (string) ui.Value;})" />
                </div>
            }
            @if (DeleteIsSet)
            {
                <button class="btn btn-danger" style="margin:0 1vw;height:fit-content" disabled=@Disabled @onclick=Delete>Delete</button>
            }
            else
            {
                <button class="btn btn-success" style="margin:0 1vw;height:fit-content" disabled=@Disabled @onclick=Sell>Sell</button>
            }
        </div>
        @if (!string.IsNullOrEmpty(ErrorMsg))
        {
            <p style="margin-left:1vw;color:@ErrorColor">@ErrorMsg</p>
        }
    </div>

}

@code {
    [Parameter]
    public string SecID { get; set; }

    private Balance selectedBalance { get; set; }

    [Parameter]
    public Balance SelectedBalance
    {
        get { return selectedBalance; }
        set
        {
            selectedBalance = value;
            Securities = AllSecurities == null ? null : AllSecurities.Where(sec => sec.BalanceFrom == selectedBalance.Id).ToList();
        }
    }

    [Parameter]
    public EventCallback OnClick { get; set; }

    [Parameter]
    public EventCallback<Balance> SelectedBalanceChanged { get; set; }

    public bool Mobile => Constants.Mobile;

    private bool DeleteIsSet = false;

    private List<Data.Security> AllSecurities { get; set; }
    private List<Data.Security> Securities { get; set; }

    private string ErrorMsg { get; set; } = string.Empty;
    private string ErrorColor { get; set; } = "red";

    private string NumShares;
    private string SalePrice;
    private bool Disabled;

    protected override async Task OnInitializedAsync()
    {
        AllSecurities = SecurityRepo.GetSecurities();
        Securities = AllSecurities.Where(sec => sec.BalanceFrom == selectedBalance.Id).ToList();
    }

    public async void Sell()
    {
        Disabled = true;
        ErrorMsg = string.Empty;
        ErrorColor = "red";

        bool NumSharesDouble = double.TryParse(NumShares, out double tp);
        bool SoldPriceDouble = double.TryParse(SalePrice, out double tp1);

        ErrorMsg += string.IsNullOrEmpty(SecID) ? "Security name must be set. " : "";
        ErrorMsg += !NumSharesDouble || tp < 0 ? "Enter a valid number of shares. " : "";
        ErrorMsg += !SoldPriceDouble || tp1 < 0 ? "Enter a valid sale price. " : "";


        if (string.IsNullOrEmpty(ErrorMsg))
        {
            var chosenOne = Securities.FirstOrDefault(e => e.Id == SecID);

            if (chosenOne == null)
                ErrorMsg = "Amazing, you don't own this security!";
            else if (chosenOne != null && chosenOne.NumShares < tp)
                ErrorMsg = "Cannot sell more shares than you have. ";

            if (string.IsNullOrEmpty(ErrorMsg))
            {
                chosenOne.NumShares = tp;
                chosenOne.Value = tp1 * tp;

                Securities = await SecurityRepo.RemoveAsync(chosenOne);


                ErrorColor = "green";
                ErrorMsg = $"{chosenOne.Name} was sold!";

                SecID = string.Empty;
            }
        }

        OnClick.InvokeAsync();
        Disabled = false;
        StateHasChanged();
    }

    public async void Delete()
    {
        Disabled = true;
        ErrorMsg = string.Empty;
        ErrorColor = "red";

        ErrorMsg += string.IsNullOrEmpty(SecID) ? "Security name must be set. " : "";

        if (string.IsNullOrEmpty(ErrorMsg))
        {
            var chosenOne = Securities.FirstOrDefault(e => e.Id == SecID);
            chosenOne.Value = -1;
            Securities = await SecurityRepo.RemoveAsync(chosenOne);


            ErrorColor = "green";
            ErrorMsg = $"{chosenOne.Name} was deleted!";

            SecID = string.Empty;

        }

        OnClick.InvokeAsync();
        Disabled = false;
        StateHasChanged();
    }
    private string GetColor()
    {
        return DeleteIsSet ? "red" : "green";
    }
}
