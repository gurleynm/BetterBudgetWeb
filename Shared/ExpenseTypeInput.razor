@using BetterBudgetWeb.Data;

@if (ExpenseTypes == null)
{
    <select>
        <option value="@string.Empty" selected disabled="disabled">Expense Types</option>
    </select>
}
else
{
    @if (!Mobile)
    {
        <select style="margin:1vh 0 1vh 0;color:white;border:none;" @bind="NewExpense" title="Pick an Expense Type ">
            <option value="@string.Empty" selected disabled="disabled">Expense Type</option>
            @foreach (var et in ExpenseTypes)
            {
                @if (et.Contains("- Envelopes -") || et.Contains("-- Dynamic Costs --")
               || et.Contains("-- Others --"))
                {
                    <option value="et" disabled>@et</option>
                }
                else
                {
                    <option value="@et">@et</option>
                }
            }
        </select>
    }
    else
    {
        <select class="custom-select" style="margin:1vh 0 1vh 0;border:none;width:20vw;color:white" @bind="NewExpense" title="Pick an Expense Type ">
            <option value="@string.Empty" selected disabled="disabled">Expense</option>
            @foreach (var et in ExpenseTypes)
            {
                @if (et.Contains("- Envelopes -") || et.Contains("-- Dynamic Costs --")
               || et.Contains("-- Others --"))
                {
                    <option disabled value="@et">@et</option>
                }
                else
                {
                    <option value="@et">@et</option>
                }
            }
        </select>
    }
}

@code {
    [Parameter]
    public bool Mobile { get; set; }

    private List<string> ExpenseTypes { get; set; } = new List<string>();

    public List<Data.Envelope> Person1Envelopes;
    public List<Data.Envelope> Person2Envelopes;


    private string newExpense { get; set; }

    [Parameter]
    public string NewExpense
    {
        get => newExpense;
        set
        {
            if (newExpense == value) return;
            newExpense = value;
            NewExpenseChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> NewExpenseChanged { get; set; }

    private string FilterIndicatorTxt = " (ON)";

    protected override Task OnInitializedAsync()
    {
        Person1Envelopes = Constants.Envelopes.Where(e => e.Person1Amount > 0).ToList();
        Person2Envelopes = Constants.Envelopes.Where(e => e.Person2Amount > 0).ToList();

        var Balances = Constants.Balances;

        var TempDCI = new List<string>();
        var TempEnv = new List<string>();
        var TempOth = new List<string>();

        foreach (var dci in Constants.DynamicCostItems)
            TempDCI.Add(dci.Name.Replace(FilterIndicatorTxt, ""));

        TempDCI.Sort();

        if (Balances.Count(bal => bal.BalanceType == "Equity") > 0)
            TempOth.Add("Equity");

        TempOth.Add("1-Time Charge");
        TempOth.Add("Income");

        TempOth.Sort();

        foreach (var p1e in Person1Envelopes)
            TempEnv.Add(p1e.Name);

        foreach (var p2e in Person2Envelopes)
            if (!TempEnv.Contains(p2e.Name))
                TempEnv.Add(p2e.Name);

        TempEnv.Sort();

        ExpenseTypes.Add("-- Dynamic Costs --");

        foreach (var d in TempDCI)
            if(!d.Contains("(EXAMPLE DATA)"))
                ExpenseTypes.Add(d);

        ExpenseTypes.Add("-- Envelopes --");
        foreach (var d in TempEnv)
            ExpenseTypes.Add(d);

        ExpenseTypes.Add("-- Others --");
        foreach (var o in TempOth)
            ExpenseTypes.Add(o);

        return base.OnInitializedAsync();
    }

    private bool ValidPaymentBalance(Balance b, string person)
    {
        return (b.Person == person || b.Person.ToUpper() == "JOINT") && b.BalanceType != "Stocks";
    }
}
