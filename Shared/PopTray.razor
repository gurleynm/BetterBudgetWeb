@inject IJSRuntime JSRuntime
@if (TopButton && ShowButton)
{
    <div class="flex-c" style="margin:@Margin">
        <button class="btn btn-primary" style="background-image:linear-gradient(to right, cyan,indigo,cyan)"
                @onclick=@(async () => await ToggleShowWorthBtn())>
            @WorthTxt
        </button>
    </div>
}
<div id="@Id" class="pop-up" >
    @ChildContent
</div>
@if (BottomButton && ShowButton)
{
    <div class="flex-c" style="margin:@Margin">
        <button class="btn btn-primary" style="background-image:linear-gradient(to right, cyan,indigo,cyan)"
                @onclick=@(async () => await ToggleShowWorthBtn())>
            @WorthTxt
        </button>
    </div>
}

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Id { get; set; }

    private bool showWorth { get; set; }
    [Parameter]
    public bool ShowWorth
    {
        get { return showWorth; }
        set
        {
            if (showWorth == value)
                return;

            showWorth = value;

            if (!HitHere)
                ToggleShowWorth(false);
        }
    }
    [Parameter]
    public EventCallback<bool> ShowWorthChanged { get; set; }

    private bool setFit { get; set; } = true;
    [Parameter]
    public bool SetFit
    {
        get { return setFit; }
        set
        {
            if (setFit == value)
                return;

            setFit = value;
            ResizeTray();
            SetFitChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<bool> SetFitChanged { get; set; }

    [Parameter]
    public bool ShowButton { get; set; } = true;

    [Parameter]
    public bool TopButton { get; set; } = false;

    [Parameter]
    public bool BottomButton { get; set; } = true;

    [Parameter]
    public string ShowTxt { get; set; } = "Show Net Worth";

    [Parameter]
    public string HideTxt { get; set; } = "Hide Net Worth";

    [Parameter]
    public bool StartOpen { get; set; }

    [Parameter]
    public string Margin { get; set; } = "1em 0";

    private string WorthTxt => !showWorth ? ShowTxt : HideTxt;
    private string FitHeight => SetFit ? "height:fit-content" : "";

    public bool HitHere { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && StartOpen)
        {
            await JSRuntime.InvokeAsync<object>("toggleExpand", Id);
        }
    }

    private async Task ToggleShowWorthBtn()
    {
        HitHere = true;
        ShowWorth = !ShowWorth;
        await ToggleShowWorth(false);
        HitHere = false;
    }
    private async Task ToggleShowWorth(bool invert = true)
    {
        await JSRuntime.InvokeAsync<object>("toggleExpand", Id);
    }

    private async void ResizeTray()
    {
        await JSRuntime.InvokeAsync<object>("resizeTray", Id);
    }
}
