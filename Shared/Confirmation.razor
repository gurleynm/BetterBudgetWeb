@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Repo


@if (!Mobile)
{
    <div class="modal show" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" style="background-color:rgba(0,0,0,.8);overflow-y:auto;">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="min-width:30vw;width:fit-content;position: absolute;left: 50%; top: 50%;
                        transform: translate(-50%, 0%);background-color:@Constants.ColorScheme["ComponentBackground"]">
                <div class="modal-header">
                    <h5 class="modal-title" style="font-size:large;font-family:'CBB Default';color:white">
                        <strong>@Title</strong>
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-dismiss="modal" aria-label="Close" @onclick="@ModalCancel">
                    </button>
                </div>
                <div class="modal-body" style="min-width:100%;width:fit-content;color:black;">
                    @ChildContent
                </div>
                <div class="modal-footer">
                    @if (Disabled)
                    {
                        <div style="width:100%">
                            <LoadingDots />
                        </div>
                    }
                    else
                    {
                        @if (LeftBtnShow)
                        {
                            <button type="button" disabled=@Disabled class="btn @LeftBtnColor" style="position:absolute;left:1vw;" data-dismiss="modal" @onclick="@LeftClicked">@LeftBtnTxt</button>
                        }
                        @if (MidBtnShow)
                        {
                            <button type="button" disabled=@Disabled class="btn @MidBtnColor" data-dismiss="modal" @onclick="@MiddleClicked">@MidBtnTxt</button>
                        }
                        @if (RightBtnShow)
                        {
                            <button type="button" disabled=@Disabled class="btn @RightBtnColor" data-dismiss="modal" @onclick="@RightClicked">@RightBtnTxt</button>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="modal show" id="exampleModalLong" tabindex="-1" role="dialog" aria-labelledby="exampleModalLongTitle" style="background-color:rgba(0,0,0,.8);">
        <div class="modal-dialog" role="document">
            <div class="modal-content" style="width:fit-content;margin:0 auto;background-color:@Constants.ColorScheme["ComponentBackground"];max-width:100%;">
                <div class="modal-header">
                    <h5 class="modal-title" style="font-size:large;font-family:'CBB Default';color:white;">
                        <strong>@Title</strong>
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-dismiss="modal" aria-label="Close" @onclick="@ModalCancel">
                    </button>
                </div>
                <div class="modal-body" style="width:fit-content;color:black;overflow-y:auto;max-height:70vh;max-width:100%;">
                    @ChildContent
                </div>
                <div class="modal-footer flex-r" style="justify-content:space-around">
                    @if (Disabled)
                    {
                        <div style="width:100%">
                            <LoadingDots />
                        </div>
                    }
                    else
                    {
                        @if (LeftBtnShow)
                        {
                            <button type="button" disabled=@Disabled class="btn @LeftBtnColor" style="float:left" data-dismiss="modal" @onclick="@LeftClicked">@LeftBtnTxt</button>
                        }
                        @if (RightBtnShow)
                        {
                            <button type="button" disabled=@Disabled class="btn @RightBtnColor" data-dismiss="modal" @onclick="@RightClicked">@RightBtnTxt</button>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    public bool Mobile => Constants.Mobile;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Title { get; set; } = "Are you sure?";

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<bool> LeftBtnClick { get; set; }

    [Parameter]
    public EventCallback<bool> MidBtnClick { get; set; }

    [Parameter]
    public EventCallback<bool> RightBtnClick { get; set; }

    [Parameter]
    public string LeftBtnTxt { get; set; }

    [Parameter]
    public string MidBtnTxt { get; set; }

    [Parameter]
    public string RightBtnTxt { get; set; } = "Delete";

    [Parameter]
    public string LeftBtnColor { get; set; } = "btn-secondary";

    [Parameter]
    public string MidBtnColor { get; set; } = "btn-danger";

    [Parameter]
    public string RightBtnColor { get; set; } = "btn-success";

    public bool LeftBtnShow => !string.IsNullOrEmpty(LeftBtnTxt);
    public bool MidBtnShow => !string.IsNullOrEmpty(MidBtnTxt);
    public bool RightBtnShow => !string.IsNullOrEmpty(RightBtnTxt);

    [Parameter]
    public bool Disabled
    {
        get { return disabled; }
        set
        {
            if (disabled == value)
                return;

            disabled = value;

            DisabledChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> DisabledChanged { get; set; }
    private bool disabled;

    private async Task RightClicked()
    {
        Disabled = true;
        await Task.Delay(100);
        if (!RightBtnClick.HasDelegate)
            await ModalAccept();
        else
            await RightBtnClick.InvokeAsync(true);
    }

    private async Task MiddleClicked()
    {
        Disabled = true;
        await Task.Delay(100);

        if (!MidBtnClick.HasDelegate)
            await ModalCancel();
        else
            await MidBtnClick.InvokeAsync(true);
        
        Disabled = false;
        await Task.Delay(100);
    }

    private async Task LeftClicked()
    {
        Disabled = true;
        await Task.Delay(100);

        if (!LeftBtnClick.HasDelegate)
            await ModalCancel();
        else
            await LeftBtnClick.InvokeAsync(true);

        Disabled = true;
        await Task.Delay(100);
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

    private Task ModalAccept()
    {
        return OnClose.InvokeAsync(true);
    }
}