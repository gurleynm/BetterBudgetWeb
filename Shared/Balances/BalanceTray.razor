@using BetterBudgetWeb.Data
@if (Balances != null)
{
    <h3 style="text-align:center;">
        <span>
            TOTAL NET WORTH:</span>
        <span style="color:@Constants.GoodOrBad(Constants.TotalNetWorth)">
                @(Constants.Pretty(Constants.TotalNetWorth))
            </span>
        </h3>
    <div style="display:flex;flex-direction:column;justify-content:space-between;width:100%">
        <h3 style="text-align:center">
            <span>@($"{Constants.Person1}'s Net Worth:")</span> <span style="color:@Constants.GoodOrBad(Constants.Person1NetWorth)">@(Constants.Pretty(Constants.Person1NetWorth))</span>
        </h3>

        <h3 style="text-align:center">
            <span>@($"{Constants.Person2}'s Net Worth:")</span> <span style="color:@Constants.GoodOrBad(Constants.Person2NetWorth)">@(Constants.Pretty(Constants.Person2NetWorth))</span>
        </h3>
    </div>
    @foreach (var bal in Balances)
    {
        <BalanceSlot ShowSpending="false" TheBalance="bal" SetClass="selected-account" IncludeGoals=Goals 
                OnClick=@(() => RunClicked(bal)) />
    }
}

@code {
    [Parameter]
    public List<Balance> Balances { get; set; } = new List<Balance>();
    [Parameter]
    public Action<Balance> OnSlotClick { get; set; } 

    protected override Task OnInitializedAsync()
    {
        RefreshBalances();
        return base.OnInitializedAsync();
    }

    private void RunClicked(Balance bal)
    {
        if (OnSlotClick != null)
            OnSlotClick(bal);
    }

    private bool Goals;
    public void SetGoals(bool goal)
    {
        Goals = goal;
        StateHasChanged();
    }
    public void RefreshBalances()
    {
        Balances = Constants.catchAll.Balances;
        Balances.Sort(Constants.CompareBalance);
        StateHasChanged();
    }
}
