@using BetterBudgetWeb.Data
@using BetterBudgetWeb.Runner
@using BetterBudgetWeb.Shared.General
@using static BetterBudgetWeb.Shared.LineChart
@implements IDisposable

@if (Balances != null)
{
    <div id="balance-tray" class="flex-c-start" style="width:100%">
        <PopTray Id="wor">
            <div class="chart-hor" style="height:fit-content;padding-bottom:3em">
                <div class="flex-r-100">
                    <MyLineChart Plots="Plots" Height="300" />
                </div>
                <table class="borderless-table">
                    <tr>
                        <td style="text-align:start">
                            @($"{Constants.Person1}'s Net Worth")
                        </td>
                        <td style="text-align:end;">
                            <span style="color:@Constants.GoodOrBad(Constants.Person1NetWorth)">@(Constants.Pretty(Constants.Person1NetWorth))</span>
                        </td>
                    </tr>
                    <tr>
                        <td style="text-align:end;text-align:start">
                            @($"{Constants.Person2}'s Net Worth")
                        </td>
                        <td style="text-align:end;text-align:end">
                            <span style="color:@Constants.GoodOrBad(Constants.Person2NetWorth)">@(Constants.Pretty(Constants.Person2NetWorth))</span>
                        </td>
                    </tr>
                    <tr>
                        <td style="text-align:start">
                            Total Net Worth
                        </td>
                        <td style="text-align:end;color:@Constants.GoodOrBad(Constants.TotalNetWorth)">
                            @(Constants.Pretty(Constants.TotalNetWorth))
                        </td>
                    </tr>
                </table>
                @if (Constants.Transactions != null && Constants.Transactions.Count > 0)
                {
                    <div class="flex-c" style="padding-top:1em;width:100%">
                        <button class="btn btn-secondary" @onclick=@(() => ToggleReports())>View Reports</button>
                    </div>
                }
            </div>
        </PopTray>
        <div style="padding-bottom:2vh">
            <div class="flex-c-start">
                <CascadingValue Value="Goals">
                    <GenBalTray ExpenseType="Equity" />
                    <GenBalTray @ref=IncomeTray ExpenseType="Income" />
                    <GenBalTray ExpenseType="Stocks" />
                    <GenBalTray ExpenseType="Credit Cards/Loans" SearchTerm="Loan" />
                </CascadingValue>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public List<Balance> Balances { get; set; } = new List<Balance>();
    [Parameter]
    public Action<Balance> OnSlotClick { get; set; }
    [Parameter]
    public Action OnEnvelopeClick { get; set; }
    [CascadingParameter]
    public MainLayout MainLayout { get; set; }
    [CascadingParameter]
    public EventCallback<Transaction> RunModal { get; set; }

    public bool ViewReports { get; set; }
    private GenBalTray IncomeTray { get; set; }

    private bool FirstToggle = true;
    private bool ShowWorth = true;
    private string WorthTxt => ShowWorth ? "Show Worth" : "Hide Worth";
    private List<LinePlot> Plots => Constants.Mobile ? Constants.Plots : new();

    protected override Task OnInitializedAsync()
    {
        Constants.BalancesChanged += BalancesUpdated;
        RefreshBalances();
        return base.OnInitializedAsync();
    }

    private async void ToggleReports()
    {
        MainLayout.ModalType = "R";
        await RunModal.InvokeAsync(new Transaction());

    }

    private void ToggleShowWorth()
    {
        if (FirstToggle)
            FirstToggle = false;
        ShowWorth = !ShowWorth;
    }

    public bool Goals;
    public void SetGoals(bool goal)
    {
        Goals = goal;
        StateHasChanged();
    }

    public void RefreshBalances()
    {
        Balances = Constants.catchAll.Balances;
        Balances.Sort(Constants.CompareBalance);
        StateHasChanged();
    }

    private void BalancesUpdated(object sender, List<Balance> e)
    {
        Balances = new List<Balance>(e);
        Balances.Sort(Constants.CompareBalance);

        StateHasChanged();
    }

    public void Dispose()
    {
        Constants.BalancesChanged -= BalancesUpdated;
    }
}
