@using BetterBudgetWeb.Data
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="flex-r" style="width:100%;justify-content:start;cursor:pointer;align-items:center;
            background-color:@Constants.ColorScheme["ComponentBackground"];padding:.5em"
     @onclick=@(() => OpenTray = !OpenTray)>
    <div class="flex-r" style="width:75%;justify-content:start;align-items:center;">
        <span style="margin-right:1em">@ExpenseType</span>
        @if (OpenTray)
        {
            <span class="oi oi-caret-bottom"></span>
        }
        else
        {
            <span class="oi oi-caret-right"></span>
        }
    </div>

    <div style="align-self:end;color:@Constants.GoodOrBad(BalanceTotal)">@Constants.Pretty(BalanceTotal)</div>
</div>
<PopTray Id="@Id" @bind-ShowWorth=OpenTray ShowButton=false
         StartOpen=!Constants.Mobile>
    <div style="padding-bottom:1em">
        @foreach (var bal in Balances)
        {
            <BalanceSlot TheBalance="bal" SetClass="selected-account" IncludeGoals=Goals
                         ShowPersonInMonthly=Constants.Mobile ParentId=@Id @bind-ParentOpen=OpenTray/>
        }
    </div>
</PopTray>

@code {
    [Parameter]
    public string ExpenseType { get; set; }

    [CascadingParameter]
    public bool Goals { get; set; }

    [Parameter]
    public string SearchTerm { get; set; }

    private string Id => ExpenseType.Replace("/", "-").Replace(" ", "-") + "-drop";

    private string ST => string.IsNullOrWhiteSpace(SearchTerm) ? ExpenseType : SearchTerm;

    private bool OpenTray { get; set; } = !Constants.Mobile; // Looks better on Mobile to start closed

    private IEnumerable<Balance> Balances;
    private double BalanceTotal => GetAmount();

    protected override Task OnInitializedAsync()
    {
        Constants.BalancesChanged += BalancesUpdated;
        Balances = Constants.Balances.Where(b => b.BalanceType == ST).OrderByDescending(b => b.Value);
        return base.OnInitializedAsync();
    }

    private double GetAmount()
    {
        double amount = 0;
        foreach (var TheBalance in Balances)
        {
            amount += Goals ? TheBalance.GetValueWithGoals() : TheBalance.Value;

            if (TheBalance.BalanceType == "Stocks")
            {
                try
                {
                    var Securities = Constants.Securities.Where(sec => sec.BalanceFrom.ToUpper() == TheBalance.Id.ToUpper())?.ToList();
                    amount += Securities == null ? 0 : Securities.Sum(s => s.Value);
                }
                catch (Exception e) { }
            }
        }

        if (ST == "Loan")
            amount = amount * -1;

        return amount;
    }

    private void BalancesUpdated(object sender, List<Balance> e)
    {
        var TempBalances = Constants.Balances.Where(b => b.BalanceType == ST).OrderByDescending(b => b.Value);
        if (TempBalances.Count() != Balances.Count() && OpenTray)
            JSRuntime.InvokeAsync<string>("resizeTray", Id);

        Balances = TempBalances;
        StateHasChanged();
    }

    public void Dispose()
    {
        Constants.BalancesChanged -= BalancesUpdated;
    }
}
