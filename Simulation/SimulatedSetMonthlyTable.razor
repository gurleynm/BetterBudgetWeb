@using System.Globalization
@using BetterBudgetWeb.Data
@if (Mobile)
{
    <div style="width:100%; float:left;">
        <table>
            <tr>
                <th colspan="4" style="font-size:3vw;background-color:green;color:white"><i>Set Monthly Costs</i></th>
            </tr>
            <tr>
                <td></td>
                <td style="font-size:3vw;">@Constants.Person1</td>
                <td style="font-size:3vw;">@Constants.Person2</td>
                <td style="font-size:3vw;">Total</td>
            </tr>
            @foreach (var smc in SimulatedConstants.StaticMonthlyCosts)
            {
                @if (Determine(smc))
                {
                    <tr style="font-size:3vw;text-decoration:line-through;color:forestgreen">
                        <td style="font-size:3vw;padding:.5vw 1vw;">@smc.Name</td>
                        <td style="font-size:3vw;">@("$" + smc.Person1Amount)</td>
                        <td style="font-size:3vw;">@("$" + smc.Person2Amount)</td>
                        <td style="font-size:3vw;">@("$" + smc.TotalAmount)</td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td style="font-size:3vw;padding:.5vw 1vw;">
                            <span>@smc.Name</span>
                            <div style="padding:.5vw 1vw;display:flex;justify-content:end;text-align:start">
                                @if (Constants.Balances != null)
                                {
                                    <select @onchange=@((ChangeEventArgs e) => BalanceChange1(e, smc))>
                                        @foreach (var bal in Person1Balances)
                                        {
                                            @if (StaticMonthMap.ContainsKey(smc.Name) && StaticMonthMap[smc.Name].Item1 == bal.Name)
                                            {
                                                <option selected style="background-color:@bal.HexColor;color:@bal.TextColor">@bal.Name</option>
                                            }
                                            else
                                            {
                                                <option style="background-color:@bal.HexColor;color:@bal.TextColor">@bal.Name</option>
                                            }
                                        }
                                    </select>
                                    <select @onchange=@((ChangeEventArgs e) => BalanceChange2(e, smc))>
                                        @foreach (var bal in Person2Balances)
                                        {
                                            @if (StaticMonthMap.ContainsKey(smc.Name) && StaticMonthMap[smc.Name].Item2 == bal.Name)
                                            {
                                                <option selected style="background-color:@bal.HexColor;color:@bal.TextColor">@bal.Name</option>
                                            }
                                            else
                                            {
                                                <option style="background-color:@bal.HexColor;color:@bal.TextColor">@bal.Name</option>
                                            }
                                        }
                                    </select>
                                }
                            </div>
                        </td>
                        <td style="font-size:3vw;">@("$" + smc.Person1Amount)</td>
                        <td style="font-size:3vw;">@("$" + smc.Person2Amount)</td>
                        <td style="font-size:3vw;">@("$" + smc.TotalAmount)</td>
                    </tr>
                }
            }
            <tr>
                <td style="font-size:3vw;" colspan="4">=</td>
            </tr>
            <tr>
                <td style="font-size:3vw;"><strong>Total</strong></td>
                <td style="font-size:3vw;padding-right:.5vw; padding-left:.5vw;">@Constants.Pretty(SimulatedConstants.StaticMonthlyCosts.Sum(na => na.Person1Amount))</td>
                <td style="font-size:3vw;padding-right:.5vw; padding-left:.5vw;">@Constants.Pretty(SimulatedConstants.StaticMonthlyCosts.Sum(la => la.Person2Amount))</td>
                <td style="font-size:3vw;padding-right:.5vw; padding-left:.5vw;">@Constants.Pretty(SimulatedConstants.StaticMonthlyCosts.Sum(ta => ta.TotalAmount))</td>
            </tr>
        </table>
    </div>
}
else
{
    <div style="width:35vw; float:left;margin-right:2vw;">
        <table>
            <tr>
                <th colspan="4" style="background-color:green;color:white"><i>Set Monthly Costs</i></th>
            </tr>
            <tr>
                <td></td>
                <td>@Constants.Person1</td>
                <td>@Constants.Person2</td>
                <td>Total</td>
            </tr>
            @foreach (var smc in SimulatedConstants.StaticMonthlyCosts)
            {
                @if (Determine(smc))
                {
                    <tr style="text-decoration:line-through;color:forestgreen">
                        <td style="padding:.5vw 1vw;">@smc.Name</td>
                        <td>@("$" + smc.Person1Amount)</td>
                        <td>@("$" + smc.Person2Amount)</td>
                        <td>@("$" + smc.TotalAmount)</td>
                    </tr>
                }
                else
                {
                    <tr>
                        <td style="padding:.5vw 1vw;">
                            <span>@smc.Name</span>
                            <div style="padding:.5vw 1vw;display:flex;justify-content:end;text-align:start">
                                @if (Constants.Balances != null)
                                {
                                    <select @onchange=@((ChangeEventArgs e) => BalanceChange1(e, smc))>
                                        @foreach (var bal in Person1Balances)
                                        {
                                            @if (StaticMonthMap.ContainsKey(smc.Name) && StaticMonthMap[smc.Name].Item1 == bal.Name)
                                            {
                                                <option selected style="background-color:@bal.HexColor;color:@bal.TextColor">@bal.Name</option>
                                            }
                                            else
                                            {
                                                <option style="background-color:@bal.HexColor;color:@bal.TextColor">@bal.Name</option>
                                            }
                                        }
                                    </select>
                                    <select @onchange=@((ChangeEventArgs e) => BalanceChange2(e, smc))>
                                        @foreach (var bal in Person2Balances)
                                        {
                                            @if (StaticMonthMap.ContainsKey(smc.Name) && StaticMonthMap[smc.Name].Item2 == bal.Name)
                                            {
                                                <option selected style="background-color:@bal.HexColor;color:@bal.TextColor">@bal.Name</option>
                                            }
                                            else
                                            {
                                                <option style="background-color:@bal.HexColor;color:@bal.TextColor">@bal.Name</option>
                                            }
                                        }
                                    </select>
                                }
                            </div>
                        </td>
                        <td>@("$" + smc.Person1Amount)</td>
                        <td>@("$" + smc.Person2Amount)</td>
                        <td>@("$" + smc.TotalAmount)</td>
                    </tr>
                }
            }
            <tr>
                <td colspan="4">=</td>
            </tr>
            <tr>
                <td><strong>Total</strong></td>
                <td style="padding-right:.5vw; padding-left:.5vw;">@Constants.Pretty(SimulatedConstants.StaticMonthlyCosts.Sum(na => na.Person1Amount))</td>
                <td style="padding-right:.5vw; padding-left:.5vw;">@Constants.Pretty(SimulatedConstants.StaticMonthlyCosts.Sum(la => la.Person2Amount))</td>
                <td style="padding-right:.5vw; padding-left:.5vw;">@Constants.Pretty(SimulatedConstants.StaticMonthlyCosts.Sum(ta => ta.TotalAmount))</td>
            </tr>
        </table>
    </div>
}

@code {
    [Parameter]
    public int Month { get; set; }
    [Parameter]
    public int Year { get; set; }
    [Parameter]
    public List<Transaction> Trans { get; set; } = new List<Transaction>();

    public bool Mobile => Constants.Mobile;

    public Dictionary<string, (string, string)> staticMonthMap { get; set; }

    [Parameter]
    public Dictionary<string, (string, string)> StaticMonthMap
    {
        get => staticMonthMap;
        set
        {
            if (staticMonthMap == value) return;
            staticMonthMap = value;
            StaticMonthMapChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<Dictionary<string, (string, string)>> StaticMonthMapChanged { get; set; }
    [Parameter]
    public Action<(string, string), (string, string), string> BalanceChanged { get; set; }

    private string[] Ignorables = { "Equity", "Stocks" };

    private List<Balance> Person1Balances => Constants.Balances.Where(b => (b.Person == Constants.Person1 ||
                                                b.Person.ToUpper() == "JOINT") && !Ignorables.Contains(b.BalanceType))
                                                .OrderBy(ba => ba.Name).ToList();

    private List<Balance> Person2Balances => Constants.Balances.Where(b => (b.Person == Constants.Person2 ||
                                                b.Person.ToUpper() == "JOINT") && !Ignorables.Contains(b.BalanceType))
                                                .OrderBy(ba => ba.Name).ToList();

    private string Person1Balance { get; set; }
    private string Person2Balance { get; set; }


    private ElementReference MySelect1;

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private bool Determine(StaticMonthlyCost smc)
    {
        if (Trans == null)
            return false;

        if (SimulatedConstants.MonthYear() != Constants.MonthYear())
            return false;

        var allMonthYears = Trans.Where(tr => tr.MonthYear() == Constants.MonthYear()).ToList();

        if (allMonthYears == null || allMonthYears.Count == 0)
            return false;

        var names = allMonthYears.Select(t => t.Name).ToList();
        foreach (string s in names)
            if (smc.Name.Contains(s))
                return true;

        return false;
    }
    private void BalanceChange1(ChangeEventArgs e, StaticMonthlyCost sm)
    {
        var oldBal = StaticMonthMap[sm.Name];

        Person1Balance = e.Value.ToString();
        if (StaticMonthMap.ContainsKey(sm.Name))
        {
            StaticMonthMap[sm.Name] = new(Person1Balance, StaticMonthMap[sm.Name].Item2);
            if (BalanceChanged != null) BalanceChanged(oldBal, StaticMonthMap[sm.Name], sm.Name);
        }
    }
    private void BalanceChange2(ChangeEventArgs e, StaticMonthlyCost sm)
    {
        var oldBal = StaticMonthMap[sm.Name];

        Person2Balance = e.Value.ToString();
        if (StaticMonthMap.ContainsKey(sm.Name))
        {
            StaticMonthMap[sm.Name] = new(StaticMonthMap[sm.Name].Item1, Person2Balance);
            if (BalanceChanged != null) BalanceChanged(oldBal, StaticMonthMap[sm.Name], sm.Name);
        }
    }
}
